<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DY的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-07T07:36:34.051Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>湛蓝星空</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python常用模块（3）</title>
    <link href="http://yoursite.com/2019/08/07/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%EF%BC%883%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/07/python常用模块（3）/</id>
    <published>2019-08-07T07:01:22.000Z</published>
    <updated>2019-08-07T07:36:34.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="textwrap"><a href="#textwrap" class="headerlink" title="textwrap"></a>textwrap</h2><p>用来重新格式化文本的输出</p><p>fill() 调整换行符,每行显示给定宽度</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/textwrap1.png" alt></p><p>dedent()：去除缩进</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/textwrap2.png" alt></p><p>indent():给定前缀</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/textwrap3.png" alt></p><p>首行缩进：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/textwrap4.png" alt></p><p>多余的省略号：shorter()</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/wraptext5.png" alt></p><p>wrap():wrap(s,width) 以单词为单位(包括字符)最大长度不超过width个字符</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/wraptext6.png" alt></p><h2 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h2><p>Python的内建模块itertools提供了非常有用的用于操作迭代对象的函数</p><p><strong>count</strong>()会创建一个无限的迭代器，所以下述代码会打印出自然数序列，根本停不下来，只能按Ctrl+C退出。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/itertools.png" alt></p><p><strong>cycle()</strong>会把传入的一个序列无限重复下去：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/itertools1.png" alt></p><p><strong>repeat()</strong>负责把一个元素无限重复下去，不过如果提供第二个参数就可以限定重复次数：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/itertools2.png" alt></p><p><strong>chain()</strong>可以把一组迭代对象串联起来，形成一个更大的迭代器：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/itertools3.png" alt></p><p><strong>groupby()</strong>把迭代器中相邻的重复元素挑出来放在一起：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/itertools5.png" alt></p><p>实际上挑选规则是通过函数完成的，只要作用于函数的两个元素返回的值相等，这两个元素就被认为是在一组的，而函数返回值作为组的key。如果我们要忽略大小写分组，就可以让元素’A’和’a’都返回相同的key：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/itertools6.png" alt></p><p><strong>permutations()</strong>:输出输入序列的全排列,考虑顺序</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/itertools7.png" alt></p><p><strong>combinations()</strong>:同上，不过不考虑顺序</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/itertools8.png" alt></p><p><strong>product()</strong>:输出输入序列的笛卡儿积</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/itertools9.png" alt></p><p><strong>compress</strong>：可以对一个序列的筛选结果施加到另一个相关的序列上</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/itertools10.png" alt></p><p><strong>dropwhile()</strong>:筛选满足条件的元素</p><p><strong>islice()</strong>：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/itertools11.png" alt></p><p><strong>zip_longest</strong>：zip可产生元祖。当其中摸个输入序列中没有元素可以继续迭代时，迭代过程结束。所以整个迭代的长度和最短的输入序列相同。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/itertools12.png" alt></p><p>如果不想这样就用zip_longest：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/itertools13.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;textwrap&quot;&gt;&lt;a href=&quot;#textwrap&quot; class=&quot;headerlink&quot; title=&quot;textwrap&quot;&gt;&lt;/a&gt;textwrap&lt;/h2&gt;&lt;p&gt;用来重新格式化文本的输出&lt;/p&gt;
&lt;p&gt;fill() 调整换行符,每行显示给定宽度&lt;/p&gt;

      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="常用模块" scheme="http://yoursite.com/categories/python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
      <category term="常用模块（3）" scheme="http://yoursite.com/categories/python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%EF%BC%883%EF%BC%89/"/>
    
    
      <category term="python常用模块" scheme="http://yoursite.com/tags/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>python常用模块（2）</title>
    <link href="http://yoursite.com/2019/08/07/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/07/python常用模块（2）/</id>
    <published>2019-08-07T06:27:10.000Z</published>
    <updated>2019-08-07T07:00:53.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="collection："><a href="#collection：" class="headerlink" title="collection："></a>collection：</h2><p>collections是Python内建的一个集合模块，提供了许多有用的集合类。</p><p><strong>namedtuple</strong>是一个函数，它用来创建一个自定义的tuple对象，并且规定了tuple元素的个数，并可以用属性而不是索引来引用tuple的某个元素。这样一来，我们用namedtuple可以很方便地定义一种数据类型，它具备tuple的不变性，又可以根据属性来引用，使用十分方便。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/collections1.png" alt></p><p>利用namedtuple定义和使用具名元祖：第一个参数为类名，第二个参数为类的各个字段的名字</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/collections2.png" alt></p><p>具名元祖有些专用的属性：类属性_fields,类方法_make(),实例方法_asdict()</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/collections3.png" alt></p><p>如果需要修改任何属性，可以通过使用nametupled实例的_replace方法来实现。该方法会创建按一个新的命名元祖，并对相应的值进行替换。</p><p><strong>deque</strong>：是为了高效实现插入和删除操作的双向列表，适合用于队列和栈。deque(maxlen=N)创建一个固定长度的队列，当有新记录加入而队列已满时会自动移除最老的那条记录。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/collections5.png" alt></p><p><strong>defaultdict</strong>:使用dict时，如果引用的Key不存在，就会抛出KeyError。如果希望key不存在时，返回一个默认值，就可以用defaultdict。defaultdict的一个特点就是会自动初始化第一个值。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/collections6.png" alt></p><p>用defaultdict的效率比不用高:</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/collections7.png" alt></p><p><strong>OrderedDict</strong></p><p>使用dict时，Key是无序的。在对dict做迭代时，我们无法确定Key的顺序。</p><p>如果要保持Key的顺序，可以用OrderedDict。</p><p>OrderDict的大小是普通字典的2倍多，这是由于它额外创建的链表所导致。</p><p>注意，OrderedDict的Key会按照插入的顺序排列，不是Key本身排序：OrderedDict可以实现一个FIFO（先进先出）的dict，当容量超出限制时，先删除最早添加的Key</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/collections8.png" alt></p><p><strong>Counter</strong>：一个简单的计数器</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/collections10.png" alt></p><p>计数器的更新包括增加和减少两种，增加使用update，减少用subtract。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/collections11.png" alt></p><p>most_common(x):根据x返回频率前x的项。</p><p><strong>itemgetter</strong>：可以通过公共键对字典列表排序。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/collections12.png" alt></p><p><strong>ChainMap</strong>：可接受多个映射然后再逻辑上是它们表现为一个单独的映射结构。如果有重复的键，那么会采用第一个映射中所对应的值。修改映射的操作总是会作用在列出的第一个映射结构上。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/collections13.png" alt></p><h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><p>random.random() 产生0-1的随机浮点数</p><p>random.uniform(a, b) 产生指定范围内的随机浮点数</p><p>random.randint(a, b) 产生指定范围内的随机整数</p><p>random.randrange([start], stop[, step]) 从一个指定步长的集合中产生随机数</p><p>random.choice(sequence) 从序列中产生一个随机数</p><p>random.shuffle(x[, random]) 将一个列表中的元素打乱</p><p>random.sample(sequence, k) 从序列中随机获取指定长度的片断</p><h2 id="functools"><a href="#functools" class="headerlink" title="functools"></a>functools</h2><p><strong>reduce(function, sequence, value)</strong>：对sequence中的item顺序迭代调用function，如果有value，还可以作为初始值调用。function接收的参数个数只能为2，先把sequence中第一个值和第二个值当参数传给function，再把function的返回值和第三个值当参数传给function，然后只返回一个结果。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/functools1.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/functoolss.png" alt></p><p><strong>partial</strong>：基于一个函数创建一个新的可调用对象，把原函数的某些参数固定。</p><p>偏函数：只需要传一次值，后面想传就传</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/functools2.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;collection：&quot;&gt;&lt;a href=&quot;#collection：&quot; class=&quot;headerlink&quot; title=&quot;collection：&quot;&gt;&lt;/a&gt;collection：&lt;/h2&gt;&lt;p&gt;collections是Python内建的一个集合模块，提供了许多有
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="常用模块" scheme="http://yoursite.com/categories/python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
      <category term="常用模块（2）" scheme="http://yoursite.com/categories/python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%EF%BC%882%EF%BC%89/"/>
    
    
      <category term="python常用模块" scheme="http://yoursite.com/tags/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>python常用模块（1）</title>
    <link href="http://yoursite.com/2019/08/07/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/07/python常用模块（1）/</id>
    <published>2019-08-07T05:51:37.000Z</published>
    <updated>2019-08-07T06:26:32.829Z</updated>
    
    <content type="html"><![CDATA[<p>​    这几年，python大火。其中的一个原因是python的库特别多，而且封装非常好。接下来我来总结以下我用过的一些库，虽然都不是很大的库，但还是有用的。</p><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p>json主要执行序列化和反序列化的功能，通过Python的json模块，可以将字符串形式的json数据转化为字典，也可以将Python中的字典数据转化为字符串形式的json数据。</p><p>通过json字符串转为字典 json.loads</p><p>字典转换为json：json.dumps</p><p>json.loads()、dumps解码python json格式 </p><p>json.load、dump加载json格式文件</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/json.png" alt></p><p>pickle使用方法与json一样</p><p>区别：</p><p>json是可以在不同语言之间交换数据的，而pickle只在python之间使用。</p><p>json只能序列化最基本的数据类型，而pickle可以序列化所有的数据类型，包括类，函数都可以序列化。</p><h2 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h2><p>该模块提供了常见的摘要算法。如MD5，SHA1……摘要算法又称哈希算法、散列算法，通过一个函数，把任意长度的数据转换为一个长度固定的数据串。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/20190807140248.png" alt></p><p>摘要算法是一个单向函数，通过摘要函数f()对任意长度的数据data计算出固定长度的摘要digest，目的是发现原始数据是否被改动过。计算f(data)很容易，但通过digest反推data却非常困难，对原始数据做一个字节的修改，都会导致计算出来的摘要不同。</p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>string.digits:包含数字0-9的字符串</p><p>string.letters:包含所有字母（大写或小写）的字符串</p><p>string.lowercase:包含所有小写字母的字符串</p><p>string.printable:包含所有可打印字符的字符串</p><p>string.punctuation:包含所有标点的字符串</p><p>string.uppercase:包含所有大写字母的字符串</p><p>string.ascii_letters和string.digits方法，其中ascii_letters是生成所有字母，从a-z和A-Z,digits是生成所有数字0-9.</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/string%E6%A8%A1%E5%9D%97.png" alt></p><h2 id="词云"><a href="#词云" class="headerlink" title="词云"></a>词云</h2><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/wordcloud.png" alt></p><h2 id="decimal"><a href="#decimal" class="headerlink" title="decimal"></a>decimal</h2><p>如果期望获得更高的精度（并且愿意牺牲掉一些性能），可以使用decimal模块。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/decimal.png" alt></p><h2 id="fractions"><a href="#fractions" class="headerlink" title="fractions"></a>fractions</h2><p>模块可以用来处理涉及分数的数学计算问题</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/fractions.png" alt></p><h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h2><p>完成深拷贝和浅拷贝</p><p>is和==的区别：==是看值，is看是否指向同一个</p><p>浅拷贝：拷贝内容的地址</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/copy1.png" alt></p><p>深拷贝：开发另一片空间存放要拷贝的内容</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/copy3.png" alt></p><p>copy会判断数据类型是否为可变类型，如元祖为不可变类型，则只会完成浅拷贝。</p><h2 id="fileinput"><a href="#fileinput" class="headerlink" title="fileinput"></a>fileinput</h2><p>可以快速对一个或多个文件进行循环遍历</p><p>fileinput.input([files[, inplace[, backup[, mode[, openhook]]]]]])功能:生成FileInput模块类的实例。能够返回用于for循环遍历的对象。注意:文件名可以提供多个</p><p>inplace：是否返回输出结果到源文件中，默认为零不返回。设置为1时返回。</p><p>backup：备份文件的扩展名</p><p>mode：读写模式。只能时读、写、读写、二进制四种模式。默认是读</p><p>openhook：必须是一个函数，有两个参数，文件名和模式。返回相应的打开文件对象</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/fileinput.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/fileinput2.png" alt></p><p>fileinput.filename()：返回当前正在读取的文件的名称。在读取第一行之前，返回None。</p><p>fileinput.fileno()：返回当前文件的整数“文件描述符”。如果没有打开文件（在第一行之前和文件之间），则返回-1。</p><p>fileinput.lineno()：返回刚读过的行的累计行号。在读取第一行之前，返回0。读取完最后一个文件的最后一行后，返回该行的行号。</p><p>fileinput.filelineno()：返回当前文件中的行号。在读取第一行之前，返回0。读取完最后一个文件的最后一行后，返回该文件中该行的行号。</p><p>fileinput.isfirstline()：如果刚刚读取的行是其文件的第一行，则返回true，否则返回false。</p><p>fileinput.isstdin()：如果读取了最后一行sys.stdin，则返回true，否则返回false。</p><p>fileinput.nextfile()：关闭当前文件，以便下一次迭代将读取下一个文件的第一行（如果有的话）; 未从文件中读取的行将不计入累计行数。直到读取下一个文件的第一行之后才会更改文件名。在读取第一行之前，此功能无效; 它不能用于跳过第一个文件。读取完最后一个文件的最后一行后，此功能无效。</p><p>fileinput.close()关闭序列</p><h2 id="subprocess："><a href="#subprocess：" class="headerlink" title="subprocess："></a>subprocess：</h2><p>subprocess模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出。Popen()建立子进程的时候改变标准输入、标准输出和标准错误，并可以利用subprocess.PIPE将多个子进程的输入和输出连接在一起，构成管道(pipe)</p><p>subprocess.call():父进程等待子进程完成，返回退出信息(returncode，相当于Linux exit code)</p><p>subprocess.check_call():父进程等待子进程完成，返回0，检查退出信息，如果returncode不为0，则举出错误subprocess.CalledProcessError，该对象包含有returncode属性，可用try…except…来检查</p><p>subprocess.check_output():父进程等待子进程完成，返回子进程向标准输出的输出结果，检查退出信息，如果returncode不为0，则举出错误subprocess.CalledProcessError，该对象包含有returncode属性和output属性，output属性为标准输出的输出结果，可用try…except…来检查。</p><p>subprocess.Popen()，以下为参数：</p><p>args：shell命令，可以是字符串，或者序列类型，如list,tuple。</p><p>bufsize：缓冲区大小，可不用关心</p><p>stdin,stdout,stderr：分别表示程序的标准输入，标准输出及标准错误</p><p>shell：与上面方法中用法相同</p><p>cwd：用于设置子进程的当前目录</p><p>env：用于指定子进程的环境变量。如果env=None，则默认从父进程继承环境变量</p><p>universal_newlines：不同系统的的换行符不同，当该参数设定为true时，则表示使用\n作为换行符</p><p>常用方法：</p><p>poll() ： 检查子进程状态</p><p>kill() ： 终止子进程</p><p>send_signal() :向子进程发送信号</p><p>terminate() ： 终止子进程</p><p>communicate:从PIPE中读取PIPE的文本，该方法会阻塞父进程，直到子进程完成</p><p>常用属性：pid：子进程的pid，returncode：子进程的退出码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    这几年，python大火。其中的一个原因是python的库特别多，而且封装非常好。接下来我来总结以下我用过的一些库，虽然都不是很大的库，但还是有用的。&lt;/p&gt;
&lt;h2 id=&quot;json&quot;&gt;&lt;a href=&quot;#json&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="常用模块" scheme="http://yoursite.com/categories/python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
      <category term="常用模块（1）" scheme="http://yoursite.com/categories/python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%EF%BC%881%EF%BC%89/"/>
    
    
      <category term="python常用模块" scheme="http://yoursite.com/tags/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>元类</title>
    <link href="http://yoursite.com/2019/08/07/%E5%85%83%E7%B1%BB/"/>
    <id>http://yoursite.com/2019/08/07/元类/</id>
    <published>2019-08-07T05:39:47.000Z</published>
    <updated>2019-08-07T05:47:41.542Z</updated>
    
    <content type="html"><![CDATA[<p>​    今天来讲一下python里面较难的一个东西，我暂时还不知道这个东西具体用到哪。所以后面会陆陆续续的补。我学到的python内容里面有两个东西是比较难的，一个是描述符，另一个就是今天讲的元类。</p><p><strong>python通过类创建对象，通过元类创建类。（类也是对象）</strong></p><p>通过type动态创建类。命名规则：</p><p>type(类名，由父类名称构成的元祖（针对继承的情况，可以为空），包含属性的字典（名称和值）)</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%85%83%E7%B1%BB1.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%85%83%E7%B1%BB2.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    今天来讲一下python里面较难的一个东西，我暂时还不知道这个东西具体用到哪。所以后面会陆陆续续的补。我学到的python内容里面有两个东西是比较难的，一个是描述符，另一个就是今天讲的元类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;python通过类创建对象，通过元类创建类
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="元类" scheme="http://yoursite.com/categories/python/%E5%85%83%E7%B1%BB/"/>
    
    
      <category term="python的元类" scheme="http://yoursite.com/tags/python%E7%9A%84%E5%85%83%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>pandas用法总结</title>
    <link href="http://yoursite.com/2019/08/07/pandas/"/>
    <id>http://yoursite.com/2019/08/07/pandas/</id>
    <published>2019-08-07T01:55:50.000Z</published>
    <updated>2019-08-07T03:22:43.479Z</updated>
    
    <content type="html"><![CDATA[<p>​    pandas也是一个非常强大的库，所以我也只是总结了我用到的方法。</p><p>pandas常用的数据类型：1、Series  一维 带标签的数组（标签就是索引）2、DataFrame  二维   Series的容器</p><h2 id="Series："><a href="#Series：" class="headerlink" title="Series："></a>Series：</h2><p>通过列表创建Series：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas1.png" alt></p><p>索引可以指定，默认从0开始：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas2.png" alt></p><p>通过字典创建Series：可以通过astype修改类型</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas3.png" alt></p><p>取值：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas4.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas5.png" alt></p><p>可以将条件和value、index配合使用：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/panda6.png" alt></p><p>pandas读取外部数据：</p><p>read_csv:读取CSV文件</p><p>read_excel:读取excel文件</p><p>其他文件类似</p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>通过列表创建：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas7.png" alt></p><p>通过数组创建：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas8.png" alt></p><p>通过字典创建：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas9.png" alt></p><p><strong>DataFrame的基础属性</strong>：</p><p>shape ：行数 列数</p><p>dtypes：列数据类型</p><p>ndim：数据维度</p><p>index：行索引</p><p>columns：列索引</p><p>values：对象值</p><p><strong>DataFrame的方法</strong>：</p><p>head(n):显示头n行。默认是前5行</p><p>tail(n)：显示尾n行。</p><p>info()：行数，列数，列索引，列非空值个数，列类型，内存占用</p><p>describe()：计数 均值 标准差 最大值 四分位数 最小值</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas10.png" alt></p><p>DataFrame排序：sort_values()。通过设置by来确定排序的key。设置ascending确定升序or降序。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas11.png" alt></p><p>DataFrame的取值：</p><p>方括号写数字，表示取行。对行进行操作。根据实际情况写</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas13.png" alt></p><p>对列进行操作：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas14.png" alt></p><p>配合使用：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas16.png" alt></p><p>loc：DataFrame通过标签索引获取行数据</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas17.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas18.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas19.png" alt></p><p>根据多个索引取多个对应的值：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas20.png" alt></p><p>iloc：DataFrame通过位置获取列数据。与ioc类似，只是将索引换成数字。</p><p>数组合并：</p><p>1、join 按行索引合并             </p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas21.png" alt></p><p>2、merge按列索引进行合并 on指定按哪一列合并  how：合并方式 inner(交集，默认) outer(并集)  left(左边为准，NaN补全)  right(右边为准，NaN补全)</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas23.png" alt></p><p>如果列索引不同。可以left_on和right_on指定左边、右边DataFrame的合并列。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas24.png" alt></p><p>另一种写法：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas25.png" alt></p><p>分组:groupby(by)               by:通过什么分组，可以设置多个条件分组</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas26.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas27.png" alt></p><p>聚合：count   计算数量</p><p>sum             求和</p><p>mean        求平均值</p><p>median        求中位数</p><p>std、var      求标准差和方差</p><p>min、max       求最大和最小值</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas28.png" alt></p><h4 id="DataFrame的索引和复合索引："><a href="#DataFrame的索引和复合索引：" class="headerlink" title="DataFrame的索引和复合索引："></a>DataFrame的索引和复合索引：</h4><p>简单的索引操作：</p><p>获取index：df.index</p><p>指定index：df.index=[“”,””]</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas29.png" alt></p><p>同理可得指定columns：df.columns=[“ “,” “]</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas30.png" alt></p><p>重新设置index：df.reindex()</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas31.png" alt></p><p>指定某一列成为index：df.set_index()。drop决定是否保留设定的列</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas32.png" alt></p><p>可以设定多个列成为index：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas33.png" alt></p><p>返回index的唯一值：df.set_index().index.unique()</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas34.png" alt></p><p>时间序列：date_range(start,end,period,freq) 生成一段时间范围。start和end表示范围，periods表示个数，freq表示频率(年、月、天)</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas35.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas37.png" alt></p><p>频率类型：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas36.png" alt></p><p>时间段：PeriodIndex</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas38.png" alt></p><p> 重采样resample：指的是将时间序列从一个频率转化为另一个频率进行处理的过程。将高频率数据转化为低频率数据为降采样。低频率数据转化为高频率为升采样。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/pandas39.png" alt></p><h2 id="判断数据是否为NaN："><a href="#判断数据是否为NaN：" class="headerlink" title="判断数据是否为NaN："></a>判断数据是否为NaN：</h2><p>pd.isnull()  pd.notfull()</p><p>在DataFrame中对缺失数据（NaN）的处理：</p><p>方式1：删除NaN所在的行列dropna(axis,how,inplace):how=”any”时一行(列)里有一个为nan就删。how=”all”时，一行全部为nan时才删。inplace为True，原地修改。False为False，不修改。</p><p>方式2：填充数据，fillna()</p><p>处理为0的数据：t[t==0]=np.nan</p><p>计算平均值时：nan不参与计算，0参与</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    pandas也是一个非常强大的库，所以我也只是总结了我用到的方法。&lt;/p&gt;
&lt;p&gt;pandas常用的数据类型：1、Series  一维 带标签的数组（标签就是索引）2、DataFrame  二维   Series的容器&lt;/p&gt;
&lt;h2 id=&quot;Series：&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="pandas" scheme="http://yoursite.com/categories/python/pandas/"/>
    
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>python知识散记（3）</title>
    <link href="http://yoursite.com/2019/08/07/python%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0%EF%BC%883%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/07/python知识散记（3）/</id>
    <published>2019-08-07T00:20:58.000Z</published>
    <updated>2019-08-07T05:49:14.457Z</updated>
    
    <content type="html"><![CDATA[<p>​    今天的知识散记讲三个器，哪三个器呢？装饰器、迭代器、生成器。还有列表生成式、字典生成式。</p><h2 id="装饰器："><a href="#装饰器：" class="headerlink" title="装饰器："></a>装饰器：</h2><p>python装饰器就是用于拓展原来函数功能的一种函数，这个函数的特殊之处在于它的返回值也是一个函数，使用python装饰器的好处就是在不用更改原函数的代码前提下给函数增加新的功能。 </p><p>使用闭包完成的装饰器原理：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python33.png" alt></p><p>当执行test(test)时，func已经指向test()函数。所以func()相当于test()。这就是装饰器的原理。但是实际不是这样写的，请看下图：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python32.png" alt></p><p>使用装饰器对有参数的函数装饰：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python34.png" alt></p><p>对不定长参数的装饰：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python35.png" alt></p><p>装饰器对有返回值的函数装饰：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python36.png" alt></p><p>带参数的装饰器</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python37.png" alt></p><p>用类做装饰器：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python38.png" alt></p><p>装饰器完了，自己慢慢悟吧。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器只能前进不能后退。使用迭代器不要求事先准备好整个迭代过程中的所有元素。迭代器仅仅在迭代到某个元素时才计算该元素，而在这之前或之后元素可以不存在或者被销毁。因此迭代器适合遍历一些数量巨大甚至无限的序列。</p><p>Python中迭代器的本质上每次调用__next__()方法都返回下一个元素或抛出StopIteration的容器对象</p><p>由于Python中没有“迭代器”这个类，因此具有以下两个特性的类都可以称为“迭代器”类：</p><p>1、有__next__()方法，返回容器的下一个元素或抛出StopIteration异常</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python39.png" alt></p><p>2、有__iter__()方法，返回迭代器本身</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python40.png" alt></p><p>all(iterable)：如果迭代器里面的所有元素都为True时,返回True;否则返回False</p><p>any(iterable）：如果迭代器里面的所有元素为False,返回False;否则返回True.</p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>一个个的生成数据，但占用内存更少，生成器是特殊的迭代器。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python41.png" alt></p><p>当yield存在函数时，函数就变成一个生成器。yield不像return那样返回值，而是每次产生多个值。每次使用yield产生一个值，函数就会被冻结。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python42.png" alt></p><p>用aim.__next__()得出结果：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python43.png" alt></p><p>aim.send()得出结果：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python45.png" alt></p><h2 id="列表生成式和字典推导式："><a href="#列表生成式和字典推导式：" class="headerlink" title="列表生成式和字典推导式："></a>列表生成式和字典推导式：</h2><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python46.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python47.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    今天的知识散记讲三个器，哪三个器呢？装饰器、迭代器、生成器。还有列表生成式、字典生成式。&lt;/p&gt;
&lt;h2 id=&quot;装饰器：&quot;&gt;&lt;a href=&quot;#装饰器：&quot; class=&quot;headerlink&quot; title=&quot;装饰器：&quot;&gt;&lt;/a&gt;装饰器：&lt;/h2&gt;&lt;p&gt;pytho
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="知识散记" scheme="http://yoursite.com/categories/python/%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0/"/>
    
      <category term="知识散记（3）" scheme="http://yoursite.com/categories/python/%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0/%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0%EF%BC%883%EF%BC%89/"/>
    
    
      <category term="python知识散记" scheme="http://yoursite.com/tags/python%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python知识散记（2）</title>
    <link href="http://yoursite.com/2019/08/06/python%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/06/python知识散记（2）/</id>
    <published>2019-08-06T07:32:02.000Z</published>
    <updated>2019-08-07T05:48:57.041Z</updated>
    
    <content type="html"><![CDATA[<p>​    接着上次的知识散记，我们接着看。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>在函数内部定义一个函数，并且这个函数用到了外面的变量。将这个函数以及用到的一些变量称之为闭包。</p><p>当某个函数被当成对象返回时，夹带了外部 变量，就形成了一个闭包。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python13.png" alt></p><h2 id="global："><a href="#global：" class="headerlink" title="global："></a>global：</h2><p>一般多用在函数内，声明变量的作用域为全局作用域。箭头变化的时候加，箭头不变的时候可以不加。（箭头类似指针）</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python14.png" alt></p><h2 id="nonlocal："><a href="#nonlocal：" class="headerlink" title="nonlocal："></a>nonlocal：</h2><p>nonlocal关键字用来在函数或其他作用域中使用外层(非全局)变量</p><h2 id="lambda匿名函数："><a href="#lambda匿名函数：" class="headerlink" title="lambda匿名函数："></a>lambda匿名函数：</h2><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python15.png" alt></p><p>不要看匿名函数蛮简单的，其实还是有点注意事项的。<strong>对默认参数的赋值只会在函数定义的时候绑定一次。x是一个自由变量。在运行的时候绑定，而不是在定义的时候绑定。执行时，x的值是多少就是多少。如果希望匿名函数可以在定义的时候绑定，并保持值不变，则采用下面方法。</strong></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python23.png" alt></p><h2 id="assert-断言"><a href="#assert-断言" class="headerlink" title="assert:断言"></a>assert:断言</h2><p>用来直接让程序崩溃，在程序中置入检查点</p><p>条件后可以添加字符串，用来解释断言</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python16.png" alt></p><h2 id="format"><a href="#format" class="headerlink" title="format:"></a>format:</h2><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python30.png" alt></p><h2 id="对-和-的解释："><a href="#对-和-的解释：" class="headerlink" title="对*和**的解释："></a>对*和**的解释：</h2><p>星号(*)和(**)作为形参的时候是起到“打包”的作用，相反，作为实参的时候是起到“解包”的作用。</p><h6 id="星号-或-作为形参，表示调用可变参数函数："><a href="#星号-或-作为形参，表示调用可变参数函数：" class="headerlink" title="星号(*)或(**)作为形参，表示调用可变参数函数："></a>星号(*)或(**)作为形参，表示调用可变参数函数：</h6><p>通过在形参前加一个星号(*)或两个星号(**)来指定函数可以接收任意数量的实参。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python18.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python29.png" alt></p><p>从两个示例的输出可以看出：当参数形如 *args 时，传递给函数的任意个实参会按位置打包成一个元</p><p>组（tuple）；当参数形如 **args 时，传递给函数的任意个 key = value 实参会被包装进一个字典（dict）。</p><h6 id="星号-和-作为实参时，表示通过解包参数调用函数："><a href="#星号-和-作为实参时，表示通过解包参数调用函数：" class="headerlink" title="星号(**)和(*)作为实参时，表示通过解包参数调用函数："></a>星号(**)和(*)作为实参时，表示通过解包参数调用函数：</h6><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python20.png" alt></p><h2 id="常用内置函数补充："><a href="#常用内置函数补充：" class="headerlink" title="常用内置函数补充："></a>常用内置函数补充：</h2><p>复数可以通过<strong>complex（real，imag）</strong>来指定。conjugete提取共轭复数</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python21.png" alt></p><p><strong>hasattr</strong>：hasattr() 函数用于判断对象是否包含对应的属性。如果对象有该属性返回 True，否则返回 False。</p><h2 id="上下文管理器（context-manager）："><a href="#上下文管理器（context-manager）：" class="headerlink" title="上下文管理器（context manager）："></a>上下文管理器（context manager）：</h2><p>任何实现了__enter__和__exit__方法的对象都可称为上下文管理器</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python24.png" alt></p><p>__enter__():方法返回资源对象，这里就是你将要打开的那个文件对象，__exit__()处理一些清除工作。因为File类实现上下文管理器，现在就可以使用with语句了。</p><p>实现上下文管理器的其他方法：使用contextmanager装饰器</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python25.png" alt></p><h2 id="python的三种修饰符："><a href="#python的三种修饰符：" class="headerlink" title="python的三种修饰符："></a>python的三种修饰符：</h2><p>staticmethod、classmethod 和 property，作用分别是把类中定义的实例方法变成静态方法、类方法和类属性。staticmethod、classmethod具体看python的类和对象。</p><p>注意：</p><ol><li><p>函数先定义，再修饰它；反之会编译器不认识；</p></li><li><p>修饰符“@”后面必须是之前定义的某一个函数；</p></li><li><p>每个函数只能有一个修饰符，大于等于两个则不可以。</p></li></ol><p>property用法:它的作用把方法当作属性来访问（注意getnum和setter的顺序，一定getnum在第一个）</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python27.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    接着上次的知识散记，我们接着看。&lt;/p&gt;
&lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;p&gt;在函数内部定义一个函数，并且这个函数用到了外面的变量。将这个函数以及用到的一些变量
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="知识散记" scheme="http://yoursite.com/categories/python/%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0/"/>
    
      <category term="知识散记（2）" scheme="http://yoursite.com/categories/python/%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0/%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0%EF%BC%882%EF%BC%89/"/>
    
    
      <category term="python知识散记" scheme="http://yoursite.com/tags/python%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python知识散记（1）</title>
    <link href="http://yoursite.com/2019/08/06/python%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/06/python知识散记（1）/</id>
    <published>2019-08-06T06:43:04.000Z</published>
    <updated>2019-08-07T05:48:35.382Z</updated>
    
    <content type="html"><![CDATA[<p>​    今天来讲一下python的一些散装知识，还是蛮多的。所以分了几个部分。今天的部分是最简单的，废话少说。开始吧</p><h2 id="导入模块方法："><a href="#导入模块方法：" class="headerlink" title="导入模块方法："></a>导入模块方法：</h2><p>1、最常见的方式，直接将要导入的模块名称写在后面导入。import xxxx</p><p>2、from .. import .. </p><p>与import类似，只是更明确的要导入的方法或变量。</p><p>3、from modname import *，导入所有的类和公有方法。</p><h2 id="if-name-”-main-“"><a href="#if-name-”-main-“" class="headerlink" title="if __name__==”__main__“:"></a>if __name__==”__main__“:</h2><p>让你写的脚本模块既可以导入到别的模块中用，另外该模块自己也可执行。</p><h2 id="常用的一些内置函数"><a href="#常用的一些内置函数" class="headerlink" title="常用的一些内置函数"></a>常用的一些内置函数</h2><p><strong>callable(object)</strong>：检查对象object是否可调用。如果返回True，object仍然可能调用失败；但如果返回False，调用对象ojbect绝对不会成功。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python1.png" alt></p><p><strong>divmod(a,b)</strong>：以元祖的方式放回a//b以及a%b。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python2.png" alt></p><p><strong>ord(str)</strong>：把对应的字符转成整数.</p><p><strong>chr(integer)</strong>：把整数转化成对应的字母.</p><p><strong>bool(x)</strong>：把一个值转化为布尔值,如果该值为假或者省略返回False,否则返回True</p><p><strong>abs(x)</strong> ：返回一个数的绝对值.该参数可以是整数或浮点数.如果参数是一个复数,则返回其大小</p><p><strong>round(number[, ndigits])</strong>：返回浮点数number保留ndigits位小数后四舍五入的值。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python3.png" alt></p><p><strong>dir([object])</strong>: 没有参数,返回当前局部范围的名单列表。有参数，试图返回该对象的有效的属性列表</p><p><strong>issubclass(class, classinfo)</strong>:返回True如果参数class是classinfo的一个子类，否则返回False。</p><p><strong>isinstance(object, classinfo)</strong>:返回True如果参数object是classinfo的一个实例，否则返回False(适用于继承)。</p><p><strong>zip(*iterables)</strong>:生成一个迭代器，迭代器聚合了从每个可迭代数集里的元素。它的内容只能被消费一次</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python4.png" alt></p><p><strong>map</strong>：第一个参数 function 以参数序列中的每一个元素调用 function函数，返回包含每次 function 函数返回值的新列表。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python6.png" alt></p><p><strong>filter</strong>：filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。应该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python7.png" alt></p><p><strong>enumerate</strong>是一个非常有用的函数，直接看效果。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python26.png" alt></p><p><strong>eval(str [,globals [,locals ]])</strong>：用来计算存储在字符串中的有效python表达式。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python8.png" alt></p><p><strong>exec(object[, globals[, locals]])</strong>， 用来执行存储在字符串或文件中的python语句</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python9.png" alt></p><h2 id="格式化输出格式："><a href="#格式化输出格式：" class="headerlink" title="格式化输出格式："></a>格式化输出格式：</h2><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python10.png" alt></p><h2 id="python语句中一些基本规则和特殊字符："><a href="#python语句中一些基本规则和特殊字符：" class="headerlink" title="python语句中一些基本规则和特殊字符："></a>python语句中一些基本规则和特殊字符：</h2><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python11.png" alt></p><h2 id="python调试："><a href="#python调试：" class="headerlink" title="python调试："></a>python调试：</h2><p>python调试两种方法都有用到pdb模块</p><p>第一种：在代码的目录下，打开cmd，输入python -m 文件名</p><p>h：帮助命令</p><p>第二种：可以在交互界面进行调试</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/python12.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    今天来讲一下python的一些散装知识，还是蛮多的。所以分了几个部分。今天的部分是最简单的，废话少说。开始吧&lt;/p&gt;
&lt;h2 id=&quot;导入模块方法：&quot;&gt;&lt;a href=&quot;#导入模块方法：&quot; class=&quot;headerlink&quot; title=&quot;导入模块方法：&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="知识散记" scheme="http://yoursite.com/categories/python/%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0/"/>
    
      <category term="知识散记（1）" scheme="http://yoursite.com/categories/python/%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0/%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    
    
      <category term="python知识散记" scheme="http://yoursite.com/tags/python%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>协程</title>
    <link href="http://yoursite.com/2019/08/06/python%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/08/06/python中的协程/</id>
    <published>2019-08-06T03:38:42.000Z</published>
    <updated>2019-08-06T03:47:42.984Z</updated>
    
    <content type="html"><![CDATA[<p>​    今天，我们来讲一些协程。协程是python中独有的，在其他语言中是没有这个概念的。协程是利用线程在等待的时候做事情。</p><p>使用yield完成协程：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%8D%8F%E7%A8%8B1.png" alt></p><p>使用greenlet完成协程：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%8D%8F%E7%A8%8B2.png" alt></p><p>使用gevent完成协程：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%8D%8F%E7%A8%8B3.png" alt></p><p>要想用时间模块延迟，则必须打补丁：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%8D%8F%E7%A8%8B4.png" alt></p><p>我还没看完，后面补。未完待续……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    今天，我们来讲一些协程。协程是python中独有的，在其他语言中是没有这个概念的。协程是利用线程在等待的时候做事情。&lt;/p&gt;
&lt;p&gt;使用yield完成协程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Br
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="协程" scheme="http://yoursite.com/categories/python/%E5%8D%8F%E7%A8%8B/"/>
    
    
      <category term="python协程" scheme="http://yoursite.com/tags/python%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python中的进程</title>
    <link href="http://yoursite.com/2019/08/06/python%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/08/06/python中的进程/</id>
    <published>2019-08-06T03:15:37.000Z</published>
    <updated>2019-08-06T03:38:00.114Z</updated>
    
    <content type="html"><![CDATA[<p>多进程：multiprocessing模块</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E8%BF%9B%E7%A8%8B1.png" alt></p><p>os.getpid()获取当前进程的id    os.getppid()获取父进程的id</p><p>大量启动子进程，可以用进程池pool批量创建子进程。可以通过processes改变创建的进程数目。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E8%BF%9B%E7%A8%8B3.png" alt></p><p>apply_async(func[, args=()[, kwds={}[, callback=None]]])该函数用于传递不定参数，非阻塞且支持结果返回进行回调。</p><p>将函数添加到进程池：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E8%BF%9B%E7%A8%8B2.png" alt></p><p>map(func, iterable[, chunksize=None])：Pool类中的map方法，与内置的map函数用法行为基本一致，它会使进程阻塞直到返回结果。 注意，虽然第二个参数是一个迭代器，但在实际使用中，必须在整个队列都就绪后，程序才会运行子进程。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E8%BF%9B%E7%A8%8B4.png" alt></p><p>close()：关闭进程池（pool），使其不在接受新的任务。</p><p>terminate()：结束工作进程，不在处理未处理的任务。</p><p>join([timeout])：主进程阻塞等待子进程的退出，join方法必须在close或terminate之后使用。timeout表示等待最多时间。若超出，则会直接执行下列代码</p><p>Value、Array是通过共享内存的方式共享数据 </p><p>Value：将一个值存放在内存中，</p><p>Array：将多个数据存放在内存中，但要求数据类型一致</p><p>Value:</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E8%BF%9B%E7%A8%8B5.png" alt></p><p>Array:两种情况</p><p>若为数字，表示开辟的共享内存中的空间大小，（Value表示为该空间绑定一个数值）</p><p>若为数组，表示在共享内存中存入数组</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E8%BF%9B%E7%A8%8B6.png" alt></p><p>说明：三个0表示开辟的共享内存容量为3，当再超过3时就会报错。</p><p>Manager（Value、Array、dict、list、Lock、Semaphore等）是通过共享进程的方式共享数据。</p><p>进程间通信：Queue ，Pipe</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E8%BF%9B%E7%A8%8B13.png" alt></p><p>使用方法和队列差不多</p><p>q.get_nowait()：和get()差不多，不用等。 </p><p>Pipe:Pipe可以是单向(half-duplex)，也可以是双向(duplex)。我们通过mutiprocessing.Pipe(duplex=False)创建单向管道 (默认为双向)。一个进程从PIPE一端输入对象，然后被PIPE另一端的进程接收，单向管道只允许管道一端的进程输入，而双向管道则允许从两端输入。</p><p>这里的Pipe是双向的。</p><p>Pipe对象建立的时候，返回一个含有两个元素的表，每个元素代表Pipe的一端(Connection对象)。我们对Pipe的某一端调用send()方法来传送对象，在另一端使用recv()来接收。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E8%BF%9B%E7%A8%8B7.png" alt></p><p><strong>生产者与消费者模式：在两者中找一个缓冲的东西（队列，缓冲池），解决数据生产方和数据处理方数据不分配的问题。</strong></p><p>耦合：谁和谁的关系越强，耦合性就越强。耦合性越强，程序维护越难。</p><p>解耦的好处：哪块不合适，就改那块。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E8%BF%9B%E7%A8%8B8.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E8%BF%9B%E7%A8%8B10.png" alt></p><p>接上面：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E8%BF%9B%E7%A8%8B11.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多进程：multiprocessing模块&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E8%BF%9B%E7%A8%8B1.png&quot; alt&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="进程" scheme="http://yoursite.com/categories/python/%E8%BF%9B%E7%A8%8B/"/>
    
    
      <category term="python进程" scheme="http://yoursite.com/tags/python%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python中的线程</title>
    <link href="http://yoursite.com/2019/08/06/python%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/08/06/python中的线程/</id>
    <published>2019-08-06T02:34:04.000Z</published>
    <updated>2019-08-06T03:08:28.270Z</updated>
    
    <content type="html"><![CDATA[<p>重要的话写在前面：进程间不共享全局变量，线程间共享全局变量。</p><p>同步：按预定的先后次序进行运行                异步：不确定的次序</p><p>对于操作系统来说，一个任务就是一个进程。进程内的子任务成为线程 ，一个进程至少有一个线程</p><p>多任务执行的方式：</p><p>多进程</p><p>多线程</p><p>多进程+多线程</p><p>多线程：Python的标准库提供了两个模块：_thread和threading，_thread是低级模块，threading是高级模块，对_thread进行了封装。绝大多数情况下，我们只需要使用threading这个高级模块。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B1.png" alt></p><p>传入参数为元祖。也就是即使只有一个参数，也要写逗号。</p><p>join():将线程加入到当前线程，并等待其终止</p><p>判断线程是否在运行：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B2.png" alt></p><p>守护线程：将daemon属性设为True，则该线程无法被连接</p><p>daemon属性可以保证主线程结束时可以同时结束子线程或者使主线程等待子线程结束后在结束。故称为守护线程。daemon默认为False，如需修改，必须在调用start()方法启动线程之前进行设置。<strong>不适用与idle的交互模式或脚本模式</strong></p><p>当daemon属性为False时，主线程会检测子线程是否结束，如果子线程还在运行，则主线程会等待他完成后在退出。当daemon属性为True时，子线程没执行的不再执行，主线程直接退出。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B4.png" alt></p><p>通过轮询终止线程：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B5.png" alt></p><p>threading的常用方法：</p><p>​    active_count() 当前活动的 Thread 对象个数</p><p>​    current_thread() 返回当前 Thread 对象</p><p>​    current_thread().name返回当前的Thread对象的名字</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B6.png" alt></p><p>​    get_ident() 返回当前线程</p><p>​    enumerater() 返回当前活动 Thread 对象列表</p><p>​    main_thread() 返回主 Thread 对象</p><p>​    settrace(func) 为所有线程设置一个 trace 函数</p><p>​    setprofile(func) 为所有线程设置一个 profile 函数</p><p>​    stack_size([size]) 返回新创建线程栈大小；或为后续创建的线程设定栈大小为 size</p><p>​    TIMEOUT_MAX Lock.acquire(), RLock.acquire(), Condition.wait() 允许的最大值</p><p>threading 可用对象列表：</p><p>​    Thread 表示执行线程的对象</p><p>​    Lock 锁原语对象</p><p>​    RLock 可重入锁对象，使单一进程再次获得已持有的锁(递归锁)</p><p>Condition： 条件变量对象，使得一个线程等待另一个线程满足特定条件，比如改变状态或某个值</p><p>​    wait(timeout): 线程挂起，直到收到一个notify通知或者超时（可选的，浮点数，单位是秒s）才会被唤醒继续运行。wait()必须在已获得Lock前提下才能调用，否则会触发RuntimeError。</p><p>​    condition = threading.Condition(lock=None)   # 创建Condition对象  参数可以不传</p><p>​    condition.acquire()    # 加锁</p><p>​    condition.release()    # 解锁</p><p>​    condition.wait(timeout=None)                 # 阻塞，直到有调用notify(),或者notify_all()时再触发</p><p>​    condition.wait_for(predicate, timeout=None)  # 阻塞，等待predicate条件为真时执行</p><p>​    condition.notify(n=1)        # 通知n个wait()的线程执行, n默认为1</p><p>​    condition.notify_all()       # 通知所有wait着的线程执行</p><p>​     with condition:              # 支持with语法，不必每次手动调用acquire()/release() </p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B7.png" alt></p><p>Semaphore 为线程间共享的有限资源提供一个”计数器”，如果没有可用资源会被阻塞</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B8.png" alt></p><p>Events：它是由线程设置的信号标志，如果信号标志为真，则其他线程等待直到信号接触。</p><p>Event对象实现了简单的线程通信机制，它提供了设置信号，清除信号，等待等用于实现线程间的通信。</p><p>event = threading.Event() 创建一个event</p><p>1 设置信号</p><p>event.set()</p><p>使用Event的set（）方法可以设置Event对象内部的信号标志为真。Event对象提供了isSet（）方法来判断其内部信号标志的状态。</p><p>当使用event对象的set（）方法后，isSet（）方法返回真</p><p>2 清除信号</p><p>event.clear()</p><p>使用Event对象的clear（）方法可以清除Event对象内部的信号标志，即将其设为假，当使用Event的clear方法后，isSet()方法返回假</p><p>3 等待</p><p>event.wait()</p><p>Event对象wait的方法只有在内部信号为真的时候才会很快的执行并完成返回。当Event对象的内部信号标志为假时，则wait方法一直等待到其为真时才返回。也就是说必须set新号标志为真</p><p>主线程在等事件设置后才继续执行</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B10.png" alt></p><p>event使用示范：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B11.png" alt></p><p>Barrier :创建一个”阻碍”，必须达到指定数量的线程后才可以继续</p><p>每个线程中都调用了wait()方法，在所有（此处设置为3）线程调用wait方法之前是阻塞的。也就是说，只有等到3个线程都执行到了wait方法这句时，所有线程才继续执行。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B12.png" alt></p><p>计算处于alive的Thread对象数量：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B13.png" alt></p><p>多线程避免全局变量的改变：上锁。上锁后执行的代码越少越好。</p><p>互斥锁：Lock是比较低级的同步原语，当被锁定后不属于特定的线程。一个锁有两个状态:Locked和unLocked.刚创建的的Locked处于unlocked状态。如果锁处于unlocked状态，acquire()方法将其修改为Locked并立即返回。如果锁处于locked状态，则阻塞当前线程并等待其他线程释放锁，然后将其修改为locked并立即返回。release()方法用来将锁的状态从locked修改为unlocked并立即返回。如果锁的状态本来就是unlocked，则会抛出异常</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B14.png" alt></p><p>可重入锁Rlock对象也是一种常用的线程同步原语，可被同一个线程acquire()多次。当locked状态时，某现场拥有该锁，当处于unlocked状态时，该锁不属于任何线程。Rlock对象的acquire()/release()调用对可以嵌套，仅当最后一个或者最外层的release执行结束后，锁才会被设置为unlocked状态</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B15.png" alt></p><p>死锁：双方都在等待对方的条件满足</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B16.png" alt></p><p>避免死锁的方法：1、添加超时事件  2、 尽量避免（银行家算法）</p><p>Threadlocal：保存当前线程的专有状态，这个状态对其他线程不可见。</p><p>全局变量local就是一个ThreadLocal对象，每个Thread对它都可以读写student属性，但互不影响。你可以把local看成全局变量，但每个属性如local.student都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，ThreadLocal内部会处理。一个ThreadLocal变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。ThreadLocal解决了参数在一个线程中各个函数之间互相传递的问题。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B17.png" alt></p><p>线程池：threadpool模块或concerrent.futures模块</p><p>threadpool模块比较老旧，不是主流。</p><p>threadpool.ThreadPool(poolsize)：定义一个线程池，创建了poolsize个线程。</p><p>threadpool.makeRequest(开启多线程的函数，函数相关参数，[回调函数])</p><p>putRequest:将所有要运行多线程的请求扔进线程池。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B18.png" alt></p><p>concerrent.futures：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B19.png" alt></p><p>ThreadPoolExecutor构造实例的时候，传入max_workers参数来设置线程池中最多能同时运行的线程数目。</p><p>使用submit函数来提交线程需要执行的任务（函数名和参数）到线程池中，并返回该任务的句柄（类似于文件、画图），注意submit()不是阻塞的，而是立即返回。</p><p>通过submit函数返回的任务句柄，能够使用done()方法判断该任务是否结束。上面的例子可以看出，由于任务有2s的延时，在task1提交后立刻判断，task1还未完成，而在延时4s之后判断，task1就完成了。</p><p>使用cancel()方法可以取消提交的任务，如果任务已经在线程池中运行了，就取消不了。这个例子中，线程池的大小设置为2，任务已经在运行了，所以取消失败。如果改变线程池的大小为1，那么先提交的是task1，task2还在排队等候，这是时候就可以成功取消。</p><p>使用result()方法可以获取任务的返回值。查看内部代码，发现这个方法是阻塞的</p><p>as_completed:一次取出所有任务的结果。as_completed()方法是一个生成器，在没有任务完成的时候，会阻塞，在有某个任务完成的时候，会yield这个任务，就能执行for循环下面的语句，然后继续阻塞住，循环到所有的任务结束。从结果也可以看出，先完成的任务会先通知主线程。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B20.png" alt></p><p>map的作用和submit一样，但略有不同。输出顺序和参数列表的顺序相同</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B21.png" alt></p><p>wait方法接受三个参数，等待的任务序列，超时时间，以及等待条件。等待条件return_when默认为ALL_COMPLTED，表明要等待所有的任务都结束。还可以设为FIRST_COMPLETED，表示第一个任务完成就结束等待。FITST_EXCEPTION(注意要导入)</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B22.png" alt></p><p>通过类创建线程：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BA%BF%E7%A8%8B23.png" alt></p><p>t.start后一定调用run函数，不定义run函数该线程不执行。对其他函数的调用只能在run函数里执行。多线程可以共享全局变量，但当数据量大时，数据会出错（产生资源竞争）。</p><p>线程是真的多，看到最后。迷迷糊糊，有错一定要提醒我。而且很多我还没有用过。后面用到的话，会补充上去的。接下来说最后一个：GIL。何为GIL？</p><p>GIL：全局解释器锁</p><p>单CPU的系统中运行多个进程那样，内存中可以存放多个程序，但任意时刻，只有一个程序在CPU中运行。同样地，虽然Python解释器中可以“运行”多个线程，但在任意时刻，只有一个线程在解释器中运行。</p><p>GIL保证了多线程时只有一个线程被调用。 所以多进程效率比多线程高，但是进程间通信比线程难。</p><p>解决方法：用C语言写关键部分。模块（ctypes）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;重要的话写在前面：进程间不共享全局变量，线程间共享全局变量。&lt;/p&gt;
&lt;p&gt;同步：按预定的先后次序进行运行                异步：不确定的次序&lt;/p&gt;
&lt;p&gt;对于操作系统来说，一个任务就是一个进程。进程内的子任务成为线程 ，一个进程至少有一个线程&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="线程" scheme="http://yoursite.com/categories/python/%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="python线程" scheme="http://yoursite.com/tags/python%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>numpy</title>
    <link href="http://yoursite.com/2019/08/06/numpy/"/>
    <id>http://yoursite.com/2019/08/06/numpy/</id>
    <published>2019-08-06T01:54:18.000Z</published>
    <updated>2019-08-06T02:31:13.537Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近这几年，机器学习和深度学习大火。而这其中的数据计算是非常多，而这得益于python的numpy模块。多提一句：numpy是没有GIL（多线程解释器锁）的。所以，numpy中的计算是非常快的。那什么是GIL呢？请看python的多线程。话不多说，让我们开启今天的数学之旅。PS：numpy很多API，我还没有学完。我只是总结了一部分，后面会补充的。</p><p>通过array生成矩阵：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy1.png" alt></p><p>可以通过dtype设置矩阵数据的类型。astype可以修改数据类型。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy3.png" alt></p><p>还有其他生成矩阵的方式：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy5.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy6.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy7.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy8.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy9.png" alt></p><p>numpy生成随机数：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy10.png" alt></p><p>seed的使用方法：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy11.png" alt></p><p>可以通过reshape修改列表的行数和列数，resize改变数组的尺寸大小。根据reshape传入的参数判断转为哪种数组。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy13.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy14.png" alt></p><p>numpy运算：加、减、乘、除类似。如果两个矩阵形状相同，两个矩阵对应的元素做操作。若两个矩阵形状不相同，其中一个矩阵的维度与另一个矩阵的维度相同，可以在该维度上做操作。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy15.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy.png" alt></p><p>通过axis求每行（列）的元素和或最大、最小值。0代表列，1代表行。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy16.png" alt></p><p>还可以获得最大、最小值：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy17.png" alt></p><p>其他一些计算：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy18.png" alt></p><p>对clip函数的解释：小于5的元素都设为5，大于9的元素都设为9</p><p>flatten：对数组展开为一维数组</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy19.png" alt></p><p>numpy的合并：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy20.png" alt></p><p>numpy的分割：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy21.png" alt></p><p>转置矩阵：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/numpy22.png" alt></p><p>未完待续……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    最近这几年，机器学习和深度学习大火。而这其中的数据计算是非常多，而这得益于python的numpy模块。多提一句：numpy是没有GIL（多线程解释器锁）的。所以，numpy中的计算是非常快的。那什么是GIL呢？请看python的多线程。话不多说，让我们开启今天的
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="数学计算" scheme="http://yoursite.com/categories/python/%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97/"/>
    
      <category term="numpy" scheme="http://yoursite.com/categories/python/%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97/numpy/"/>
    
    
      <category term="python的数学计算模块" scheme="http://yoursite.com/tags/python%E7%9A%84%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="http://yoursite.com/2019/08/06/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/08/06/网络编程/</id>
    <published>2019-08-06T01:00:03.000Z</published>
    <updated>2019-08-06T01:52:11.873Z</updated>
    
    <content type="html"><![CDATA[<p>​    今天，我们来讲一下网络编程。这里面用到一个库：<strong>socket</strong>。网络通信其实就是两个进程之间在编程。先说两个重要的协议：TCP协议 和 UDP协议。TCP协议是传输控制协议，UDP协议是数据传输协议。TCP和UDP的区别：TCP慢但是稳定，因为它经过了三次握手和四次挥手，不会丢失数据。UDP快。</p><p>socket:注意参数是一个tuple，包含地址和端口号。</p><p>在同一个os中，端口不允许相同，即如果某个端口已经被使用了，那么在这个进程释放之前，其他进程都不能使用这个端口。（端口用来区分进程，若相同，不能把数据发送到准确的进程）</p><p>创建Socket时，AF_INET指定使用IPv4协议，如果要用更先进的IPv6，就指定为AF_INET6。SOCK_STREAM指定使用面向流的TCP协议，这样，一个Socket对象就创建成功，但是还没有建立连接。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BD%91%E7%BB%9C1.png" alt></p><p>coding：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BD%91%E7%BB%9C2.png" alt></p><p>主机名可以通过调用socket.gethostname()获得</p><p>接收数据时，调用recv(max)方法，一次最多接收指定的字节数，因此，在一个while循环中反复接收，直到recv()返回空数据，表示接收完毕，退出循环。当我们接收完数据后，调用close()方法关闭Socket，这样，一次完整的网络通信就结束了</p><p>创建TCP连接时，主动发起连接的叫客户端，被动响应连接的叫服务器。 客户端要主动发起TCP连接，必须知道服务器的IP地址和端口号。</p><p>TCP服务端建立步骤：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BD%91%E7%BB%9C3.png" alt></p><p><strong>一般是服务器（接受方）绑定端口，客户端（发送方）不绑定</strong></p><p>UDP不需要调用listen（）方法。可以直接接收数据</p><p>TCP调用listen()方法开始监听端口，将主动套接字（默认）变为被动套接字，传入的参数指定等待连接的最大数量</p><p>TCP服务端：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BD%91%E7%BB%9C4.png" alt></p><p>TCP客户端：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BD%91%E7%BB%9C5.png" alt></p><p>一般send()和recv()用于TCP，sendto()及recvfrom()用于UDP。sendto和recvfrom一般用于UDP协议中,但是如果在TCP中connect函数调用后也可以用。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BD%91%E7%BB%9C6.png" alt></p><p>服务器编程首先要绑定一个端口并监听来自其他客户端的连接。如果某个客户端连接过来了，服务器就与该客户端建立Socket连接，随后的通信就靠这个Socket连接了。</p><p>由于服务器会有大量来自客户端的连接，所以，服务器要能够区分一个Socket连接是和哪个客户端绑定的。一个Socket依赖4项：<strong>服务器地址、服务器端口、客户端地址、客户端端口</strong>来唯一确定一个Socket。但是服务器还需要同时响应多个客户端的请求，所以，每个连接都需要一个新的进程或者新的线程来处理，否则，服务器一次就只能服务一个客户端了。</p><p>然后，我们要绑定监听的地址和端口()。服务器可能有多块网卡，可以绑定到某一块网卡的IP地址上，也可以用<strong>0.0.0.0绑定到所有的网络地址</strong>，还可以用127.0.0.1绑定到本机地址。<strong>127.0.0.1是一个特殊的IP地址，表示本机地址</strong>，如果绑定到这个地址，客户端必须同时在本机运行才能连接，也就是说，外部的计算机无法连接进来。</p><p>端口号需要预先指定。请注意，小于1024的端口号必须要有管理员权限才能绑定：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BD%91%E7%BB%9C7.png" alt></p><p>每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接</p><p>利用多线程和socket进行聊天室的创建（UDP）：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BD%91%E7%BB%9C14.png" alt></p><p>下面这段代码是单进程服务器，配合进程或线程也可以建立多任务服务器（TCP）：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BD%91%E7%BB%9C9.png" alt></p><p>serverSocket：当这个套接字被关闭时，代表不再接收新的客户端连接</p><p>clientSocket：当这个套接字被关闭时，代表不能使用send和recv发收数据。</p><p>当利用线程建立多任务服务器时，clientSocket不能关闭。因为子线程共用数据</p><p>当利用进程建立时，clientSocket能关闭。子进程和父进程完全”一样“（实时拷贝）</p><p>单进程实现多任务：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BD%91%E7%BB%9C10.png" alt></p><p>最后，讲一下单播，多播和广播。</p><p>单播：一对一</p><p>多播：一对多</p><p>广播：一对所有 </p><p>UDP有广播，TCP没有广播</p><p>UDP发送广播数据的条件：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BD%91%E7%BB%9C11.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E7%BD%91%E7%BB%9C12.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    今天，我们来讲一下网络编程。这里面用到一个库：&lt;strong&gt;socket&lt;/strong&gt;。网络通信其实就是两个进程之间在编程。先说两个重要的协议：TCP协议 和 UDP协议。TCP协议是传输控制协议，UDP协议是数据传输协议。TCP和UDP的区别：TCP慢但是
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="网络编程（socket）" scheme="http://yoursite.com/categories/python/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88socket%EF%BC%89/"/>
    
    
      <category term="python的网络编程" scheme="http://yoursite.com/tags/python%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2019/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/05/正则表达式/</id>
    <published>2019-08-05T07:37:42.000Z</published>
    <updated>2019-08-05T12:01:17.619Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式（不能随意添加空格，不然会改变原来含义）：</p><p>元字符(不能匹配自身): . $ ^ ( ) { } [ ] $ + \ | *，</p><p>|：A | B 会匹配 A 或 B 中出现的任何字符。为了能够更加合理的工作，| 的优先级非常低。例如 Fish|C 应该匹配 Fish 或 C，而不是匹配 Fis，然后一个 ‘h’ 或 ‘C’。同样，我们使用 | 来匹配 ‘|’ 字符本身；或者包含在一个字符类中，像这样 [|]。</p><p>^:匹配字符串的起始位置。如果设置了 MULTILINE 标志，就会变成匹配每一行的起始位置。在 MULTILINE 中，每当遇到换行符就会立刻进行匹配。</p><p>$:匹配字符串的结束位置，每当遇到换行符也会离开进行匹配。</p><p>+：用于指定前一个字符匹配一次或多次</p><p><em>：</em>匹配的是零次或多次</p><p>？：指定前一个字符匹配零次或者一次。</p><p>{m，n}(m和n都是十进制整数)：它的含义是前一个字符必须匹配m次到n（包括n次）次之间</p><p>原始字符串来表示正则表达式（就是在字符串前边加上 r）</p><p>\A:只匹配字符串的起始位置。如果没有设置 MULTILINE 标志的时候，\A 和 ^ 的功能是一样的；但如果设置了 MULTILINE 标志，则会有一些不同：\A 还是匹配字符串的起始位置，但 ^ 会对字符串中的每一行都进行匹配。</p><p>\Z:只匹配字符串的结束位置</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%991.png" alt></p><p>\B:另一个零宽断言，与 \b 的含义相反，\B 表示非单词边界的位置。</p><p><strong>零宽断言：</strong></p><p>有些元字符它们不匹配任何字符，只是简单地表示成功或失败，因此这些字符也称之为零宽断言</p><p><strong>前向断言：</strong></p><p>（1）：前向肯定断言：如果当前包含的正则表达式（这里以 … 表示）在当前位置成功匹配，则代表成功，否则失败。一旦该部分正则表达式被匹配引擎尝试过，就不会继续进行匹配了；剩下的模式在此断言开始的地方继续尝试。</p><p>（2）：前向否定断言：这跟前向肯定断言相反（不匹配则表示成功，匹配表示失败）</p><p>假定我们要处理一段html，我们要替换掉相对url，例如<a href="abc.html">text</a> 这个a标签我们要替换成text，而对于<a href="http://outofmemory.cn/code-snippet/" target="_blank" rel="noopener">代码</a> 这样的a标签则要保留不做替换。这个应用场景下</p><p>就需要判断A标签的href属性如果不是以http://开头则匹配，即要做前向否定的断言.</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%992.png" alt></p><p>脱字符：^ ,例如[^  5  ]会匹配任何字符 “5”之外的任何字符</p><p>[ ]他们指定一个字符类用于存放你需要的字符集合。可以单独列出需要匹配字符，也可以两个字符和一个横杆-指定匹配的范围。元字符在方括号中不会触发“特殊功能”，在字符类中，它们只匹配自身。</p><p>反斜杠 \：如果在反斜杠后边紧跟着一个元字符，那么元字符的“特殊功能”也不会被触发。例如你需要匹配符号[ 或 \，你可以在他们前面加上一个反斜杠，以消除他们的特殊功能：\[ ,\\</p><p>注意用小括号括住要重复的内容：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%993.png" alt></p><p>匹配ip（万能版）：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%99.png" alt></p><p>非捕获组和命名组：</p><p>非捕获组的语法是 (?:…)，这个 … 你可以替换为任何正则表达式。</p><p>“捕获”就是匹配的意思啦，普通的子组都是捕获组，因为它们能从字符串中匹配到数据</p><p>命名组：：(?P<name>)。很明显，&lt; &gt; 里边的 name 就是命名组的名字啦，除了使用名字访问，</name></p><p>命名组仍然可以使用数字序号进行访问</p><p>正则表达式使用以下方法修改字符串：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%995.png" alt></p><p><strong>split(***</strong>string<strong>***[,</strong> <strong><em>maxsplit=0**</em></strong>])<em>*：通过正则表达式匹配来分割字符串。如果在 RE 中，你使用了捕获组，那么它们的内容会作为一个列表返回。你可以通过传入一个 *maxsplit</em> 参数来设置分割的数量。如果 <em>maxsplit</em> 的值是非 0，表示至多有 <em>maxsplit</em> 个分割会被处理，剩下的内容作为列表的最后一个元素返回。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%996.png" alt></p><p><strong>.sub(***</strong>replacement<strong>***,</strong> <strong><em>string**</em></strong>[,<em>* <strong><em>count=0**</em></strong>])*<em>返回一个字符串，这个字符串从最左边开始，所有 RE 匹配的地方都替换成 *replacement</em>。如果没有找到任何匹配，那么返回原字符串。可选参数 *count</em> 指定最多替换的次数，必须是一个非负值。默认值是 0，意思是替换所有找到的匹配。下边是使用 sub() 方法的例子，它会将所有的颜色替换成 color：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%997.png" alt></p><p>subn:subn() 方法跟 sub() 方法干同样的事情，但区别是返回值为一个包含有两个元素的元组：一个是替换后的字符串，一个是替换的数目。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%998.png" alt></p><p>匹配方法：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%999.png" alt></p><p>匹配的方法和属性：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%9910.png" alt></p><p>group(N) 返回第N组括号匹配的字符，groups() 返回所有括号匹配的字符，以tuple格式</p><p>match匹配的m：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%9912.png" alt></p><p>findall() 需要在返回前先创建一个列表，而 finditer() 则是将匹配对象作为一个迭代器返回</p><p>利用compile来先编译的方法是模式级别的方法（适用于多次使用该正则表达式），可以针对同一种模式做多次匹配，如下图：另一种是模式对象方法 </p><p>import re import re</p><p>p=re.compile() re.search(“”,””)</p><p>p.search()</p><p>贪婪模式和非贪婪模式：</p><p>贪婪模式是让正则表达式尽可能的匹配符合的内容</p><p>在匹配的字符后面加一个问号，启动非贪婪模式</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%9913.png" alt></p><p>编译标志：编译标志让你可以修改正则表达式的工作方式。在 re模块下，编译标志均有两个名字：完整名和简写</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%9915.png" alt></p><p>ASCII(re.A)</p><p>使得 \w，\W，\b，\B，\s 和 \S 只匹配 ASCII 字符，而不匹配完整的 Unicode 字符。这个标志仅对 Unicode 模式有意义，并忽略字节模式。</p><p>DOTALL(re.S)</p><p>使得 . 可以匹配任何字符，包括换行符。如果不使用这个标志，. 将匹配除了换行符的所有字符。</p><p>IGNORECASE(re.I)</p><p>字符类和文本字符串在匹配的时候不区分大小写。举个例子，正则表达式 [A-Z] 也将会匹配对应的小写字母，像 FishC 可以匹配 FishC，fishc 或 FISHC 等。如果你不设置 LOCALE，则不会考虑语言（区域）设置这方面的大小写问题。</p><p>LOCALE(re.L)</p><p>使得 \w，\W，\b 和 \B 依赖当前的语言（区域）环境，而不是 Unicode 数据库。区域设置是 C 语言的一个功能，主要作用是消除不同语言之间的差异。例如你正在处理的是法文文本，你想使用 \w+ 来匹配单词，但是 \w 只是匹配 [A-Za-z] 中的单词，并不会匹配 ‘é’ 或 ‘&#231;’。如果你的系统正确的设置了法语区域环境，那么 C 语言的函数就会告诉程序 ‘é’ 或 ‘&#231;’ 也应该被认为是一个字符。当编译正则表达式的时候设置了 LOCALE 的标志，\w+ 就可以识别法文了，但速度多少会受到影响。</p><p>MULTILINE(re.M)</p><p>通常 ^ 只匹配字符串的开头，而 $ 则匹配字符串的结尾。当这个标志被设置的时候，^ 不仅匹配字符串的开头，还匹配每一行的行首；&amp; 不仅匹配字符串的结尾，还匹配每一行的行尾。</p><p>VERBOSE(re.X)</p><p>这个标志使你的正则表达式可以写得更好看和更有条理，因为使用了这个标志，空格会被忽略（除了出现在字符类中和使用反斜杠转义的空格）；这个标志同时允许你在正则表达式字符串中使用注释， 符号后边的内容是注释，不会递交给匹配引擎（除了出现在字符类中和使用反斜杠转义的 ）</p><p>正则表达式特殊符号及用法：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%9916.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%9917.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%9919.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%9920.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%9921.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E6%AD%A3%E5%88%9923.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正则表达式（不能随意添加空格，不然会改变原来含义）：&lt;/p&gt;
&lt;p&gt;元字符(不能匹配自身): . $ ^ ( ) { } [ ] $ + \ | *，&lt;/p&gt;
&lt;p&gt;|：A | B 会匹配 A 或 B 中出现的任何字符。为了能够更加合理的工作，| 的优先级非常低。例如 Fi
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/categories/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>读取、写入excel</title>
    <link href="http://yoursite.com/2019/08/05/%E8%AF%BB%E5%8F%96%E3%80%81%E5%86%99%E5%85%A5excel/"/>
    <id>http://yoursite.com/2019/08/05/读取、写入excel/</id>
    <published>2019-08-05T07:26:08.000Z</published>
    <updated>2019-08-05T07:34:34.838Z</updated>
    
    <content type="html"><![CDATA[<p>​    今天我们来讲一下python如何对excel进行 读取和写入操作。</p><p>##xlrd只支持对excel文件个是为xls文件的读取。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/excel.png" alt></p><p>table = data.sheets()[0]                             #通过索引顺序获取</p><p>table = data.sheet_by_index(sheet_index)) #通过索引顺序获取</p><p>table = data.sheet_by_name(sheet_name)#通过名称获取</p><p>name=workbook_r.sheet_names()     #获取文件的所有工作表名字</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/excel1.png" alt></p><p>对行的操作：</p><p>nrows = table.nrows  #获取该sheet中的有效行数</p><p>table.row(rowx)  #返回由该行中所有的单元格对象组成的列表</p><p>table.row_slice(rowx)  #返回由该列中所有的单元格对象组成的列表</p><p>table.row_types(rowx, start_colx=0, end_colx=None)    #返回由该行中所有单元格的数据类型组成的列表</p><p>table.row_values(rowx, start_colx=0, end_colx=None)   #返回由该行中所有单元格的数据组成的列表</p><p>table.row_len(rowx) #返回该列的有效单元格长度</p><p> 对列的操作：</p><p>ncols = table.ncols   #获取列表的有效列数</p><p>table.col(colx, start_rowx=0, end_rowx=None)  #返回由该列中所有的单元格对象组成的列表</p><p>table.col_slice(colx, start_rowx=0, end_rowx=None)  #返回由该列中所有的单元格对象组成的列表</p><p>table.col_types(colx, start_rowx=0, end_rowx=None)    #返回由该列中所有单元格的数据类型组成的列表</p><p>table.col_values(colx, start_rowx=0, end_rowx=None)   #返回由该列中所有单元格的数据组成的列表</p><p>获取单元格内容：</p><p>单元格</p><p>A1= table.cell(0,0).value</p><p>C4=able.cell(2,3).value</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/excel2.png" alt></p><p>使用行列索引</p><p>cell_A1 = table.row(0)[0].value</p><p>cell_A2 = table.col(1)[0].value</p><p>##xlwt只支持对Excel文件格式为xls文件的写入</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/excel3.png" alt></p><p>add_sheet(sheet_name):    添加sheet</p><p>get_sheet(Sheet_name):    选择sheet</p><p>save(file_name):          保存</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    今天我们来讲一下python如何对excel进行 读取和写入操作。&lt;/p&gt;
&lt;p&gt;##xlrd只支持对excel文件个是为xls文件的读取。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Brickexper
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="读取、写入excel" scheme="http://yoursite.com/categories/python/%E8%AF%BB%E5%8F%96%E3%80%81%E5%86%99%E5%85%A5excel/"/>
    
    
      <category term="xlrd、xlwt" scheme="http://yoursite.com/tags/xlrd%E3%80%81xlwt/"/>
    
  </entry>
  
  <entry>
    <title>垃圾回收GC</title>
    <link href="http://yoursite.com/2019/08/05/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6GC/"/>
    <id>http://yoursite.com/2019/08/05/垃圾回收GC/</id>
    <published>2019-08-05T07:11:35.000Z</published>
    <updated>2019-08-05T07:18:42.308Z</updated>
    
    <content type="html"><![CDATA[<p>​    每种语言都有自己的垃圾回收机制。接下来我们来讲一下python的垃圾回收机制。</p><p>小整数对象池：python对小整数的定义为[-5，257)，这些整数对象是提前建立好的，不会被垃圾回收。单个字母也一样，但是当定义两个相同的字符串（没有空格等特殊符号），触发intern机制，引用计数为零，触发垃圾回收。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/GC.png" alt></p><p>引用计数机制的优点：简单、实时性（一旦没有引用，内存就直接释放了）。</p><p>缺点：维护引用计数消耗资源、循环引用</p><p>python以引用计数为主，隔代回收为辅进行垃圾回收</p><p>GC模块（不能重写<strong>del</strong>方法）：</p><p>1、gc.set_debug(flags) 设置gc的debug日志，一般设置为gc.DEBUG_LEAK</p><p>2、gc.collect([generation]) 显式进行垃圾回收，可以输入参数，0代表只检查第一代的对象，1代表检查一，二代的对象，2代表检查一，二，三代的对象，如果不传参数，执行一个full collection，也就是等于传2。 返回不可达（unreachable objects）对象的数目</p><p>3、gc.get_threshold() 获取的gc模块中自动执行垃圾回收的频率</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/GC1.png" alt></p><p>4、gc.set_threshold(threshold0[,threshold1[, threshold2]) 设置自动执行垃圾回收的频率。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/GC2.png" alt></p><p>5、gc.get_count() 获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表</p><p>6、gc.disable() 把gc关闭,gc.enable()打开gc（默认打开）</p><p>7.gc.garbage 存储垃圾</p><p>导致引用计数+1的情况：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/GC3.png" alt></p><p>导致引用计数-1的情况：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/GC5.png" alt></p><p>查看一个对象的引用计数：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/GC6.png" alt></p><p>因为调用函数的时候传入a，所以是2.真正的引用计数=sys.getrefcount()-1</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    每种语言都有自己的垃圾回收机制。接下来我们来讲一下python的垃圾回收机制。&lt;/p&gt;
&lt;p&gt;小整数对象池：python对小整数的定义为[-5，257)，这些整数对象是提前建立好的，不会被垃圾回收。单个字母也一样，但是当定义两个相同的字符串（没有空格等特殊符号），
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="GC" scheme="http://yoursite.com/categories/python/GC/"/>
    
    
      <category term="python的GC" scheme="http://yoursite.com/tags/python%E7%9A%84GC/"/>
    
  </entry>
  
  <entry>
    <title>工厂生产模式</title>
    <link href="http://yoursite.com/2019/08/05/%E5%B7%A5%E5%8E%82%E7%94%9F%E4%BA%A7%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/05/工厂生产模式/</id>
    <published>2019-08-05T06:51:14.000Z</published>
    <updated>2019-08-05T06:59:51.658Z</updated>
    
    <content type="html"><![CDATA[<p>​    今天，我们来讲一下什么是工厂方法模式。工厂方法模式是在基类完成基本框架的搭建，在子类中具体实现方法的实现。工厂模式是一种典型的解耦模式。</p><p>函数或者类之间的关系越强，耦合性越强。代码就越难更新。</p><p>使用函数进行解耦：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/factory1.png" alt></p><p>使用类进行解耦：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/factory2.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    今天，我们来讲一下什么是工厂方法模式。工厂方法模式是在基类完成基本框架的搭建，在子类中具体实现方法的实现。工厂模式是一种典型的解耦模式。&lt;/p&gt;
&lt;p&gt;函数或者类之间的关系越强，耦合性越强。代码就越难更新。&lt;/p&gt;
&lt;p&gt;使用函数进行解耦：&lt;/p&gt;
&lt;p&gt;&lt;img
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="工厂方法模式" scheme="http://yoursite.com/categories/python/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="python生产模式" scheme="http://yoursite.com/tags/python%E7%94%9F%E4%BA%A7%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>类和对象</title>
    <link href="http://yoursite.com/2019/08/05/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2019/08/05/类和对象/</id>
    <published>2019-08-05T04:28:26.000Z</published>
    <updated>2019-08-05T11:43:21.177Z</updated>
    
    <content type="html"><![CDATA[<p>​    众所周知，面向过程是根据业务逻辑从上到下写代码，面向过程：根据业务逻辑从上到下写代码面向对象：将数据与函数绑定到一起，进行封装，这样能更快速的开发程序，减少了重复代码的重写过程。面向对象语言三个基本要素：封装 继承 多态把函数和全局变量和在一起就是封装。而python就属于面向对象的语言。</p><p>类与对象的关系和区别：类是抽象的概念，仅仅代表事物的模板。对象是一个能够看得到，摸得着的具体的实体比如：飞机是对象，飞机图纸是类。</p><p>类由三部分构成:</p><p>类的名称:类名</p><p>类的属性：一组数据</p><p>一个特殊的对象：能够知道这个对象的class.</p><p>类的方法：允许进行的操作</p><p>类的抽象：拥有相同或者类似属性和行为的对象都可以抽象出一个类</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class.png" alt></p><p>python调用__init__方法的作用：初始化对象</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class1.png" alt></p><p>python调用__str__方法：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class3.png" alt></p><p>私有方法：外界不能直接调用</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class4.png" alt></p><p>私有属性：可以添加，可以添加后取值，不可以取值。（以双下划线开头为私有变量，单下划线开头的为保护变量）</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class5.png" alt></p><p>通过内部方法取值：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class6.png" alt></p><p>私有属性无法取值的原因是因为名字重整技术，其实可以通过_类名_属性可以访问：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class7.png" alt></p><p>在这里讲一下私有的原理：这是通过名字重整机制改变的。命名规则：_类名__num（尽量不要用）</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class8.png" alt></p><p>python可以自己调用__del__方法，__del__是该对象被删除后调用的方法，注意：这里的删除是没有引用对象</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class9.png" alt></p><p>完全删除后（没有引用对象）：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class10.png" alt></p><p>测量对象的引用对象：用sys模块的sys.getrefcount，得出结果后减一。</p><p>__new__方法：创建对象</p><p>实例化对象相当于做三件事：</p><p>1.通过__init__来创建对象，然后找了一个变量来接收___init__的返回值。这个返回值表示创建出来的对象引用。</p><p>2.__init__（刚刚创建出来的对象的引用）</p><p>3.返回对象的引用。</p><p><strong>__new__方法 和 <em>\</em>init__方法的区别</strong>:</p><p>1.<em>\</em>init__ 通常用于初始化一个新实例，控制这个初始化的过程，比如添加一些属性， 做一些额外的操作，发生在类实例被创建完以后。它是实例级别的方法。没有返回值。负责初始化</p><p>2._<em>new_</em> 通常用于控制生成一个新实例的过程。它是类级别的方法，参数是cls。负责创建。__init__和<em>\</em>new__方法合起来相当于C++的构造函数。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class11.png" alt></p><p>下面讲一个新的概念：单例      单例是创建了多少个对象都是指向同一片内存。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class12.png" alt></p><p>只初始化一次对象：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class13.png" alt></p><p> 继承：可以少写代码。继承父类的方法和属性</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class14.png" alt></p><p>继承可以多类继承。当子类和父类有什么不同时，可以进行重写（在子类中写一个和父类方法名相同的方法进行不同操作）</p><p>私有方法，私有属性不能被继承，可以被间接调用，如果在子类中实现了一个公有方法调用的方法或属性，那么这个方法是不能调用继承的父类的私有方法和私有属性</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class15.png" alt></p><p>多继承：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class16.png" alt></p><p>当子类中的方法和父类方法名一样时会按照以下顺序去进行执行：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class17.png" alt></p><p>子类调用父类的三种方法：</p><p>父类.方法</p><p>super().<strong>init</strong>(不用传self，传参数)</p><p>super(父类，self).<strong>init</strong>（不传self，参数）可以根据父类指定调用哪一个父类</p><p>多态：在写完方法的时候并不知道调用的是什么方法。真正执行的时候才知道</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class18.png" alt></p><p>接下来的内容也很重要哦：</p><p>类在程序中也属于一个对象，称之为类对象。同过类创建出来的对象称之为实例对象。</p><p>类属性(classmethod)：类对象里的属性</p><p>实例属性：实例对象里的属性</p><p>实例属性和类属性的区别：实例属性和具体的某个实例对象有关系，且一个实例对象和另外一个实例对象是不共享属性的。类属性属于类对象，并且多个实例对象共享同一个类属性。  </p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class19.png" alt></p><p>实例方法和类方法：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class20.png" alt></p><p>静态方法：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class21.png" alt></p><p>实例方法 类方法和静态方法的区别：实例方法和类方法必须传一个参数（实例方法self用来接收对象，类方法cls用于接收类），静态方法不需要参数（可以有）。</p><p>动态添加属性和方法：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class22.png" alt></p><p><strong>slots</strong>可以限制添加属性：这可以告诉解释器这个类的所有实例属性都在这了。可以节省大量内存。每个子类都要定义<strong>slots</strong>属性，因为解释器会忽略继承的<strong>slots</strong>属性。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class23.png" alt></p><p>内建属性：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class24.png" alt></p><p><strong>getattribute</strong>:属性拦截器</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/class25.png" alt></p><p>使用类名调用类属性时，不会经过__getattribute__方法，其他均要调用。（可以用来做日志）</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/clas.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    众所周知，面向过程是根据业务逻辑从上到下写代码，面向过程：根据业务逻辑从上到下写代码面向对象：将数据与函数绑定到一起，进行封装，这样能更快速的开发程序，减少了重复代码的重写过程。面向对象语言三个基本要素：封装 继承 多态把函数和全局变量和在一起就是封装。而pyth
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="类和对象" scheme="http://yoursite.com/categories/python/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="python的类和对象" scheme="http://yoursite.com/tags/python%E7%9A%84%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>python异常</title>
    <link href="http://yoursite.com/2019/08/05/python%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2019/08/05/python异常/</id>
    <published>2019-08-05T01:26:46.000Z</published>
    <updated>2019-08-05T04:26:45.511Z</updated>
    
    <content type="html"><![CDATA[<p>​    今天我们来讲一下python的异常。何为异常？即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。异常时python对象，表示一个错误。当python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。</p><p>##try/except可以用来捕获异常</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%BC%82%E5%B8%B82.png" alt></p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%AE%9C%E6%98%8C.png" alt></p><p>##一个try捕获多个异常：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%BC%82%E5%B8%B83.png" alt></p><p>##一个try对多个except：根据不同的except做不同的操作</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%BC%82%E5%B8%B84.png" alt></p><p>##try-finally语句无论是否发生异常都将执行最后的代码。</p><p>##异常传递</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%BC%82%E5%B8%B85.png" alt></p><p>##raise自定义异常：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%BC%82%E5%B8%B86.png" alt></p><p>##最后是python的标准异常：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%BC%82%E5%B8%B87.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    今天我们来讲一下python的异常。何为异常？即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。异常时python对象，表示一个错误。当python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。&lt;/p&gt;
&lt;p&gt;##try/except可以用
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="异常" scheme="http://yoursite.com/categories/python/%E5%BC%82%E5%B8%B8/"/>
    
    
      <category term="python异常" scheme="http://yoursite.com/tags/python%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>python数据类型</title>
    <link href="http://yoursite.com/2019/08/04/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/08/04/python数据类型/</id>
    <published>2019-08-04T01:04:48.000Z</published>
    <updated>2019-08-05T03:43:51.653Z</updated>
    
    <content type="html"><![CDATA[<p>​    每种编程语言都有属于自己的数据类型。今天，我们就来讲一下python的数据类型——列表，元祖，字典，字符串，堆，集合，队列。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>​    <img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/%E5%88%97%E8%A1%A8.png" alt="列表方法"></p><p>同时还有一些比较常用的方法，类似cmp(比较大小，python3已经找不到。如要使用，可以利用operator模块)，len(list)计算列表元素个数，max(list)求列表中的最大值，min(list)求最小值。下面对上面列表的排序方法(list.sort)进行讲解：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/list.sort.png" alt></p><p>下张图片是对以上方法的coding：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/test.png" alt></p><p>##元祖（tuple）</p><p>元祖不像列表可以改变。<strong>元祖是不可变的</strong>。但可以利用切片灵活使用。</p><h2 id="字典（dict）"><a href="#字典（dict）" class="headerlink" title="字典（dict）"></a>字典（dict）</h2><p>####注意：字典支持常见的集合操作（&amp;等操作）</p><p>字典有多个键与其对应的值构成的键-值对组成。键-值对称为项。每个键和它的值之间用:(冒号)隔开，项之间用,(逗号)隔开。</p><p>len(d)返回d中项(键-值对)的数量</p><p>d[k]返回关联到键k的值</p><p>d[k]=v将值关联到键k上</p><p>del d[k] 删除键为k的项</p><p>k in d 检查d中是否有含有键为k的值</p><p>clear()：清除字典中所有的项</p><p>fromkeys()：使用给定的键建立新的字典，每个键都对应一个默认的值None，也可以设立默认值</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/dict1.png" alt></p><p>get():访问字典项，访问一个不存在的键时，没有异常。且可以定义默认值为None。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/dict2.png" alt></p><p>items和iteritems：</p><p>items将所有的项以列表方式返回，列表中的每一项都表示为（键，值）对的形式。</p><p>iteritems方法的作用大致相同，但是会返回一个迭代器对象而不是列表。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/dict3.png" alt></p><p>keys和iterkeys：</p><p>keys方法将字典中的键以列表形式返回，而iterkeys则返回针对键的迭代器</p><p>values和itervalues：</p><p>values方法以列表的形式返回字典中的值，itervalues返回值的迭代器。与返回键的列表不同的是，返回值的列表中可以包含重复的元素。</p><p>pop：用来获得对应于给定键的值，然后将这个键-值对从字典中移除。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/dict4.png" alt></p><p>popitem：弹出随机的项</p><p>setdefault：获得与给定键相关联的值，能在字典中不含有给定键的情况下设立相应的键值。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/dict5.png" alt></p><p>update：可以利用一个字典项更新另外一个字典</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/dict.png" alt></p><h2 id="堆（heapq）"><a href="#堆（heapq）" class="headerlink" title="堆（heapq）"></a>堆（heapq）</h2><p>使用该数据类型前，我们先导入一个新的模块<strong>heapq</strong></p><p>heappush(heap,x):将x入对</p><p>heapop(heap)：将堆中最小的元素弹出</p><p>heapify(heap)：将heap属性强制应用到任意一个列表</p><p>heapreplace(heap,x)：将堆中最小的元素弹出，同时将x入堆</p><p>nlargest(n,iter)：返回iter中前n大的元素</p><p>nsmallest(n,iter)：返回iter中前n小的元素</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/heapq.png" alt></p><h2 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h2><p>集合可取交集、取并集、取差集、对称差集：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/set.png" alt></p><p>利用set做去重操作：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/20190804102844.png" alt></p><p>集合分为可变集合和不可变集合：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/set1.png" alt></p><h2 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h2><p>在python中，队列时线程间最常用的交换数据形式，<strong>Queue</strong>模块时提供队列操作的模块。</p><p>先进先出（FIFO）：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/lifo.png" alt></p><p>先进后出（LIFO）：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/LIFO.png" alt></p><p>优先级队列：优先级队列put进去一个元祖，（优先级，数据），优先级数字越小，优先级越高。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/queuepng" alt></p><p><strong>注意</strong>：如果有两个元素优先级是一样的，那么在出队的时候是按照先进先出的顺序。</p><p>双端队列：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/queue1.png" alt></p><p>队列的方法：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/queue2.png" alt></p><p>使用put方法往队列中添加元素，需要考虑是否能放下的问题如果放不下了，默认会阻塞(block=True)，阻塞时可以定义超时时间timeout。可以使用block=False设置阻塞时立即报错</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/queue4.png" alt></p><p>使用get()从队列里取数据。如果为空的话，blocking= False 直接报 empty异常。如果blocking = True，就是等一会，timeout必须为 0或正数。None为一直等下去，0为不等，正数n为等待n秒还不能读取，报empty异常。<img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/queue5.png" alt></p><h2 id="字符串（string）"><a href="#字符串（string）" class="headerlink" title="字符串（string）"></a>字符串（string）</h2><p>用+拼接字符串：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/string.png" alt></p><p>将值转换为字符串的机制：</p><p>1、通过str函数，把值转换为合理形式的字符串，以便用户可以理解</p><p>2、通过repr函数创建一个字符串，以合法的python表达式的形式表示值</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/string2.png" alt></p><p>join和split：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/string3.png" alt></p><p>字符串格式化方式：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/string4.png" alt></p><p>capitalize()</p><p>把字符串的第一个字符改为大写</p><p>casefold()</p><p>把整个字符串的所有字符改为小写</p><p>center(width)</p><p>将字符串居中，并使用空格填充至长度 width 的新字符串</p><p>count(sub[, start[, end]])</p><p>返回 sub 在字符串里边出现的次数，start 和 end 参数表示范围，可选。</p><p>encode(encoding=’utf-8’, errors=’strict’)</p><p>以 encoding 指定的编码格式对字符串进行编码。</p><p>startswith(prefix[, start[, end]])</p><p>检查字符串是否以 prefix 开头，是则返回 True，否则返回 False。start 和 end 参数可以指定范围检查，可选。</p><p>endswith(sub[, start[, end]])检查字符串是否以 sub 子字符串结束，如果是返回 True，否则返回 False。start 和 end 参数表示范围，可选。</p><p>startswith和endswith如果需要同时针对多个选项做检查，只需要给startswith和endswith提供包含可能选项的元祖。</p><p>expandtabs([tabsize=8])</p><p>把字符串中的 tab 符号（\t）转换为空格，如不指定参数，默认的空格数是 tabsize=8。</p><p>find(sub[, start[, end]])检测 sub 是否包含在字符串中，如果有则返回索引值，否则返回 -1，start 和 end 参数表示范围，可选。</p><p>maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</p><p>注：两个字符串的长度必须相同，为一一对应的关系。</p><p>translate(table)根据 table 的规则（可以由 str.maketrans(‘a’, ‘b’) 定制）转换字符串中的字符</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/string5.png" alt></p><p>index(sub[, start[, end]])</p><p>跟 find 方法一样，不过如果 sub 不在 string 中会产生一个异常。</p><p>isalnum()</p><p>如果字符串至少有一个字符并且所有字符都是字母或数字则返回 True，否则返回 False。</p><p>isalpha()</p><p>如果字符串至少有一个字符并且所有字符都是字母则返回 True，否则返回 False。</p><p>isdecimal()</p><p>如果字符串只包含十进制数字则返回 True，否则返回 False。</p><p>isdigit()</p><p>如果字符串只包含数字则返回 True，否则返回 False。</p><p>islower()</p><p>如果字符串中至少包含一个区分大小写的字符，并且这些字符都是小写，则返回 True，否则返回 False。</p><p>isnumeric()</p><p>如果字符串中只包含数字字符，则返回 True，否则返回 False。</p><p>isspace()</p><p>如果字符串中只包含空格，则返回 True，否则返回 False。</p><p>istitle()</p><p>如果字符串是标题化（所有的单词都是以大写开始，其余字母均小写），则返回 True，否则返回 False。</p><p>isupper()</p><p>如果字符串中至少包含一个区分大小写的字符，并且这些字符都是大写，则返回 True，否则返回 False。</p><p>join(sub)</p><p>以字符串作为分隔符，插入到 sub 中所有的字符之间。</p><p>ljust(width)</p><p>返回一个左对齐的字符串，并使用空格填充至长度为 width 的新字符串。</p><p>rjust(width)</p><p>返回一个右对齐的字符串，并使用空格填充至长度为 width 的新字符串。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/string6.png" alt></p><p>format也可以完成对齐的任务。“&lt;”：左对齐  “&gt;”：右对齐    “^”：居中对齐</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/string7.png" alt></p><p>lower()</p><p>转换字符串中所有大写字符为小写。</p><p>lstrip()</p><p>去掉字符串左边的所有空格无法去除中间的字符</p><p>rstrip()</p><p>删除字符串末尾的空格。无法去除中间的字符</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/string8.png" alt></p><p>partition(sub)</p><p>找到子字符串 sub，把字符串分成一个 3 元组 (pre_sub, sub, fol_sub)，如果字符串中不包含 sub 则返回 (‘原字符串’, ‘’, ‘’)</p><p>replace(old, new[, count])</p><p>把字符串中的 old 子字符串替换成 new 子字符串，如果 count 指定，则替换不超过 count 次。</p><p>rfind(sub[, start[, end]])</p><p>类似于 find() 方法，不过是从右边开始查找。返回值是下标</p><p>rindex(sub[, start[, end]])</p><p>类似于 index() 方法，不过是从右边开始。</p><p>rpartition(sub)</p><p>类似于 partition() 方法，不过是从右边开始查找。</p><p>split(sep=None, maxsplit=-1)</p><p>不带参数默认是以空格为分隔符切片字符串，如果 maxsplit 参数有设置，则仅分隔 maxsplit 个子字符串，返回切片后的子字符串拼接的列表。</p><p>splitlines(([keepends]))</p><p>在输出结果里是否去掉换行符，默认为 False，不包含换行符；如果为 True，则保留换行符。。</p><p>strip([chars])</p><p>删除字符串前边和后边所有的空格，chars 参数可以定制删除的字符，可选。</p><p>swapcase()</p><p>翻转字符串中的大小写。</p><p>title()</p><p>返回标题化（所有的单词都是以大写开始，其余字母均小写）的字符串。</p><p>upper()</p><p>转换字符串中的所有小写字符为大写。</p><p>zfill(width)</p><p>返回长度为 width 的字符串，原字符串右对齐，前边用 0 填充。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/Figurebed/master/string9.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    每种编程语言都有属于自己的数据类型。今天，我们就来讲一下python的数据类型——列表，元祖，字典，字符串，堆，集合，队列。&lt;/p&gt;
&lt;h2 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="数据类型" scheme="http://yoursite.com/categories/python/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="python数据结构" scheme="http://yoursite.com/tags/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
