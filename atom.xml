<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DY的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-01-25T14:05:40.845Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>湛蓝星空</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信小程序(4)</title>
    <link href="http://yoursite.com/2021/01/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-4/"/>
    <id>http://yoursite.com/2021/01/25/微信小程序-4/</id>
    <published>2021-01-25T11:35:56.000Z</published>
    <updated>2021-01-25T14:05:40.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小程序生命周期"><a href="#小程序生命周期" class="headerlink" title="小程序生命周期"></a>小程序生命周期</h2><p>小程序生命周期分为应用生命周期和页面生命周期</p><h3 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h3><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210125201605.png" alt=""></p><p>下列代码是在首页的js实现的（也就是app.js）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">  <span class="comment">//应用第一次启动的时候就会触发</span></span><br><span class="line">  onLaunch() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"onlaunch"</span>)</span><br><span class="line">    <span class="comment">//配合onPageNotFound函数</span></span><br><span class="line">    <span class="comment">// wx.navigateTo(&#123;</span></span><br><span class="line">    <span class="comment">//   url: '/11/22/33',</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//应用被用户看到，就是切到其它软件后再切回来</span></span><br><span class="line">  <span class="comment">//多数用于对应用的数据或者页面效果重置</span></span><br><span class="line">  onShow()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"onshow"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//应用被隐藏</span></span><br><span class="line">  <span class="comment">//暂停或清楚定时器</span></span><br><span class="line">  onHide()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"onHide"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//应用的代码发生了报错的时候就会触发</span></span><br><span class="line">  <span class="comment">//可以手机用户的错误信息，通过异步请求，将错误信息发送到后台</span></span><br><span class="line">  onError(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"onError"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//页面找不到就触发</span></span><br><span class="line">  <span class="comment">//应用第一次启动的时候，如果找不到第一个入口页面才会触发</span></span><br><span class="line">  <span class="comment">//页面不存在，通过js的方式来重新跳转页面，调到第二个首页。不能调到tabbar页面</span></span><br><span class="line">  onPageNotFound()&#123;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: <span class="string">'pages/demo08/demo08'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//console.log("onPageNotFound")</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210125204551.png" alt=""></p><p><strong>注意：</strong>1、监听页面卸载也就是关闭页面，这也可以通过超链接来演示</p><p>​            2、监听用户下拉动作用于页面的数据或者效果的重新刷新</p><p>​            3、页面上拉触底事件的处理函数需要让页面出现上下滚动才行</p><p>​            4、onPageScroll和页面上拉触底事件不同，onPageScroll只需要页面滚动就可以触发</p><p>​            5、onResize页面的尺寸改变的时候可以触发，小程序发生了横屏竖屏切换的时候也可以触发。我们可以在需要触发这个事件的文件夹的json文件中，加入”pageOrientation”: “auto”，即可开启横屏竖屏切换</p><p>​            6、onTabItemTap必须要求当前页面也是tabbar页面，点击自己的tab item的时候才触发</p><p>​        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;小程序生命周期&quot;&gt;&lt;a href=&quot;#小程序生命周期&quot; class=&quot;headerlink&quot; title=&quot;小程序生命周期&quot;&gt;&lt;/a&gt;小程序生命周期&lt;/h2&gt;&lt;p&gt;小程序生命周期分为应用生命周期和页面生命周期&lt;/p&gt;
&lt;h3 id=&quot;应用生命周期&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="微信小程序" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序(3)</title>
    <link href="http://yoursite.com/2021/01/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-3/"/>
    <id>http://yoursite.com/2021/01/23/微信小程序-3/</id>
    <published>2021-01-23T06:56:18.000Z</published>
    <updated>2021-01-25T11:33:16.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见组件"><a href="#常见组件" class="headerlink" title="常见组件"></a>常见组件</h2><h3 id="view"><a href="#view" class="headerlink" title="view"></a>view</h3><p>代替原来的div标签，另外还有些新增的属性</p><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p>text具有以下特点：1、文本标签 2、只能嵌套text标签 3、只有这个标签可以长按文字复制 4、可以对空格回车进行编码</p><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>1、image组件默认宽度320px、高度240px</p><p>2、支持懒加载</p><h3 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h3><p>轮播图外层容器swiper，每一个轮播项用swiper-item括住。</p><p>swiper标签存在默认样式：widht100%、height150px</p><p>在需要轮播图的页面文件夹的wxml文件下写入代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span><span class="tag">&lt;<span class="name">image</span> <span class="attr">mode</span>=<span class="string">"widthFix"</span> <span class="attr">src</span>=<span class="string">"https://aecpm.alicdn.com/simba/img/TB1XotJXQfb_uJkSnhJSuvdDVXa.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span><span class="tag">&lt;<span class="name">image</span> <span class="attr">mode</span>=<span class="string">"widthFix"</span> <span class="attr">src</span>=<span class="string">"https://aecpm.alicdn.com/simba/img/TB183NQapLM8KJjSZFBSutJHVXa.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span><span class="tag">&lt;<span class="name">image</span> <span class="attr">mode</span>=<span class="string">"widthFix"</span> <span class="attr">src</span>=<span class="string">"https://aecpm.alicdn.com/simba/img/TB1JNHwKFXXXXafXVXXSutbFXXX.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在wxss设定swiper和image样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">swiper</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/* swiper的width*图片高度/图片宽度 */</span></span><br><span class="line">  <span class="attribute">height</span>:<span class="built_in">calc</span>(100vw * 520 /280)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">image</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们就可以向swiper标签添加属性</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210123165239.png" alt=""></p><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><p>导航组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"/pages/lock/lock"</span>&gt;</span>轮播图页面<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>url可以是就绝对也可以是相对的，如果我们是从开发者工具直接复制相对地址，要改变斜杠方向，且要在pages前加/。</p><p>运行不了可能是因为页面中的跳转路径与app.json中配置的tabBar相重复。把PS：我开始也是卡在这，靠弹幕大佬改好的</p><p>学到后面，才知道这个我们也可以直接通过navigator的属性open-type进行修改</p><h3 id="rich-text"><a href="#rich-text" class="headerlink" title="rich-text"></a>rich-text</h3><p>富文本标签，可以将字符串解析成对应标签。</p><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><p>button的属性这部分的内容完全可以靠官方文档学习，不需要记录。我们具体学习button的其他能力。</p><p>button的开发能力：open-type：</p><p>1、contact直接打开客服对话功能，需要真机调试。具体的实现请参考<a href="https://www.bilibili.com/video/BV1nE41117BQ?p=31" target="_blank" rel="noopener">B站</a></p><p>2、转发当前的小程序到微信朋友中，不能把小程序分享到朋友圈</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="keyword">open</span>-<span class="class"><span class="keyword">type</span></span>=<span class="string">"share"</span>&gt;share&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>3、getPhoneNumber获取当前的手机号码信息</p><p>在wxml文件中写入：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="keyword">open</span>-<span class="class"><span class="keyword">type</span></span>=<span class="string">"getPhoneNumber"</span> bindgetphonenumber=<span class="string">"getPhoneNumber"</span>&gt;getPhoneNumber&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>在js中写入获取电话号码的信息：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getPhoneNumber</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">  console.log(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里获取到的信息是已经加密过的，需要用户自己搭建小程序的后台服务器，在后台服务器中进行解析。再返回小程序中</p><p><strong>注意</strong>：不是企业的小程序账号，没有权限获取用户的手机号码。</p><p>4、getUserInfo获取当前用户的个人信息</p><p>在wxml文件中写入：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="keyword">open</span>-<span class="class"><span class="keyword">type</span></span>=<span class="string">"getUserInfo"</span> bindgetuserinfo=<span class="string">"getUserInfo"</span>&gt;getUserInfo&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>在js中写入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getUserInfo</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">  console.log(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、launchApp在小程序当中直接打开app</p><p>？？？刚开始我也是一脸疑惑，为啥要在小程序打开app。而且他这个比较难实现，有需要再学，跳过</p><p>6、openSetting打开小程序内置的授权页面</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="keyword">open</span>-<span class="class"><span class="keyword">type</span></span>=<span class="string">"openSetting"</span>&gt;openSetting&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>7、feedback打开小程序内置的意见反馈页面</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="keyword">open</span>-<span class="class"><span class="keyword">type</span></span>=<span class="string">"feedback"</span>&gt;feedback&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>只能通过真题调试</p><h3 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h3><p>该部分的内容也是可以通过官方文档来完成学习的，并不是特别难</p><h3 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h3><p>单选框标签</p><p>在wxml文件</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">radio-group</span> <span class="attr">bindchange</span>=<span class="string">"handlechange"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">"male"</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">radio-group</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span>你的性别是</span><span class="template-variable">&#123;&#123;gender &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在js文件</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  gender:<span class="string">""</span></span><br><span class="line">&#125;,</span><br><span class="line">handlechange(e)&#123;</span><br><span class="line">  <span class="keyword">let</span> gender=e.detail.<span class="keyword">value</span></span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    gender:gender==<span class="string">"male"</span>?<span class="string">"男"</span>:<span class="string">"女"</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h3><p>复选框标签</p><p>wxml文件</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">checkbox-group</span> <span class="attr">bindchange</span>=<span class="string">"handleItemChange"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;item.value&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">wx:for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;list&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">wx:key</span>=<span class="string">"id"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">checkbox-group</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">    选中的水果</span><span class="template-variable">&#123;&#123;checklist&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">data:</span> &#123;</span><br><span class="line"><span class="symbol">    list:</span>[&#123;</span><br><span class="line"><span class="symbol">      id:</span><span class="number">0</span>,</span><br><span class="line"><span class="symbol">      name:</span><span class="string">"DY"</span>,</span><br><span class="line"><span class="symbol">      value:</span><span class="string">"apple"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line"><span class="symbol">      id:</span><span class="number">1</span>,</span><br><span class="line"><span class="symbol">      name:</span><span class="string">"XJ"</span>,</span><br><span class="line"><span class="symbol">      value:</span><span class="string">"banana"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line"><span class="symbol">      id:</span><span class="number">2</span>,</span><br><span class="line"><span class="symbol">      name:</span><span class="string">"CZ"</span>,</span><br><span class="line"><span class="symbol">      value:</span><span class="string">"orange"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  &#125;,</span><br><span class="line">  handleItemChange(e)&#123;</span><br><span class="line">    const checklist=e.detail.value</span><br><span class="line">    this.setData(&#123;checklist&#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><p>我们可以将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用</p><h3 id="创建自定义组件"><a href="#创建自定义组件" class="headerlink" title="创建自定义组件"></a>创建自定义组件</h3><p>在项目的根目录创建一个新的文件夹conponents，在目录下再创建一个Tabs文件夹，接着在Tabs下右键新建一个conponent文件并将其命名Tabs。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210125101546.png" alt=""></p><p>由此，我们就创建了Tabs组件</p><p>接着我们要使用这个自定义组件</p><p>我们首先打开需要使用自定义组件的文件夹的json文件，其中有个usingCompon，将需要添加的组件名和路径写入</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Tabs"</span>:<span class="string">"../../conponents/Tabs/Tabs"</span></span><br></pre></td></tr></table></figure><p>在当前页面的wxml文件使用一下，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;Tabs&gt;</span><span class="section">&lt;/Tabs&gt;</span></span><br></pre></td></tr></table></figure><p>bingo！！！</p><h3 id="组件优化"><a href="#组件优化" class="headerlink" title="组件优化"></a>组件优化</h3><p>在组件的文件夹的wxml文件中放入</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"tabs"</span>&gt;</span><br><span class="line"> &lt;<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"tabs_title"</span>&gt;</span><br><span class="line">  &lt;!-- &lt;<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"title_item active"</span>&gt;首页&lt;/<span class="keyword">view</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"title_item"</span>&gt;分类&lt;/<span class="keyword">view</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"title_item"</span>&gt;原创&lt;/<span class="keyword">view</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"title_item"</span>&gt;关于&lt;/<span class="keyword">view</span>&gt; --&gt;</span><br><span class="line">  &lt;<span class="keyword">view</span> wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;tabs&#125;&#125;"</span> wx:key=<span class="string">"id"</span> <span class="keyword">class</span>=<span class="string">"title_item &#123;&#123;item.isActive?'active':''&#125;&#125;"</span> bindtap=<span class="string">"handleItemTap"</span>  data-index=<span class="string">"&#123;&#123;index&#125;&#125;"</span>&gt;</span><br><span class="line">  &#123;&#123;item.name&#125;&#125;</span><br><span class="line">  &lt;/<span class="keyword">view</span>&gt;</span><br><span class="line"> &lt;/<span class="keyword">view</span>&gt;</span><br><span class="line">&lt;<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"tabs_content"</span>&gt;内容&lt;/<span class="keyword">view</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">view</span>&gt;</span><br></pre></td></tr></table></figure><p>wxss中写入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tabs</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.tabs_title</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10</span>rpx <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title_item</span>&#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.active</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">5</span>rpx solid currentColor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title_content</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>js文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    tabs:</span><span class="string">[</span></span><br><span class="line">      <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        id:</span><span class="number">0</span><span class="string">,</span></span><br><span class="line"><span class="attr">        name:</span><span class="string">"首页"</span><span class="string">,</span></span><br><span class="line"><span class="attr">        isActive:</span><span class="literal">true</span></span><br><span class="line">      <span class="string">&#125;,</span></span><br><span class="line">      <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        id:</span><span class="number">1</span><span class="string">,</span></span><br><span class="line"><span class="attr">        name:</span><span class="string">"分类"</span><span class="string">,</span></span><br><span class="line"><span class="attr">        isActive:</span><span class="literal">false</span></span><br><span class="line">      <span class="string">&#125;,</span></span><br><span class="line">      <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        id:</span><span class="number">2</span><span class="string">,</span></span><br><span class="line"><span class="attr">        name:</span><span class="string">"原创"</span><span class="string">,</span></span><br><span class="line"><span class="attr">        isActive:</span><span class="literal">false</span></span><br><span class="line">      <span class="string">&#125;,</span></span><br><span class="line">      <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        id:</span><span class="number">3</span><span class="string">,</span></span><br><span class="line"><span class="attr">        name:</span><span class="string">"关于"</span><span class="string">,</span></span><br><span class="line"><span class="attr">        isActive:</span><span class="literal">false</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">]</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line">  <span class="string">/**</span></span><br><span class="line">   <span class="string">*</span> <span class="string">组件的方法列表</span></span><br><span class="line">   <span class="string">*/</span></span><br><span class="line"><span class="attr">  methods:</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">handleItemTap(e)&#123;</span></span><br><span class="line">       <span class="string">const</span> <span class="string">&#123;index&#125;=e.currentTarget.dataset;</span></span><br><span class="line">       <span class="string">let</span> <span class="string">&#123;tabs&#125;=this.data;</span></span><br><span class="line">       <span class="string">tabs.forEach((v,i)=&gt;i===index?v.isActive=true:v.isActive=false);</span></span><br><span class="line">       <span class="string">this.setData(&#123;</span></span><br><span class="line">         <span class="string">tabs&#125;)</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：页面js文件中存放事件回调函数的时候存放在data同层级下，组件js文件中存放事件回调函数的时候必须存在methods中</p><h3 id="父组件向子组件-传递数据"><a href="#父组件向子组件-传递数据" class="headerlink" title="父组件向子组件 传递数据"></a>父组件向子组件 传递数据</h3><p>父组件向子组件传递数据，通过标签属性的方式来传递</p><p>这个部分适用于拥有共同框架的页面，拥有共同框架我们就只需要把属性的值改了。所以，我们不要把用共同框架的属性的值固定，要可以传值改变。引用上面的例子：</p><p>首先我们要在组件文件夹的js文件中把properties修改一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">properties: &#123;</span><br><span class="line"><span class="comment">//要接收的数据的名称</span></span><br><span class="line"> tabs:&#123;</span><br><span class="line"> <span class="comment">//要接收的数据的类型</span></span><br><span class="line">   type:<span class="built_in">Array</span>,</span><br><span class="line"> <span class="comment">//默认值</span></span><br><span class="line">   value:[]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着将组件文件夹中js文件的data剪切到页面的js文件夹中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">tabs:[</span><br><span class="line">  &#123;</span><br><span class="line">    id:<span class="number">0</span>,</span><br><span class="line">    name:<span class="string">"首页"</span>,</span><br><span class="line">    isActive:<span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id:<span class="number">1</span>,</span><br><span class="line">    name:<span class="string">"分类"</span>,</span><br><span class="line">    isActive:<span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id:<span class="number">2</span>,</span><br><span class="line">    name:<span class="string">"原创"</span>,</span><br><span class="line">    isActive:<span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id:<span class="number">3</span>,</span><br><span class="line">    name:<span class="string">"关于"</span>,</span><br><span class="line">    isActive:<span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在页面的wxml文件中</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">tabs</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;tabs&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="子向父传递数据"><a href="#子向父传递数据" class="headerlink" title="子向父传递数据"></a>子向父传递数据</h3><p>你以为上面的例子就是正确的吗？并不是，我们打开AppData查看里面的isAlive，再点击页面，无论点到哪都是第一个isAlive值为true，其他值为false。这好吗？这不好。所以我们要将父向子传递改成子组件向父组件传递数据。</p><p>子向父传递数据需要触发父组件的自定义事件</p><p>在页面的wxml中，将代码改为</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">tabs</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;tabs&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">binditemChange</span>=<span class="string">"handleItemChange"</span> &gt;</span><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在组件的js文件中，绑定自定义事件。将methods改成如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    handleItemTap(e)&#123;</span><br><span class="line">       <span class="keyword">const</span> &#123;index&#125;=e.currentTarget.dataset; </span><br><span class="line">      <span class="comment">//this.triggerEvent("父组件自定义事件的名字",要传递的参数)</span></span><br><span class="line">       <span class="keyword">this</span>.triggerEvent(<span class="string">"itemChange"</span>,&#123;index&#125;)</span><br><span class="line">       <span class="keyword">let</span> &#123;tabs&#125;=<span class="keyword">this</span>.data;</span><br><span class="line">       tabs.forEach(<span class="function">(<span class="params">v,i</span>)=&gt;</span>i===index?v.isActive=<span class="literal">true</span>:v.isActive=<span class="literal">false</span>);</span><br><span class="line">       <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">         tabs&#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在页面的js文件中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> handleItemChange(e)&#123;</span><br><span class="line">   <span class="keyword">const</span> &#123;index&#125;=e.detail;</span><br><span class="line">   <span class="keyword">let</span> &#123;tabs&#125;=<span class="keyword">this</span>.data;</span><br><span class="line">   tabs.forEach(<span class="function">(<span class="params">v,i</span>)=&gt;</span>i===index?v.isActive=<span class="literal">true</span>:v.isActive=<span class="literal">false</span>);</span><br><span class="line">   <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">     tabs&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3><p>打开组件的 wxml，我们可以看到内容是固定的。这也是不好的，我们对他改造一下。使用slot标签。slot标签其实就是一个占位符，等到父组件调用子组件的时候再传递标签过来，最终这些被传递的标签就会替换slot的位置</p><p>首先将组件wxml文件中的内容部分的代码改成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"tabs_content"</span>&gt;</span><br><span class="line">&lt;slot&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br></pre></td></tr></table></figure><p>接着在页面的wxml文件中，将代码改成如下</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">tabs</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;tabs&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">binditemChange</span>=<span class="string">"handleItemChange"</span> &gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;tabs[0].isActive&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:elif</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;tabs[1].isActive&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:elif</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;tabs[2].isActive&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:else</span>&gt;</span>3<span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>其实学习组件的最好方法就是查看官方文档，上述的只是把常用的总结一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常见组件&quot;&gt;&lt;a href=&quot;#常见组件&quot; class=&quot;headerlink&quot; title=&quot;常见组件&quot;&gt;&lt;/a&gt;常见组件&lt;/h2&gt;&lt;h3 id=&quot;view&quot;&gt;&lt;a href=&quot;#view&quot; class=&quot;headerlink&quot; title=&quot;view&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="微信小程序" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序(2)</title>
    <link href="http://yoursite.com/2021/01/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-2/"/>
    <id>http://yoursite.com/2021/01/22/微信小程序-2/</id>
    <published>2021-01-22T08:45:38.000Z</published>
    <updated>2021-01-23T06:55:21.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>WXML时框架设计的一套标签语言，结合基础套件、事件系统，可以构建出页面的结构。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/close/close.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>pages/close/close.wxml<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>1<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>2<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>首先我们随便打开一个页面文件的js文件，为了更好的看数据，我将其中的代码删了，写上下列代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;<span class="attr">data</span>:&#123;</span><br><span class="line">msg:<span class="string">"hello world"</span>,</span><br><span class="line">num:<span class="number">10000</span>,</span><br><span class="line">isGirl:<span class="literal">false</span>,</span><br><span class="line">person:&#123;</span><br><span class="line">  age:<span class="number">18</span>,</span><br><span class="line">  height:<span class="number">180</span>,</span><br><span class="line">  weight:<span class="number">70</span>,</span><br><span class="line">  name:<span class="string">"DY"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>而后，打开该页面文件夹的wxml文件，输入下列代码</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span>pages/close/close.wxml<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;msg&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;num&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>你是富婆吗：</span><span class="template-variable">&#123;&#123;isGirl&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>what is your name: </span><span class="template-variable">&#123;&#123;person.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;isGirl&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>请勾选<span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>text标签相当于web中的span标签，行内元素，不会换行</p><p>view相当于web中的div标签，块级元素，会换行</p><p>checkbox是复选框标签</p><p><strong>注意</strong>：使用bool类型充当属性，字符串和花括号之间一定不要存在空格，否则会导致识别失败。例：</p><checkbox checked="  "></checkbox><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>运算这部分和其它语言是差不多的，就不多说了</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;1+1&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 字符串拼接 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;'1'+'1'&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 三元运算符 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;11%2===0?'偶数':'奇数'&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>列表循环：</p><p>wx:for=”“  wx:for-item=”item”  wx:for-index=”循环项的索引”</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&lt;view&gt;</span></span><br><span class="line">&lt;<span class="keyword">view</span> wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;list&#125;&#125;"</span> wx:<span class="keyword">for</span>-item=<span class="string">"item"</span> wx:<span class="keyword">for</span>-<span class="built_in">index</span>=<span class="string">"index"</span>&gt;</span><br><span class="line">  索引：&#123;&#123;<span class="built_in">index</span>&#125;&#125;</span><br><span class="line">  --</span><br><span class="line">  值：&#123;&#123;item.name&#125;&#125;</span><br><span class="line">&lt;/<span class="keyword">view</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">view</span>&gt;</span><br></pre></td></tr></table></figure><p>除此之外，我们可以添加wx:key=”唯一的值”用来提高列表渲染的性能。如果是上面的例子：则在wx:for-index=”index”后加wx:key=”id”</p><p>wx:key绑定一个普通的字符串的时候，那么这个字符串名称肯定是循环数组中的对象的唯一属性</p><p>wx:key=”*this”就表示数组是一个普通数组，*this表示循环项。</p><p>当有数组的循环嵌套的时候，尤其要注意，以下绑定的名称不要重名：wx:for-item=”item”  wx:for-index=”index”。只有一重循环时，我们可以将其省略</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--对对象的属性和值进行循环 ，此处没有进行wx:key绑定，因为我感觉绑定这些属性都怪怪的，也能运行 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;person&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">wx:for-item</span>=<span class="string">"value"</span> <span class="attr">wx:for-index</span>=<span class="string">"key"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    属性：</span><span class="template-variable">&#123;&#123;key&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    --</span></span><br><span class="line"><span class="xml">    值：</span><span class="template-variable">&#123;&#123;value&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="wx-if"><a href="#wx-if" class="headerlink" title="wx:if"></a>wx:if</h4><p>这部分的知识和其他语言的差不多，只需要注意这里的语法即可</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--第一种 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;true&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>显示<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--第二种 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;flase&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;true&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--第三种 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;flase&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;flase&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="hidden"><a href="#hidden" class="headerlink" title="hidden"></a>hidden</h4><p>有两种方式实现标签的显示或隐藏</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--第一种 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>&gt;</span>hidden<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--第二种，true就隐藏，false显示 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;true&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>hidden<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>当标签不是频繁的切换显示，优先使用wx:if，这是直接把标签从页面结构给移除掉</p><p>当标签频繁的切换显示，优先使用hidden，这是通过添加样式的方式来切换显示。hidden属性不要和样式display一起使用</p><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>首先随便创建一个页面，打开它的js文件，将其中的代码删掉，输入下列代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;<span class="attr">data</span>:&#123;</span><br><span class="line">num:<span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line">handleInput(e)&#123;</span><br><span class="line">  <span class="comment">// console.log(e.detail.value)</span></span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;<span class="attr">num</span>:e.detail.value&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再打开wxml文件，输入以下代码</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">bindinput</span>=<span class="string">"handleInput"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-variable">&#123;&#123;num&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>事件的双向绑定就完成了，这个代码就是输入什么就输出什么。</p><p>加入一个点击事件用bindtap。在js中写入下列代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handletap(e)&#123;</span><br><span class="line">  <span class="keyword">const</span> operation=e.currentTarget.dataset.operation</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    num:<span class="keyword">this</span>.data.num+operation</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在wxml绑定button</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"handletap"</span> <span class="attr">data-operation</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;1&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"handletap"</span> <span class="attr">data-operation</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;-1&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-variable">&#123;&#123;num&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这样就可完成+、-法按钮</p><h2 id="样式wxss"><a href="#样式wxss" class="headerlink" title="样式wxss"></a>样式wxss</h2><p>wxss是一套样式语言，用于描述wxml的组件样式</p><p>与CSS相比，wxss扩展的特性有</p><p>​    响应式长度单位rpx</p><p>​    样式导入</p><h3 id="尺寸单位"><a href="#尺寸单位" class="headerlink" title="尺寸单位"></a>尺寸单位</h3><p>rpx（resopnsive pixel）：可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx</p><p> 在wxss文件中写下以下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">view</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200</span>rpx;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这和之前的CSS是一样的</p><p>在wxml文件上写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>rpx<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如此一来，页面上的显示大小就可以随着页面大小改变</p><p>还有一种写法</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width:calc(<span class="number">750</span>rpx * <span class="number">100</span> / <span class="number">375</span>)</span><br></pre></td></tr></table></figure><h3 id="样式导入"><a href="#样式导入" class="headerlink" title="样式导入"></a>样式导入</h3><p>首先在pages文件夹下创建一个同级目录style，在其中创建一个wxss（common.wxss），向其中写入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">view</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:aqua;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在页面文件夹的wxss中写入以下代码</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"../../style/common.wxss"</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：只支持相对路径</p><p>如果效果没有变化的话，请查看自己的wxml中的标签是否对应wxss中设置的标签</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>wxss不支持通配符选择器</p><p>目前支持的选择器：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210123144605.png" alt=""></p><p>其它选择器和CSS中用法一样，可以自行试试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模板语法&quot;&gt;&lt;a href=&quot;#模板语法&quot; class=&quot;headerlink&quot; title=&quot;模板语法&quot;&gt;&lt;/a&gt;模板语法&lt;/h2&gt;&lt;p&gt;WXML时框架设计的一套标签语言，结合基础套件、事件系统，可以构建出页面的结构。&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="微信小程序" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>初识微信小程序</title>
    <link href="http://yoursite.com/2021/01/22/%E5%88%9D%E8%AF%86%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2021/01/22/初识微信小程序/</id>
    <published>2021-01-22T01:52:37.000Z</published>
    <updated>2021-01-22T08:44:57.647Z</updated>
    
    <content type="html"><![CDATA[<p>小程序我们大家都用过，它是一种不需要下载安装即可使用的</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>这个比较简单，就按着步骤走，就不做说明了</p><h3 id="获取APPID"><a href="#获取APPID" class="headerlink" title="获取APPID"></a>获取APPID</h3><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210122103101.png" alt=""></p><p><strong>注意</strong>：存放起来，不要被其他人看到</p><h3 id="下载开发者工具"><a href="#下载开发者工具" class="headerlink" title="下载开发者工具"></a>下载开发者工具</h3><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210122103550.png" alt=""></p><h2 id="小程序文件结构和传统web对比"><a href="#小程序文件结构和传统web对比" class="headerlink" title="小程序文件结构和传统web对比"></a>小程序文件结构和传统web对比</h2><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210122115816.png" alt=""></p><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210122122036.png" alt=""></p><h2 id="小程序配置文件"><a href="#小程序配置文件" class="headerlink" title="小程序配置文件"></a>小程序配置文件</h2><p>一个小程序应用程序会包括最基本的两种配置文件。一种是全局的app.json和页面自己的page.json</p><p><strong>注意</strong>：配置文件中不能出现注释</p><h3 id="全局配置文件app-json"><a href="#全局配置文件app-json" class="headerlink" title="全局配置文件app.json"></a>全局配置文件app.json</h3><p>app.json是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部tab等。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210122151122.png" alt=""></p><p>字段含义：</p><p>​    pages字段：用于秒数当前小程序所有页面路径</p><p>​    window字段：定义小程序所有页面的顶部背景颜色，文字颜色定义等</p><h4 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h4><p>新增页面</p><p>直接在pages列表中添加pages/demo01/demo01即可，微信开发者工具会自动创建文件夹和其中的配置文件</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210122152037.png" alt=""></p><p>如果我们想一打开就默认显示我们新创建的页面，只需把pages/demo01/demo01放到第一个。即可</p><h4 id="window"><a href="#window" class="headerlink" title="window"></a>window</h4><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210122152905.png" alt=""></p><p>以上四种属性的后三种都是描述导航栏的，我将默认的参数改成如图，得出以下效果</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210122153125.png" alt=""></p><p>红色的框内即为导航栏</p><p><strong>注意</strong>：navigationBarTextStyle只能为黑色或白色</p><p>第一个属性是下拉刷新的颜色</p><p>我们要先将”enablePullDownRefresh”改为true，后把第一个属性的light改为dark，得出以下效果</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210122154147.png" alt=""></p><p>还有一些属性的学习，我们可以翻看官方文档来进行学习</p><h4 id="tabbar"><a href="#tabbar" class="headerlink" title="tabbar"></a>tabbar</h4><p>点击客户端的底部或顶部有tab栏可以切换页面。</p><p>首先我们要在pages字段中添加我们想要的页面</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210122162321.png" alt=""></p><p>最后的效果如此：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210122162505.png" alt=""></p><p>除了这些，还有color（文字颜色），selectedcolor（选中后的文字颜色）等，我们在需要时可以通过开发文档学习</p><h3 id="页面配置page-json"><a href="#页面配置page-json" class="headerlink" title="页面配置page.json"></a>页面配置page.json</h3><p>每一个小程序页面也可以使用.json文件来对本页面的窗口表现进行配置。页面中配置项在当前页面会覆盖app.json的window中相同的配置项</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210122163750.png" alt=""></p><h3 id="sitemap配置文件"><a href="#sitemap配置文件" class="headerlink" title="sitemap配置文件"></a>sitemap配置文件</h3><p>用于配置小程序及其页面是否允许被微信索引。 开发者允许微信索引时，微信会通过爬虫的形式，为小程序的页面内容建立索引。当用户的搜索词条触发该索引时，小程序的页面将可能展示在搜索结果中。  </p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;小程序我们大家都用过，它是一种不需要下载安装即可使用的&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;h3 id=&quot;注册账号&quot;&gt;&lt;a href=&quot;#注册账号&quot; 
      
    
    </summary>
    
      <category term="微信小程序" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>BOM(2)</title>
    <link href="http://yoursite.com/2021/01/21/BOM-2/"/>
    <id>http://yoursite.com/2021/01/21/BOM-2/</id>
    <published>2021-01-21T13:14:08.000Z</published>
    <updated>2021-01-21T13:15:09.570Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="BOM" scheme="http://yoursite.com/categories/JavaScript/BOM/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>BOM(1)</title>
    <link href="http://yoursite.com/2021/01/19/BOM-1/"/>
    <id>http://yoursite.com/2021/01/19/BOM-1/</id>
    <published>2021-01-19T07:30:49.000Z</published>
    <updated>2021-01-21T13:07:09.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是BOM？"><a href="#什么是BOM？" class="headerlink" title="什么是BOM？"></a>什么是BOM？</h2><p>BOM即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window。BOM由一系列相关的对象构成，并且每个对象都提供了很多方法和属性。BOM缺乏标准，Javascript语法的标准组织是ECMA，DOM的标准化组织是w3c。</p><p>window对象是浏览器的顶级对象，它具有双重角色：</p><p>​    1、它是JS访问浏览器窗口的一个接口</p><p>​    2、它是一个全局对象。定义在全局作用域中的变量、函数都会变成window对象的属性和方法。调用的时候可以省略window，如alert()并不用写window（本来应该是window.alert()）</p><h2 id="window对象的常见事件"><a href="#window对象的常见事件" class="headerlink" title="window对象的常见事件"></a>window对象的常见事件</h2><h3 id="窗口加载事件"><a href="#窗口加载事件" class="headerlink" title="窗口加载事件"></a>窗口加载事件</h3><p>当文档内容完全加载完成后会触发该事件（包括图像、脚本文件、CSS文件等），调用处理函数。</p><p>在没有学习BOM之前，我们的函数只能写在控件下面，不然就无法执行。但在用了BOM之后，我们的处理函数可以放在其他地方</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>)</span><br><span class="line">    btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'窗口触发事件'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;button&gt;点击我&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p>有了window.onload就可以把JS代码写到页面元素的上方，因为onload是等页面内容加载完毕后，才执行处理函数。同样这和前面DOM学的onclick一样，只能写一次。如果有多个，会以最后一个为准。用addEventListener就不会有这种困扰</p><p>还有一个DOMContentLoaded，这是仅当DOM加载完成，不包括样式表，图片，flash等等。但只有IE9以上才支持</p><p>这种情况比较适用于图片较多的页面，如果访问的网页图片较多，从用户访问到onload触发可能需要较长的时间，交互效果无法实现，影响用户体验，这时候用DOMContentLoaded事件比较合适。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'只需要把DOM加载完'</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h3><p>只要窗口变化，就会调用处理函数。常常用于处理响应式布局</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">    width: <span class="number">200</span>px;</span><br><span class="line">    height: <span class="number">200</span>px;</span><br><span class="line">    background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        window.addEventListener('load', function() &#123;</span></span><br><span class="line"><span class="regexp">            var div = document.querySelector('div')</span></span><br><span class="line"><span class="regexp">            window.addEventListener('resize', function() &#123;</span></span><br><span class="line"><span class="regexp">                if (window.innerWidth &lt;= 500) &#123;</span></span><br><span class="line"><span class="regexp">                    div.style.display = 'none'</span></span><br><span class="line"><span class="regexp">                &#125; else &#123;</span></span><br><span class="line"><span class="regexp">                    div.style.display = 'block'</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">    &lt;div&gt;窗口变化&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>上面的例子即可让窗口width小于500时，隐藏div。而在width&gt;500，显示div</p><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h3><p>window.setTimeout(调用函数名,[延迟毫秒数])：setTimeout()方法用于设置一个定时器，该定时器在延迟毫秒后执行调用函数，默认是0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'从来就没演好那些很酷的角色'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> timer1=setTimeout(f1, <span class="number">2000</span>)</span><br><span class="line"><span class="comment">//还有一种调用方法</span></span><br><span class="line"><span class="keyword">var</span> timer2=setTimeout(<span class="string">'f1'</span>,<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>一个页面可以有多个定时器，我们最好用名字加以区分</p><p>我们经常上网，在各种千奇百怪的网页上常常出现广告，这些广告在几秒后会自动消失，这也是靠定时器完成的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=<span class="string">'dy.jpg'</span> alt=<span class="string">""</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"ad"</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> ad = <span class="built_in">document</span>.querySelector(<span class="string">".ad"</span>)</span><br><span class="line">    <span class="keyword">var</span> close = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        ad.style.display = <span class="string">'none'</span></span><br><span class="line">    &#125;, <span class="number">5000</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="关闭setTimeout定时器"><a href="#关闭setTimeout定时器" class="headerlink" title="关闭setTimeout定时器"></a>关闭setTimeout定时器</h3><p>使用clearTimeout()关闭定时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;解除炸弹&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var btn = document.querySelector('button')</span></span><br><span class="line"><span class="regexp">    var timer1 = setTimeout(function() &#123;</span></span><br><span class="line"><span class="regexp">        alert('爆炸了')</span></span><br><span class="line"><span class="regexp">    &#125;, 5000)</span></span><br><span class="line"><span class="regexp">    btn.addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="regexp">        clearTimeout(timer1)</span></span><br><span class="line"><span class="regexp">        alert('危机解除')</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h3><p>这个定时器和setTimeout的用法一样，那他们有什么不同？答案是他们的执行过程不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'周杰伦，yyds'</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>setTimeout是延时事件到了，就去调用这个回调函数，只调用一次 就结束这个定时器。而setInterval每隔这个延时时间执行回掉函数一次，会调用很多次</p><h3 id="关闭setInterval"><a href="#关闭setInterval" class="headerlink" title="关闭setInterval()"></a>关闭setInterval()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">'begin'</span>&gt;开启定时器&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button class='end'&gt;停止定时器&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> begin = <span class="built_in">document</span>.querySelector(<span class="string">'.begin'</span>)</span><br><span class="line">      <span class="keyword">var</span> end = <span class="built_in">document</span>.querySelector(<span class="string">'.end'</span>)</span><br><span class="line">      <span class="keyword">var</span> timer = <span class="literal">null</span></span><br><span class="line">      begin.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              alert(<span class="string">"开始计时"</span>)</span><br><span class="line">          &#125;, <span class="number">3000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      end.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          clearInterval(timer)</span><br><span class="line">      &#125;)</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//短信发送案例</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    手机号码：&lt;input type=<span class="string">"number"</span>&gt;</span><br><span class="line">    &lt;button&gt;发送&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var btn = document.querySelector('button')</span></span><br><span class="line"><span class="regexp">        var time = 3</span></span><br><span class="line"><span class="regexp">        btn.addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="regexp">            btn.disabled = true</span></span><br><span class="line"><span class="regexp">            var timer = setInterval(function() &#123;</span></span><br><span class="line"><span class="regexp">                if (time == 0) &#123;</span></span><br><span class="line"><span class="regexp">                    clearInterval(timer)</span></span><br><span class="line"><span class="regexp">                    btn.disabled = false</span></span><br><span class="line"><span class="regexp">                    btn.innerHTML = '发送'</span></span><br><span class="line"><span class="regexp">                    time = 3</span></span><br><span class="line"><span class="regexp">                &#125; else &#123;</span></span><br><span class="line"><span class="regexp">                    btn.innerHTML = '还剩下' + time + '秒'</span></span><br><span class="line"><span class="regexp">                    time--</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;, 1000)</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>this指向问题，一般情况下this的最终指向是哪个调用它的对象</p><h2 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h2><p>JS是单线程的。同步任务都在主线程上执行的，形成一个执行栈。JS的异步是通过回掉函数实现的，一般而言，异步任务有以下三种类型：1、普通事件，如click、resize等 2、资源加载，如load、error 3、定时器。异步任务相关回调函数添加到任务队列（消息队列）中</p><p>所以，JS的执行机制是：1、先执行栈中的同步任务 2、异步任务（回调函数）放入任务队列中 3、一旦执行栈中的所有同步任务执行完毕，系统会 按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">//123</span></span><br></pre></td></tr></table></figure><p>那如果有多个异步任务呢？ </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'click'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;, <span class="number">4000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>上段代码有两种结果：如果在4秒内点击了，结果是12click3，如果在4秒后点击，结果是123click。如果之后还有点击，则会继续输出click。由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，这种机制成为事件循环(event loop)</p><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>window对象给我们提供了一个location属性用于获取或设置窗体的URL，并且可以用于解析URL/因为这个属性返回的是一个对象，所有我们将这个属性也称为location对象</p><h3 id="location属性"><a href="#location属性" class="headerlink" title="location属性"></a>location属性</h3><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210121195153.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;点击&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var btn = document.querySelector('button')</span></span><br><span class="line"><span class="regexp">        btn.addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="regexp">            console.log(location.href)</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/跳转链接</span></span><br><span class="line"><span class="regexp">            location.href = "https:/</span><span class="regexp">/baidu.com"</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动跳转</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="number">5</span></span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer == <span class="number">0</span>) &#123;</span><br><span class="line">            location.href = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            div.innerHTML = <span class="string">'你将在'</span> + timer + <span class="string">'跳转到百度首页'</span></span><br><span class="line">            timer--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f1()</span><br><span class="line">    setInterval(f1, <span class="number">1000</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="location对象方法"><a href="#location对象方法" class="headerlink" title="location对象方法"></a>location对象方法</h3><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210121204550.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;点击&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        btn = document.querySelector('button')</span></span><br><span class="line"><span class="regexp">        btn.addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/记录浏览历史，可以回退</span></span><br><span class="line"><span class="regexp">           location.assign("https:/</span><span class="regexp">/baidu.com")</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>navigator对象包含有关浏览器的信息，最常用的是userAgent，该属性可以返回有客户机发送服务器的user-agent头部的值。</p><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>window对象给我们提供history对象用与浏览器对象进行交互。该对象包含用户访问过的URL</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210121210214.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是BOM？&quot;&gt;&lt;a href=&quot;#什么是BOM？&quot; class=&quot;headerlink&quot; title=&quot;什么是BOM？&quot;&gt;&lt;/a&gt;什么是BOM？&lt;/h2&gt;&lt;p&gt;BOM即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window。B
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="BOM" scheme="http://yoursite.com/categories/JavaScript/BOM/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>DOM(3)</title>
    <link href="http://yoursite.com/2021/01/17/DOM-3/"/>
    <id>http://yoursite.com/2021/01/17/DOM-3/</id>
    <published>2021-01-17T02:15:27.000Z</published>
    <updated>2021-01-19T07:25:05.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高级事件"><a href="#高级事件" class="headerlink" title="高级事件"></a>高级事件</h2><h3 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h3><p>给元素添加事件，成为注册事件或者绑定事件。注册事件有两种方式：传统方式和方法监听注册方式</p><h4 id="传统注册方式"><a href="#传统注册方式" class="headerlink" title="传统注册方式"></a>传统注册方式</h4><p>我们以前学的事件都是传统注册的，即利用on开头的事件。缺点是注册事件的唯一性，也就是说，同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p><h4 id="方法监听注册方式"><a href="#方法监听注册方式" class="headerlink" title="方法监听注册方式"></a>方法监听注册方式</h4><p>使用addEventListen()方法。毫无疑问，这个方法是有兼容性问题的。在IE9之前的IE使用的是attachEvent()。同一个元素同一个事件可以注册多个监听器(监听处理函数)，按注册顺序以此执行</p><p> <img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210117195153.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;越线就不是你要的我&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button&gt;浮现的太热络&lt;/</span>button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    but = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>)</span><br><span class="line">    f2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"第二个函数"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    but.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"第一个函数"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    but.addEventListener(<span class="string">'click'</span>, f2)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>attachEvent事件监听方式，<strong>注意</strong>：IE9以前才支持，其它报错</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210117200314.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">but.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       alert(<span class="string">"IE9以前才支持"</span>)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h3 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h3><p>删除事件也叫解绑事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;<span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;2&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;<span class="number">3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var divs = document.querySelectorAll('div')</span></span><br><span class="line"><span class="regexp">    divs[0].onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">        alert('传统方式解绑')</span></span><br><span class="line"><span class="regexp">        divs[0].onclick = null</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    function fun() &#123;</span></span><br><span class="line"><span class="regexp">        alert('监听方式解绑')</span></span><br><span class="line"><span class="regexp">        divs[1].removeEventListener('click', fun)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    divs[1].addEventListener('click', fun)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    function fn1() &#123;</span></span><br><span class="line"><span class="regexp">        alert('attachEvent方式解绑')</span></span><br><span class="line"><span class="regexp">        divs[2].detachEvent('onclick', fn1)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    divs[2].attachEvent('onclick', fn1)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>事件流描述的是从页面中接收事件的顺序。事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流。DOM事件流分为三个阶段：1、捕获阶段  2、当前目标阶段  3、冒泡阶段</p><p>事件捕获：由DOM最顶层节点开始，然后逐级向下传播到最具体的元素接收过程</p><p>事件冒泡：事件开始时由最具体的元素接收，然后逐级向上传播到DOM最顶层节点的位置</p><p>简单的说：我们向水里丢一块石头，它的下降过程可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程，之后产生泡泡，会在最低点(最具体元素)之后漂浮到水面上，这个过程可以理解为事件冒泡</p><p><strong>注意</strong>：1、JS代码只能执行捕获或者冒泡其中的一个阶段</p><p>​            2、onclick和attachEvent只能得到冒泡阶段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//事件捕获</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">'father'</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">'son'</span>&gt;son盒子&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> sdiv = <span class="built_in">document</span>.getElementById(<span class="string">'son'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'这是子盒子'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//捕获阶段，addEventListener第三个参数为true，处于捕获阶段。document-&gt;html-&gt;body-&gt;father-&gt;son</span></span><br><span class="line">    sdiv.addEventListener(<span class="string">'click'</span>, fn, <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">var</span> fdiv = <span class="built_in">document</span>.getElementById(<span class="string">'father'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'这是父盒子'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fdiv.addEventListener(<span class="string">'click'</span>, fn1, <span class="literal">true</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>冒泡阶段就是把捕获阶段的addEventListener的第三个参数省略或改为false。</p><p><strong>注意</strong>：有些事件是没有冒泡的，比如onblur、onfocus、onmouseenter、onmouseleave</p><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数。事件对象是我们时间的一系列相关数据的集合。事件对象我们可以自己命名。事件对象也有兼容性问题，ie678通过window.event获得事件对象。解决兼容性问题：e=e || window.event</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;<span class="number">123</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.querySelector('div')</span></span><br><span class="line"><span class="regexp">     div.onclick = function(event) &#123;</span></span><br><span class="line"><span class="regexp">            console.log(event)</span></span><br><span class="line"><span class="regexp">        &#125; </span></span><br><span class="line"><span class="regexp">    /</span>* div.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(event)</span><br><span class="line">    &#125;) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p>事件对象的常见属性和方法：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210117215652.png" alt=""></p><h4 id="target和this区别"><a href="#target和this区别" class="headerlink" title="target和this区别"></a>target和this区别</h4><p>e.target返回的是触发事件的对象(元素)，this返回的是绑定事件的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">123</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;456&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var ul = document.querySelector('ul')</span></span><br><span class="line"><span class="regexp">    ul.addEventListener('click', function(e) &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/给ul绑定了对象，那么this指向ul</span></span><br><span class="line"><span class="regexp">        console.log(this)</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/e.target指向我们点击的那个对象</span></span><br><span class="line"><span class="regexp">        console.log(e.target)</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h4 id="返回事件类型"><a href="#返回事件类型" class="headerlink" title="返回事件类型"></a>返回事件类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;<span class="number">123</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;a href="https:/</span><span class="regexp">/www.baidu.com"&gt;百度&lt;/</span>a&gt;</span><br><span class="line">&lt;form action=<span class="string">"https://www.baidu.com"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> name=<span class="string">"sub"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.querySelector('div')</span></span><br><span class="line"><span class="regexp">    div.addEventListener('click', fn) /</span><span class="regexp">/click</span></span><br><span class="line"><span class="regexp">    div.addEventListener('mouseover', fn) /</span><span class="regexp">/mouseover</span></span><br><span class="line"><span class="regexp">    div.addEventListener('mouseout', fn) /</span><span class="regexp">/mouseout</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    function fn(e) &#123;</span></span><br><span class="line"><span class="regexp">        console.log(e.type)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h4 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.querySelector(<span class="string">'a'</span>)</span><br><span class="line">        a.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            e.preventDefault()</span><br><span class="line">        &#125;) </span><br><span class="line"><span class="comment">//传统注册方法</span></span><br><span class="line">a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//普通浏览器</span></span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="comment">//ie678</span></span><br><span class="line">    <span class="comment">//e.returnValue</span></span><br><span class="line">    <span class="comment">//没有兼容性问题，return后面的代码无法执行，只限于传统注册方式</span></span><br><span class="line">    <span class="comment">//return false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">e.stopPropagation()</span><br><span class="line"><span class="comment">//ie678</span></span><br><span class="line">e.cancelBubble=<span class="literal">true</span></span><br><span class="line"><span class="comment">//解决兼容性问题</span></span><br><span class="line"><span class="keyword">if</span>(e &amp;&amp; e.stopPropagation)&#123;</span><br><span class="line">  e.stopPropagation()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.event.cancelBubble=<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>事件委托也叫事件代理或事件委派</p><p>原理：不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;都不会放手&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;都不会放手&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;都不会放手&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;都不会放手&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;都不会放手&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>)</span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</span><br><span class="line">    ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"事件委托的应用"</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; li.length; i++) &#123;</span><br><span class="line">            li[i].style.background = <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">        e.target.style.background = <span class="string">"pink"</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="常用的鼠标事件"><a href="#常用的鼠标事件" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h3><h4 id="禁止鼠标右键菜单"><a href="#禁止鼠标右键菜单" class="headerlink" title="禁止鼠标右键菜单"></a>禁止鼠标右键菜单</h4><p>使用contextmenu</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">睁开双眼做场梦</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'contextmenu'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h4 id="禁止鼠标选中"><a href="#禁止鼠标选中" class="headerlink" title="禁止鼠标选中"></a>禁止鼠标选中</h4><p>在使用了contextmenu之后，我们虽然无法使用鼠标单击右键复制，但我们还是可以选中文字后，ctrl c。接下来的selectstart是让文字无法选中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">睁开双眼做场梦</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'selectstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210119092004.png" alt=""></p><h4 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h4><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210119093418.png" alt=""></p><p>让图片跟着鼠标走</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    img &#123;</span><br><span class="line">        position: absolute</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=<span class="string">"dy.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> pic = <span class="built_in">document</span>.querySelector(<span class="string">'img'</span>)</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> x = e.pageX</span><br><span class="line">        <span class="keyword">var</span> y = e.pageY</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'x坐标'</span> + x, <span class="string">'y坐标'</span> + y)</span><br><span class="line">      <span class="comment">//如果不加减，默认是鼠标左上角，千万不要忘记加单位</span></span><br><span class="line">        pic.style.left = x - <span class="number">266</span> + <span class="string">'px'</span></span><br><span class="line">        pic.style.top = y - <span class="number">150</span> + <span class="string">'px'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="常用事件键盘"><a href="#常用事件键盘" class="headerlink" title="常用事件键盘"></a>常用事件键盘</h3><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210119100010.png" alt=""></p><p>上面这是传统事件的绑定方法，如果要使用addEventListerner，把on去掉即可</p><p>如果三个事件都有绑定，先执行keydown后执行keypress，最后才是keyup</p><h4 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h4><p>keyCode属性可以得到相应键的ASCII码值，而keyup和keydown不区分字母大小写，a和A得到的都是65。keypress才区分字母大小写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e.keyCode)&#125;)</span><br></pre></td></tr></table></figure><p>相信大家都用过京东，京东有个我也是刚知道效果，那就是京东页面，无论你划到第几页，只要你输入s，就会自动定位到搜索框。就是用以下方法实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>)</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.keyCode === <span class="number">83</span>) &#123;</span><br><span class="line">            search.focus()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;高级事件&quot;&gt;&lt;a href=&quot;#高级事件&quot; class=&quot;headerlink&quot; title=&quot;高级事件&quot;&gt;&lt;/a&gt;高级事件&lt;/h2&gt;&lt;h3 id=&quot;注册事件&quot;&gt;&lt;a href=&quot;#注册事件&quot; class=&quot;headerlink&quot; title=&quot;注册事件&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="DOM" scheme="http://yoursite.com/categories/JavaScript/DOM/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>DOM(2)</title>
    <link href="http://yoursite.com/2021/01/15/DOM-2/"/>
    <id>http://yoursite.com/2021/01/15/DOM-2/</id>
    <published>2021-01-15T08:26:27.000Z</published>
    <updated>2021-01-17T02:16:05.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;按钮<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button&gt;按钮2&lt;/</span>button&gt;</span><br><span class="line">&lt;button&gt;按钮<span class="number">3</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button&gt;按钮4&lt;/</span>button&gt;</span><br><span class="line">&lt;button&gt;按钮<span class="number">5</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var btns = document.getElementsByTagName('button')</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/为五个按钮依次绑定</span></span><br><span class="line"><span class="regexp">for (var i = 0; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="regexp">    btns[i].onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/排他思想，在点击之前把全部按钮置为无颜色</span></span><br><span class="line"><span class="regexp">        for (var i = 0; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="regexp">            btns[i].style.backgroundColor = ''</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        this.style.backgroundColor = 'pink'</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><h3 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">'demo'</span> index=<span class="string">'1'</span>&gt;努力都失败了&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    div = document.querySelector('div')</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/第一种方法</span></span><br><span class="line"><span class="regexp">    alert(div.id)</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/第二种方法</span></span><br><span class="line"><span class="regexp">alert(div.getAttribute('id'))</span></span><br><span class="line"><span class="regexp">alert(div.getAttribute('index'))</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p>上面两种方法的区别：第一种方法，element.属性用于获取内置内置属性值；第二种方法，element.getAttribute(‘属性’)用于获得自定义的属性。那还有一个核心问题：自定义属性和内置属性怎么判断？H5规定自定义属性以<strong>data-</strong>开头作为属性名并且赋值，例如：data-index。下面是H5新增的获取自定义属性的方法，只能获取data-开头的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div getTime=<span class="string">"20"</span> data-index=<span class="string">"2"</span> data-list-name=<span class="string">"andy"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>)</span><br><span class="line">  <span class="comment">//dataset是一个所有以data开头的自定义属性的集合</span></span><br><span class="line">  <span class="built_in">console</span>.log(div.dataset)</span><br><span class="line">  alert(div.dataset.index)</span><br><span class="line">  alert(div.dataset[<span class="string">'index'</span>])</span><br><span class="line">  alert(div.dataset.listName)</span><br><span class="line">  alert(div.dataset[<span class="string">'listName'</span>])</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="设置属性值"><a href="#设置属性值" class="headerlink" title="设置属性值"></a>设置属性值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">'demo'</span> index=<span class="string">'1'</span>&gt;努力都失败了&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    div = document.querySelector('div')</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/第一种方法</span></span><br><span class="line"><span class="regexp">    div.id = 'test'</span></span><br><span class="line"><span class="regexp">    alert(div.id)</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/第二种方法</span></span><br><span class="line"><span class="regexp">    div.setAttribute('index', 2)</span></span><br><span class="line"><span class="regexp">    alert(div.getAttribute('index'))</span></span><br><span class="line"><span class="regexp">    div.setAttribute('new', '3')</span></span><br><span class="line"><span class="regexp">    alert(div.getAttribute('new'))</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p>和获得属性值的两种方法一样，设置属性的第一种方法用于修改内置属性，第二种方法针对自定义的属性。除了这点，还有一个区别：在修改class属性上，第一种方法：div.className=’类名’，第二种方法：div.setAttribute(‘class’,’类名’)</p><h3 id="移除属性"><a href="#移除属性" class="headerlink" title="移除属性"></a>移除属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.removeAttribute(<span class="string">'属性名 '</span>)</span><br></pre></td></tr></table></figure><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p>节点操作用于利用节点层级关系获取元素。利用DOM提供的方法getElementById()等逻辑性不强，比较繁琐。所以我们需要利用父子兄弟节点关系获取元素</p><p>一般地，节点至少拥有nodeType(节点类型)、nodeName(节点名称)和nodeValue(节点值)这三个基本属性</p><ul><li><p>元素节点 nodeType为1，节点操作主要操作的是元素节点</p></li><li><p>属性节点 nodeType为2</p></li><li><p>文本节点 nodeType为3，换行、空格也是文本节点</p></li></ul><h3 id="父节点-amp-子节点"><a href="#父节点-amp-子节点" class="headerlink" title="父节点&amp;子节点"></a>父节点&amp;子节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var li = document.querySelector('li')</span></span><br><span class="line"><span class="regexp">    console.log(li.parentNode)</span></span><br><span class="line"><span class="regexp">    var ul = document.querySelector('ul')</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/childNodes所有的子节点，包含元素节点、文本节点等</span></span><br><span class="line"><span class="regexp">    var list = ul.childNodes</span></span><br><span class="line"><span class="regexp">    console.log(list)</span></span><br><span class="line"><span class="regexp">    alert(list[0].nodeType) /</span><span class="regexp">/3</span></span><br><span class="line"><span class="regexp">    alert(list[1].nodeType)/</span><span class="regexp">/1</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p>childNodes得到的是所有的子节点，如果我们只要元素节点。我们要用children，这可以返回所有的子元素节点，其余节点不返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(ul.children)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回第一个子节点，不管是文本节点还是元素节点</span></span><br><span class="line"><span class="built_in">console</span>.log(ul.firstChild)</span><br><span class="line"><span class="comment">//返回最后一个子节点</span></span><br><span class="line"><span class="built_in">console</span>.log(ul.lastChild)</span><br><span class="line"><span class="comment">//返回第一个子元素节点，没有返回null</span></span><br><span class="line"><span class="built_in">console</span>.log(ul.firstElementChild)</span><br><span class="line"><span class="comment">//返回最后一个子元素节点，没有返回null</span></span><br><span class="line"><span class="built_in">console</span>.log(ul.lastElementChild)</span><br></pre></td></tr></table></figure><p>后两种方法有兼容性问题，在实际开发中，我们可以用索引访问children</p><h3 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;我是div&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;span&gt;我是span&lt;/</span>span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>)</span><br><span class="line">    <span class="comment">//下一个兄弟节点，包括元素节点、文本节点</span></span><br><span class="line">    <span class="built_in">console</span>.log(div.nextSibling)</span><br><span class="line"><span class="comment">//上一个兄弟节点</span></span><br><span class="line"><span class="built_in">console</span>.log(div.previousSibling)</span><br><span class="line"> <span class="comment">//下一个兄弟元素节点，没有返回null</span></span><br><span class="line">     <span class="built_in">console</span>.log(div.nextElementSibling)</span><br><span class="line">     <span class="comment">//上一个兄弟元素节点</span></span><br><span class="line">     <span class="built_in">console</span>.log(div.previousElementSibling)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>上面代码的后两种api也是有兼容性问题的，PS：IE，一生之敌。解决办法：只能自己封装一个函数</p><h3 id="创建、添加节点"><a href="#创建、添加节点" class="headerlink" title="创建、添加节点"></a>创建、添加节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        世界它带来过太多的颠簸</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//创建节点</span></span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>)</span><br><span class="line">   <span class="comment">//添加节点</span></span><br><span class="line">    ul.appendChild(li)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>appendchild是将一个节点添加到指定父节点的子节点列表末尾，那如何添加到前面呢？insertBefore</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.insertBefore(child,指定元素)</span><br><span class="line">ul.insertBefore(li, ul.children[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;熊大&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;熊二&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;光头强&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var ul = document.querySelector('ul')</span></span><br><span class="line"><span class="regexp">    var btn = document.querySelector('button')</span></span><br><span class="line"><span class="regexp">    btn.onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">        if (ul.children.length == 0) &#123;</span></span><br><span class="line"><span class="regexp">            this.disabled = true</span></span><br><span class="line"><span class="regexp">        &#125; else &#123;</span></span><br><span class="line"><span class="regexp">            ul.removeChild(ul.children[0])</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h3><p>node.cloneNode()方法返回调用该方法的节点的一个副本。</p><p><strong>注意：</strong>1、如果括号参数为空或者为false，则是浅拷贝，即只复制标签不复制里面的内容</p><p>​           2、如果括号参数为true，则是深拷贝，即复制表情且复制里面的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>)</span><br><span class="line">    <span class="keyword">var</span> lili = ul.children[<span class="number">0</span>].cloneNode()</span><br><span class="line">    <span class="comment">//var lili = ul.children[0].cloneNode(true)</span></span><br><span class="line">    ul.appendChild(lili)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;排他思想&quot;&gt;&lt;a href=&quot;#排他思想&quot; class=&quot;headerlink&quot; title=&quot;排他思想&quot;&gt;&lt;/a&gt;排他思想&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="DOM" scheme="http://yoursite.com/categories/JavaScript/DOM/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>python中的yield用法</title>
    <link href="http://yoursite.com/2021/01/13/python%E4%B8%AD%E7%9A%84yield%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2021/01/13/python中的yield用法/</id>
    <published>2021-01-13T11:40:54.000Z</published>
    <updated>2021-01-13T12:18:36.942Z</updated>
    
    <content type="html"><![CDATA[<p>在学习yield前，我们先来复习return的作用。return就是在程序中返回某个值，之后的语句不再往下执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"starting..."</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line">        print(<span class="string">"res:"</span>,res)</span><br><span class="line">g = foo()</span><br><span class="line">print(next(g))</span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">20</span>)</span><br><span class="line">print(next(g))</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">starting...</span><br><span class="line">4</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line">res: None</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>代码解释：</p><p>1、因为foo函数中有yield关键字，所以foo函数并不会真正的执行。而是得到一个生成器</p><p>2、接着调用next方法，foo函数正式开始执行，先print在执行while循环里的代码/</p><p>3、 程序遇到yield关键字，然后把yield想像成return,return了一个4之后，程序停止，<strong>并没有执行赋值给res操作</strong>，此时next(g)语句执行完成，所以输出的前两行（第一个是while上面的print的结果,第二个是return出的结果）是执行第一个print(next(g))的结果</p><p>4、print 20个*</p><p>5、执行第二个print(next(g))，这个时候是从第一个next停止的地方开始执行的，也就是res的赋值操作。 这时候要注意，这个时候赋值操作的右边是没有值的（因为刚才那个是return出去了，并没有给赋值操作的左边传参数），所以这个时候res赋值是None，所以接着下面的输出就是res:None。</p><p>6、程序继续在while循环中执行，又碰到yield，同样返回4，然后程序停止。如果还有下一个next(g)，还会像上述一样执行。</p><p> <strong>到这里你可能就明白yield和return的关系和区别了，带yield的函数是一个生成器，而不是一个函数了，这个生成器有一个函数就是next函数，next就相当于“下一步”生成哪个数，这一次的next开始的地方是接着上一次的next停止的地方执行的，所以调用next的时候，生成器并不会从foo函数的开始执行，只是接着上一步停止的地方开始，然后遇到yield后，return出要生成的数，此步就结束。</strong> </p><p>还有个常用的生成器函数send。send函数中是包含next函数的，也就是说，调用send函数也会调用next函数</p><p>send是发送一个参数给res的，因为上面讲到，return的时候，并没有把4赋值给res，下次执行的时候继续执行赋值操作时，只好赋值为None了，而如果用send的话，开始执行的时候，先接着上一次（return 4之后）执行，先把7赋值给了res,然后执行next的作用，遇见下一回的yield，return出结果后结束。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"starting..."</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line">        print(<span class="string">"res:"</span>,res)</span><br><span class="line">g = foo()</span><br><span class="line">print(next(g))</span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">20</span>)</span><br><span class="line">print(g.send(<span class="number">7</span>))</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">starting...</span><br><span class="line">4</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line">res: 7</span><br><span class="line">4</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习yield前，我们先来复习return的作用。return就是在程序中返回某个值，之后的语句不再往下执行。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="知识散记" scheme="http://yoursite.com/categories/python/%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0/"/>
    
    
      <category term="python知识散记" scheme="http://yoursite.com/tags/python%E7%9F%A5%E8%AF%86%E6%95%A3%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>DOM(1)</title>
    <link href="http://yoursite.com/2021/01/13/DOM-1/"/>
    <id>http://yoursite.com/2021/01/13/DOM-1/</id>
    <published>2021-01-13T08:26:27.000Z</published>
    <updated>2021-01-15T12:11:16.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h2><p>文档对象模型简称DOM，是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过这些DOM接口可以改变网页的内容、结构和样式</p><p>DOM树</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210114142218.png" alt=""></p><p>文档：一个页面就是一个文档，DOM中使用document表示</p><p>元素：页面中的所有标签都是元素，DOM中使用element表示</p><p>节点：网页中的所有内容都是节点(标签、属性、文本、注释等)，DOM中使用node表示</p><p><strong>注意</strong>：DOM把以上内容都看作是对象，也就意味着，上面的内容都有属性和方法</p><h2 id="DOM的用法"><a href="#DOM的用法" class="headerlink" title="DOM的用法"></a>DOM的用法</h2><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><h4 id="根据ID获取"><a href="#根据ID获取" class="headerlink" title="根据ID获取"></a>根据ID获取</h4><p>使用getElementById(字符串)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"time"</span>&gt;<span class="number">2021</span><span class="number">-1</span><span class="number">-14</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var timer = document.getElementById('time')</span></span><br><span class="line"><span class="regexp">    console.log(timer)/</span><span class="regexp">/&lt;div id="time"&gt;2021-1-14&lt;/</span>div&gt;，没有这个标签会返回<span class="literal">null</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="根据标签名获取"><a href="#根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h4><p>使用getElentmentByTagName方法返回带有指定标签名的对象的集合，以伪数组的形式存储。这就说明我们访问它只需通过索引，如果是访问全部，则通过遍历访问。<strong>注意</strong>：如果没有这个元素，返回的是空的伪数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="number">2021</span><span class="number">-1</span><span class="number">-14</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;2021-1-14&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;<span class="number">2021</span><span class="number">-1</span><span class="number">-14</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;2021-1-14&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;<span class="number">2021</span><span class="number">-1</span><span class="number">-14</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var timer = document.getElementsByTagName('div')</span></span><br><span class="line"><span class="regexp">console.log(timer[1])</span></span><br><span class="line"><span class="regexp">for(var i=0;i&lt;timer.length;i++)&#123;</span></span><br><span class="line"><span class="regexp">  console.log(timer[i])</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>还可以获取某个元素(父元素)内部所有指定标签名的子元素。找出下面第一个ol标签的li标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;你在我心里打了死结&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;你在我心里打了死结&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;你在我心里打了死结&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;你在我心里打了死结&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;ol&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;找不到你的我，已失去一切&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;找不到你的我，已失去一切&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;找不到你的我，已失去一切&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;找不到你的我，已失去一切&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>ol&gt;</span><br><span class="line">&lt;ol id=<span class="string">'ol1'</span>&gt;<span class="comment">//第二个ol标签的id设为ol1</span></span><br><span class="line">    &lt;li&gt;找不到你的我&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;找不到你的我&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;找不到你的我&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;找不到你的我&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var ol = document.getElementsByTagName('ol')</span></span><br><span class="line"><span class="regexp">    console.log(ol[1].getElementsByTagName('li')[1])</span></span><br><span class="line"><span class="regexp">var ol1=document.getElementsById('ol1')/</span><span class="regexp">/也可以通过通过名字访问父节点</span></span><br><span class="line"><span class="regexp">    console.log(ol1.getElementsByTagName('li')[1])</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>父元素必须是单个对象（必须指明是哪一个元素对象）获取的时候不包括父元素自己</p><h4 id="通过html5新增的方法获取"><a href="#通过html5新增的方法获取" class="headerlink" title="通过html5新增的方法获取"></a>通过html5新增的方法获取</h4><h5 id="getElementByClassName"><a href="#getElementByClassName" class="headerlink" title="getElementByClassName"></a>getElementByClassName</h5><p>根据类名返回元素对象集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span>&gt;盒子<span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="box"&gt;盒子2&lt;/</span>div&gt;</span><br><span class="line">&lt;div id=<span class="string">"nav"</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;首页&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;产品&lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> boxs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(boxs)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h5><p>根据指定选择器返回第一个元素对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boxs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(boxs)</span><br><span class="line"><span class="keyword">var</span> firstBox = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>)<span class="comment">//切记，里面的选择器需要加符号，类加.，id加#</span></span><br><span class="line"><span class="built_in">console</span>.log(firstBox)</span><br><span class="line"><span class="keyword">var</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">'#nav'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nav)</span><br><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.querySelector(<span class="string">'li'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(li)</span><br></pre></td></tr></table></figure><h5 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h5><p>返回指定选择器的所有元素对象集合</p><h4 id="特殊元素获取"><a href="#特殊元素获取" class="headerlink" title="特殊元素获取"></a>特殊元素获取</h4><h5 id="获取body元素"><a href="#获取body元素" class="headerlink" title="获取body元素"></a>获取body元素</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">body=<span class="built_in">document</span>.body</span><br><span class="line"><span class="built_in">console</span>.log(body)</span><br></pre></td></tr></table></figure><h5 id="获取html元素"><a href="#获取html元素" class="headerlink" title="获取html元素"></a>获取html元素</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">html=<span class="built_in">document</span>.documentElement</span><br><span class="line"><span class="built_in">console</span>.log(html)</span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件简单理解是触发——响应机制，网页中的每个元素都可以产生某些可以出发javascript的事件。例如：我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作。</p><p>事件由三部分组成：事件源、事件类型、事件处理程序。</p><p>事件源：事件被触发的对象</p><p>事件类型：如何触发。比如鼠标点击or鼠标经过or键盘输入</p><p>事件处理程序：通过函数赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;唐伯虎&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;123&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">'点秋香'</span>) <span class="comment">//函数赋值方式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>)</span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">'我被点击了'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见的鼠标事件</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210114163249.png" alt=""></p><h3 id="改变元素内容"><a href="#改变元素内容" class="headerlink" title="改变元素内容"></a>改变元素内容</h3><h4 id="innerText"><a href="#innerText" class="headerlink" title="innerText"></a>innerText</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要添加事件</span></span><br><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;显示时间&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;123456&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span></span><br><span class="line">        <span class="keyword">var</span> year = date.getFullYear()</span><br><span class="line">        <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> dates = date.getDate()</span><br><span class="line">        <span class="keyword">var</span> arr = [<span class="string">'星期日'</span>, <span class="string">'星期一'</span>, <span class="string">'星期二'</span>, <span class="string">'星期三'</span>, <span class="string">'星期四'</span>, <span class="string">'星期五'</span>, <span class="string">'星期六'</span>]</span><br><span class="line">        <span class="keyword">var</span> day = date.getDay()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'今天是'</span> + year + <span class="string">'年'</span> + month + <span class="string">'月'</span> + dates + <span class="string">'日'</span> + arr[day]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>)</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>)</span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        div.innerText = getDate() <span class="comment">//可以配合date一起使用返回当前时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不需要添加事件</span></span><br><span class="line"><span class="keyword">var</span> p=<span class="built_in">document</span>.querySelector(<span class="string">'p'</span>)</span><br><span class="line">p.innertext=getDate()</span><br></pre></td></tr></table></figure><h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>innerHTML也能完成innerText的功能。那他们有什么区别呢？innerText从起始位置到终止位置的内容，去除html标签，空格和换行去掉。而innerHTML也是从起始位置到终止位置的内容，包括html标签，同时包含空格和换行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="number">123456</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.querySelector('div')</span></span><br><span class="line"><span class="regexp">    div.innerHTML = '&lt;strong&gt;今天是&lt;/</span>strong&gt;<span class="number">2021</span> <span class="number">1.24</span><span class="string">'//如果是innerText，strong无法识别，原样输出</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="获取元素里面的内容"><a href="#获取元素里面的内容" class="headerlink" title="获取元素里面的内容"></a>获取元素里面的内容</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="number">123456</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;</span></span><br><span class="line"><span class="regexp">    我是文字</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;123&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var p = document.querySelector('p')</span></span><br><span class="line"><span class="regexp">    console.log(p.innerText)/</span><span class="regexp">/我是文字 123      去掉空格和换行  </span></span><br><span class="line"><span class="regexp">    console.log(p.innerHTML)/</span><span class="regexp">/我是文字          包含空格和换行</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/&lt;span&gt;123&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用元素的属性操作"><a href="#常用元素的属性操作" class="headerlink" title="常用元素的属性操作"></a>常用元素的属性操作</h3><h4 id="src"><a href="#src" class="headerlink" title="src"></a>src</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">'dy'</span>&gt;风景<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button id='dh'&gt;风景2&lt;/</span>button&gt;</span><br><span class="line">&lt;img src=<span class="string">"dy.jpg"</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> dy = <span class="built_in">document</span>.getElementById(<span class="string">'dy'</span>)</span><br><span class="line"><span class="keyword">var</span> dh = <span class="built_in">document</span>.getElementById(<span class="string">'dh'</span>)</span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.querySelector(<span class="string">'img'</span>)</span><br><span class="line">dy.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    img.src = <span class="string">'dh.jpg'</span></span><br><span class="line">&#125;</span><br><span class="line">dh.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    img.src = <span class="string">'dy.jpg'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="value"><a href="#value" class="headerlink" title="value"></a>value</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="text" value="手机"&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var btn = document.querySelector('button')</span></span><br><span class="line"><span class="regexp">var inputs = document.querySelector('input')</span></span><br><span class="line"><span class="regexp">btn.onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">    inputs.value = '被点击了'</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/表单禁用</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/btn.disabled=true</span></span><br><span class="line"><span class="regexp">    this.disabled = true</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/this指向的是事件函数的调用者btn</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><h4 id="大小、颜色、位置等元素"><a href="#大小、颜色、位置等元素" class="headerlink" title="大小、颜色、位置等元素"></a>大小、颜色、位置等元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">      width: <span class="number">200</span>px;</span><br><span class="line">      height: <span class="number">200</span>px;</span><br><span class="line">      background-color: pink;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>)</span><br><span class="line">  div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.style.backgroundColor = <span class="string">'purple'</span></span><br><span class="line">    <span class="keyword">this</span>.style.width = <span class="string">'250px'</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"><span class="comment">//上面的方法适用于属性比较少的，下面的方法以类名赋值，适用元素较多的</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;<span class="comment">//原来的样式类</span></span><br><span class="line">    background-color: pink;</span><br><span class="line">    width: <span class="number">100</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    font-size: <span class="number">50</span>px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.change &#123;<span class="comment">//修改的样式类</span></span><br><span class="line">    background-color: purple;</span><br><span class="line">    color: white;</span><br><span class="line">    font-size: <span class="number">25</span>px;</span><br><span class="line">    margin-top: <span class="number">100</span>px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;文本&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">var</span> test = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>)</span><br><span class="line">  test.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.className = <span class="string">'change'</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="获得焦点"><a href="#获得焦点" class="headerlink" title="获得焦点"></a>获得焦点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> value=<span class="string">"手机"</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>)</span><br><span class="line"><span class="comment">//获得焦点</span></span><br><span class="line">    text.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.value === <span class="string">'手机'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.style.color = <span class="string">'#333'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//失去焦点</span></span><br><span class="line">    text.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.value === <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = <span class="string">'手机'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.style.color = <span class="string">'#999'</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是DOM&quot;&gt;&lt;a href=&quot;#什么是DOM&quot; class=&quot;headerlink&quot; title=&quot;什么是DOM&quot;&gt;&lt;/a&gt;什么是DOM&lt;/h2&gt;&lt;p&gt;文档对象模型简称DOM，是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过这些DOM接口可以改变网页的
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="DOM" scheme="http://yoursite.com/categories/JavaScript/DOM/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js基础(3)</title>
    <link href="http://yoursite.com/2021/01/10/js%E5%9F%BA%E7%A1%80-3/"/>
    <id>http://yoursite.com/2021/01/10/js基础-3/</id>
    <published>2021-01-10T00:38:39.000Z</published>
    <updated>2021-01-13T11:17:19.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>在JS中，有三种方式创建对象</p><h3 id="利用字面量创建对象"><a href="#利用字面量创建对象" class="headerlink" title="利用字面量创建对象"></a>利用字面量创建对象</h3><p>对象字面量：就是{}里面包含了表达这个具体事物（对象）的属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    uname: <span class="string">'张三'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    sex: <span class="string">'男'</span>,</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             alert(<span class="string">'hi'</span>)</span><br><span class="line">       &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           alert(<span class="string">'姓名：'</span> + obj.uname + <span class="string">'\n年龄：'</span> + obj.age + <span class="string">'\n性别：'</span> + obj.sex)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用对象的属性有两种方法：1、对象名.属性名               2、 对象名[‘属性名’]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(obj.age)</span><br><span class="line">alert(obj[<span class="string">'uname'</span>])</span><br></pre></td></tr></table></figure><p>调用对象的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.sayHi()</span><br><span class="line">obj.show()</span><br></pre></td></tr></table></figure><h3 id="利用new-object创建对象"><a href="#利用new-object创建对象" class="headerlink" title="利用new object创建对象"></a>利用new object创建对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">obj.uname = <span class="string">'张三'</span><span class="comment">//利用=号赋值的方法添加属性和方法</span></span><br><span class="line">obj.age = <span class="number">18</span></span><br><span class="line">obj.sex = <span class="string">'男'</span></span><br><span class="line">obj.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">'名字：'</span> + obj.uname + <span class="string">'\n年龄：'</span> + obj.age + <span class="string">'\n性别：'</span> + obj.sex)</span><br><span class="line">&#125;</span><br><span class="line">alert(obj.sex)</span><br><span class="line">obj.show()</span><br></pre></td></tr></table></figure><h3 id="利用构造函数创建对象"><a href="#利用构造函数创建对象" class="headerlink" title="利用构造函数创建对象"></a>利用构造函数创建对象</h3><p>前两种方法一次只能创建一个对象，里面很多的属性和方法是大量相同的，我们只能复制。构造函数就是把对象里面一些相同的属性和方法抽象出来封装到函数里面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age, sex</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = uname</span><br><span class="line">       <span class="keyword">this</span>.age = age</span><br><span class="line">       <span class="keyword">this</span>.sex = sex</span><br><span class="line">       <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">       alert(<span class="string">'姓名：'</span> + <span class="keyword">this</span>.name + <span class="string">'\n年龄：'</span> + age + <span class="string">'\n性别：'</span> + sex)</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params">songs</span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">'德华唱'</span> + songs)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">var</span> zy = <span class="keyword">new</span> Star(<span class="string">'吕德华'</span>, <span class="number">38</span>, <span class="string">'男'</span>)</span><br><span class="line">alert(zy.name)</span><br><span class="line">alert(zy[<span class="string">'age'</span>])</span><br><span class="line">zy.show()</span><br><span class="line">zy.sing(<span class="string">'大眼睛'</span>)</span><br></pre></td></tr></table></figure><p>我们利用构造函数创建对象的过程也称为对象的实例化</p><p>new在执行时会做四件事情：</p><p>​    1、在内存中创建一个新的空对象</p><p>​    2、让this指向这个新的对象</p><p>​    3、执行构造函数里面的代码，给这个新对象添加属性和方法</p><p>​    4、返回这个新对象，所以构造函数并不需要return    </p><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">obj = <span class="keyword">new</span> Star(<span class="string">'邓壹'</span>, <span class="number">18</span>, <span class="string">'男'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">   alert(k)<span class="comment">//k变量得到的是属性名</span></span><br><span class="line">   alert(obj[k])<span class="comment">//obj[k]得到的是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>JavaScript中的对象分为三种：自定义对象、内置对象、浏览器对象。内置对象就是指js语言自带的一些对象，这些对象供开发者使用，并提供一些常用的属性和方法。内置对象很多，内置对象的属性和方法更多，所以很多对象和方法要靠应用是查阅文档完成学习。查阅文档：mdn/w3c</p><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><p>这个对象不需要new，可以直接使用。在这个对象中，random是其中比较重要的方法之一</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getrandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">var</span> random = getrandom(<span class="number">1</span>, <span class="number">10</span>)<span class="comment">//在（1，10）随机取整数</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> num = prompt(<span class="string">'你猜猜'</span>)</span><br><span class="line">       <span class="keyword">if</span> (random &gt; num) &#123;</span><br><span class="line">         alert(<span class="string">'你猜小了'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (random &lt; num) &#123;</span><br><span class="line">            alert(<span class="string">'你猜大了'</span>)</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             alert(<span class="string">'你猜对了'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>Date必须使用new来调用创建我们的日期对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Date</span>()<span class="comment">//不传参数，返回的是当前时间。传参数有两种格式：数字型 2021，01，10 字符串型 '2021-1-10 15:34:08',用数字型的创建时，返回的比实际的大一个月</span></span><br><span class="line">alert(arr)</span><br></pre></td></tr></table></figure><p>格式化日期、时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">alert(date.getFullYear())</span><br><span class="line">alert(date.getMonth() + <span class="number">1</span>) <span class="comment">//因为月份从0开始，所以月份返回的月份小一个月</span></span><br><span class="line">alert(date.getDate())</span><br><span class="line"><span class="keyword">var</span> year = date.getFullYear()</span><br><span class="line"><span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> dates = date.getDate()</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'星期日'</span>, <span class="string">'星期一'</span>, <span class="string">'星期二'</span>, <span class="string">'星期三'</span>, <span class="string">'星期四'</span>, <span class="string">'星期五'</span>, <span class="string">'星期六'</span>]</span><br><span class="line"><span class="keyword">var</span> day = date.getDay()</span><br><span class="line">alert(<span class="string">'今天是'</span> + year + <span class="string">'年'</span> + month + <span class="string">'月'</span> + dates + <span class="string">'日 '</span> + arr[day])</span><br><span class="line">hours = date.getHours()</span><br><span class="line">minute = date.getMinutes()</span><br><span class="line">second = date.getSeconds()</span><br><span class="line">second = second &lt; <span class="number">10</span> ? <span class="string">'0'</span> + second : second<span class="comment">//小于10的秒数补0</span></span><br><span class="line">alert(<span class="string">'现在是'</span> + hours + <span class="string">'时'</span> + minute + <span class="string">'分钟'</span> + second + <span class="string">'秒'</span>)</span><br></pre></td></tr></table></figure><p> 时间戳：当前时间距离1970年一月一日过了多少毫秒。JS中获取时间戳有三种方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="comment">//第一种方法</span></span><br><span class="line">alert(date.valueOf())</span><br><span class="line">alert(date.getTime())</span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line"><span class="keyword">var</span> date1=+<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">alert (date1)</span><br><span class="line"><span class="comment">//第三种方法是h5新增的</span></span><br><span class="line">alert(<span class="built_in">Date</span>.now())</span><br></pre></td></tr></table></figure><p>计时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countdown</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">var</span> nowtime = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">var</span> inputtime = +<span class="keyword">new</span> <span class="built_in">Date</span>(time)</span><br><span class="line">    <span class="keyword">var</span> times = (inputtime - nowtime) / <span class="number">1000</span></span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>)</span><br><span class="line">    d = d &lt; <span class="number">10</span> ? <span class="string">'0'</span> + d : d</span><br><span class="line">    <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>)</span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">'0'</span> + h : h</span><br><span class="line">    <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>)</span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">'0'</span> + m : m</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>)</span><br><span class="line">    s = s &lt; <span class="number">10</span> ? <span class="string">'0'</span> + s : s</span><br><span class="line">    <span class="keyword">return</span> d + <span class="string">'天'</span> + h + <span class="string">'时'</span> + m + <span class="string">'分'</span> + s + <span class="string">'秒'</span></span><br><span class="line">        &#125;</span><br><span class="line">    alert(countdown(<span class="string">'2021-1-11 19:00:00'</span>))</span><br></pre></td></tr></table></figure><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>检测是否为数组。1、instanceof                      2、isArray</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">alert(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>)<span class="comment">//true</span></span><br><span class="line">alert(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>)<span class="comment">//false</span></span><br><span class="line">alert(<span class="built_in">Array</span>.isArray(arr))<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>添加/删除数组</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210111184715.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">alert(arr.push(<span class="number">4</span>, <span class="string">'DENGYI'</span>)) <span class="comment">//5</span></span><br><span class="line">alert(arr) <span class="comment">//[1,2,3,4,'DENGYI']</span></span><br><span class="line">alert(arr.unshift(<span class="string">'red'</span>, <span class="string">'green'</span>)) <span class="comment">//7</span></span><br><span class="line">alert(arr) <span class="comment">//['red','green',1,2,3,4,'DENGYI']</span></span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">alert(arr.pop())<span class="comment">//DENGYI</span></span><br><span class="line">alert(arr)<span class="comment">//['red','green',1,2,3,4,'DENGYI']</span></span><br><span class="line">alert(arr.shift())<span class="comment">//red</span></span><br><span class="line">alert(arr)<span class="comment">//['green',1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>数组翻转、排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">'DENGYI'</span>,<span class="string">'blue'</span>,<span class="string">'white'</span>,<span class="string">'black'</span>]</span><br><span class="line">arr.reverse()</span><br><span class="line">alert(arr)</span><br><span class="line"><span class="keyword">var</span> arr1=[<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line">arr1.sort()<span class="comment">//注意：这里如果数组里有两位数，sort无法实现</span></span><br><span class="line">alert(arr)</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">12</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="number">43</span>, <span class="number">2</span>]</span><br><span class="line">arr2.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//return a - b//升序的顺序排列</span></span><br><span class="line">   <span class="keyword">return</span> b - a<span class="comment">//降序排列</span></span><br><span class="line">        &#125;)</span><br><span class="line">alert(arr2)</span><br></pre></td></tr></table></figure><p>数组索引</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210111191400.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'pink'</span>, <span class="string">'green'</span>, <span class="string">'black'</span>]</span><br><span class="line">alert(arr.indexOf(<span class="string">'green'</span>))<span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'purple'</span>]</span><br><span class="line">alert(arr.lastIndexOf(<span class="string">'red'</span>))<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>数组去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> newArr = []</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (newArr.indexOf(arr[i]) === <span class="number">-1</span>) &#123;</span><br><span class="line">                 newArr.push(arr[i])</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> newArr</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">var</span> demo = unique([<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>, <span class="string">'z'</span>, <span class="string">'x'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'x'</span>])</span><br><span class="line">alert(demo)</span><br></pre></td></tr></table></figure><p>数组转换为字符串</p><p>1、toString           2、join(分隔符)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'pink'</span>]</span><br><span class="line">alert(arr1.join())</span><br><span class="line">alert(arr1.join(<span class="string">'$'</span>))</span><br><span class="line">alert(arr1.join(<span class="string">'@'</span>))</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210111194337.png" alt=""></p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>基本包装类型：就是把简单数据类型包装成为了复杂数据类型。在js中，有三种数据类型可以包装:String、Number Boolean。把简单数据类型包装成为复杂数据类型，即可使用复杂数据类型中的属性和方法</p><p>字符串不可变。指的是字符串里面的值不可变，虽然看上去可以改变内容，但其实地址变了，内存中开辟一个新的空间。字符串里所有的方法，都不会修改字符串本身</p><p>根据字符返回位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'改革春风吹满地，春天来了'</span></span><br><span class="line">alert(str.indexOf(<span class="string">'春'</span>))</span><br><span class="line">alert(str.indexOf(<span class="string">'春'</span>,<span class="number">3</span>))<span class="comment">//从索引号是3的位置开始往后查找</span></span><br><span class="line"><span class="comment">//求某个字符出现的位置以及次数</span></span><br><span class="line"> <span class="keyword">var</span> str = <span class="string">'oabcoefoxyozzopp'</span></span><br><span class="line"> <span class="keyword">var</span> index = str.indexOf(<span class="string">'o'</span>)</span><br><span class="line"> <span class="keyword">var</span> num = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (index !== <span class="number">-1</span>) &#123;</span><br><span class="line">       alert(index)</span><br><span class="line">        num++</span><br><span class="line">         index = str.indexOf(<span class="string">'o'</span>, index + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line"> alert(<span class="string">'o出现的次数是'</span> + num)</span><br></pre></td></tr></table></figure><p>根据位置返回字符</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210111201726.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> str = <span class="string">'DENGYI'</span></span><br><span class="line"> alert(str.charAt(<span class="number">3</span>))</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">         alert(str.charAt(i))</span><br><span class="line">   &#125;</span><br><span class="line">alert(str.charCodeAt(<span class="number">0</span>))</span><br><span class="line">alert(str[<span class="number">0</span>])</span><br><span class="line"><span class="comment">//统计出现次数最多的字符</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcoefoxyozzopp'</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> chars = str.charAt(i)</span><br><span class="line">      <span class="keyword">if</span> (o[chars]) &#123;</span><br><span class="line">            o[chars]++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             o[chars] = <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">var</span> max=<span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> ch=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> o)&#123;</span><br><span class="line">  <span class="keyword">if</span>(o[k]&gt;max)&#123;</span><br><span class="line">    max=o[k]</span><br><span class="line">    ch=k</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(max)</span><br><span class="line">alert(<span class="string">'最多的字符是'</span>+ch)</span><br></pre></td></tr></table></figure><p>替换字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'DENGYIRED'</span></span><br><span class="line">alert(str.replace(<span class="string">'D'</span>,<span class="string">'B'</span>))<span class="comment">//只替换一个</span></span><br><span class="line"><span class="keyword">while</span>(str.indexOf(<span class="string">'D'</span>)!==<span class="number">-1</span>)&#123;</span><br><span class="line">  str=str.replace(<span class="string">'D'</span>,<span class="string">'B'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符转换为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1=<span class="string">'red&amp;pink&amp;blue'</span></span><br><span class="line">alert(str1.split(<span class="string">'&amp;'</span>))</span><br></pre></td></tr></table></figure><p>其它方法</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210111204706.png" alt=""></p><h2 id="数据类型的赋值"><a href="#数据类型的赋值" class="headerlink" title="数据类型的赋值"></a>数据类型的赋值</h2><p>js把数据类型分为简单类型和复杂类型。简单数据类型存放在栈里面，里面直接开辟一个空间存放的是值，复杂数据类型首先以十六进制在栈里面存放地址，然后这个地址指向堆里面的数据</p><h3 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h3><p>简单类型又叫做基本数据类型或者值类型。他们在存储时变量中存储的是值本身。简单类型包括string、number、boolean、undefined、null。前四种类型返回的都是对应的数据类型，只有null返回的是空的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="literal">null</span></span><br><span class="line">alert(<span class="keyword">typeof</span>(time)) <span class="comment">//object</span></span><br></pre></td></tr></table></figure><h4 id="简单数据类型传参"><a href="#简单数据类型传参" class="headerlink" title="简单数据类型传参"></a>简单数据类型传参</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">   a++</span><br><span class="line">   alert(a)<span class="comment">//11</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line">fn(x)</span><br><span class="line">alert(x)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在函数内对形参做任何修改，都不会影响到外部变量</p><h3 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h3><p>通过new关键字创建的对象（系统对象、自定义对象），如Object、Array、Date</p><h4 id="复杂数据类型传参"><a href="#复杂数据类型传参" class="headerlink" title="复杂数据类型传参"></a>复杂数据类型传参</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  alert(x.name)</span><br><span class="line">  x.name = <span class="string">'李克勤'</span></span><br><span class="line">  alert(x.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'DENGYI'</span>)</span><br><span class="line">alert(p.name)</span><br><span class="line">f1(p)</span><br><span class="line">alert(p.name)</span><br></pre></td></tr></table></figure><p>函数的形参也可以看作是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h2&gt;&lt;p&gt;在JS中，有三种方式创建对象&lt;/p&gt;
&lt;h3 id=&quot;利用字面量创建对象&quot;&gt;&lt;a href=&quot;#利用字面量创建对象&quot; class=&quot;head
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="基础语法" scheme="http://yoursite.com/categories/JavaScript/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js基础(2)</title>
    <link href="http://yoursite.com/2021/01/07/js%E5%9F%BA%E7%A1%80-2/"/>
    <id>http://yoursite.com/2021/01/07/js基础-2/</id>
    <published>2021-01-06T23:55:51.000Z</published>
    <updated>2021-01-13T08:24:56.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p>在网页内按F12进入开发者模式，点击Sources，需要在哪行设置断点，就在那行的行号单击，单击后刷新一下网页，即可进入断点调试。再点击一下行号，取消断点。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>两种创建数组的方法：1、var Arr=new Array()                 2、var arr=[]</p><p>数组中可以存放任意类型的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'王老师'</span>, <span class="literal">true</span>]</span><br><span class="line">alert(arr)</span><br><span class="line">alert(arr[<span class="number">2</span>])<span class="comment">//通过索引访问，从0开始</span></span><br><span class="line">alert(arr[<span class="number">4</span>])<span class="comment">//没有该元素，会返回undefined</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)<span class="comment">//arr.length返回数组长度</span></span><br><span class="line">&#123;</span><br><span class="line">  alert(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增数组元素"><a href="#新增数组元素" class="headerlink" title="新增数组元素"></a>新增数组元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]</span><br><span class="line">alert(arr)</span><br><span class="line">arr.length = <span class="number">5</span><span class="comment">//通过修改数组长度扩容</span></span><br><span class="line">alert(arr)<span class="comment">//red,green,blue,,</span></span><br><span class="line">alert(arr[<span class="number">3</span>])<span class="comment">//undefined</span></span><br><span class="line">arr[<span class="number">3</span>]=<span class="string">'pink'</span><span class="comment">//这种添加方式和python中的字典很像</span></span><br><span class="line">alert(arr[<span class="number">3</span>])<span class="comment">//pink</span></span><br></pre></td></tr></table></figure><p>课后随便试了一下，好像arr.length的修改并不需要，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">8</span>] = <span class="string">'ring'</span></span><br><span class="line">alert(arr[<span class="number">8</span>])<span class="comment">//ring</span></span><br><span class="line">alert(arr)<span class="comment">//red,green,blue,pink,,,,,ring</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><h4 id="用函数关键字自定义函数"><a href="#用函数关键字自定义函数" class="headerlink" title="用函数关键字自定义函数"></a>用函数关键字自定义函数</h4><p>第一种方法，用function声明函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (num1 + num2)</span><br><span class="line">        &#125;</span><br><span class="line">alert(add(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment">//3</span></span><br><span class="line">alert(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment">//3</span></span><br><span class="line">alert(add(<span class="number">1</span>)) <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p>从上述结果看，如果实参个数多余形参个数，会按照形参的个数取。如果实参的个数小于形参的个数， 返回NaN。PS：这好像是语言鄙视链的由来之一吧。。。砖家建议：尽量让实参的个数和形参相匹配 </p><p> return：终止函数，后面的语句都不再执行。只能返回一个值，如果有多个值用逗号隔开，以最后一个值为准。只要是函数，都有返回值。有return，返回return后面的值；没有return，返回undefined</p><h4 id="用函数表达式创建函数"><a href="#用函数表达式创建函数" class="headerlink" title="用函数表达式创建函数"></a>用函数表达式创建函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params">aru</span>) </span>&#123;</span><br><span class="line">alert(<span class="string">'我是表达式'</span>)</span><br><span class="line">alert(aru)</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="string">'糖醋排骨'</span>)</span><br></pre></td></tr></table></figure><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>当我们不确定有多少个参数传递的时候，可以用arguments来获取。来javascript中，arguments实际上是当前函数的一个内置对象。所有函数都内置一个arguments对象，arguments对象中存储了传递的所有实参</p><p>arguments展示形式是一个伪数组，因此可以进行遍历</p><p><strong>伪数组</strong>：具有length、按索引方式存储数据、不具有数组的push、pop等方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_max</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    alert(<span class="built_in">arguments</span>[i])</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">get_max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>最后值得注意的一点：只有函数才有arguments</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">20</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">alert(num)</span><br><span class="line">&#125;</span><br><span class="line">   f2()</span><br><span class="line">&#125;</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><p>学习作用域链前，我们先看下上段代码。这段代码输出的多少呢？答案是20。这就是作用域链的应用。</p><p>作用域链：内部函数访问外部函数的变量，采取的是链式查找的方式来决定取哪个值(就近原则)。这种结构我们成为作用域链</p><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(num)</span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span></span><br></pre></td></tr></table></figure><p>上面代码在不测试的状态下，你能想到输出什么吗？答案是undefined。那下面这种呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="number">10</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>也能调用该函数。那另一种函数定义的方式呢，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun()</span><br><span class="line"><span class="keyword">var</span> fun=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="number">22</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案却是无法执行。这又是为什么呢。这就是预解析的作用</p><p>JS解析器在运行JavaScript代码的时候分为两步：预解析和代码执行。预解析：js引擎会把js里面所有的var还有function提升到当前作用域的最前面。代码执行：按照代码书写的顺序从上往下执行</p><p>预解析分为变量预解析（变量提升）和函数预解析（函数提升）：</p><p>​    变量提升：把所有的变量声明提升到当前的作用域最前面，不提升赋值操作</p><p>​    函数提升：把所有的函数声明提升到当前作用域的最前面，不调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">fun()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(num)<span class="comment">//undefined</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上段代码相当于执行了下列代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num</span><br><span class="line">  alert(num)</span><br><span class="line">  num=<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">num=<span class="number">10</span></span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><p>还有一个经典案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f1()</span><br><span class="line">alert(c)</span><br><span class="line">alert(b)</span><br><span class="line">alert(a)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a=b=c=<span class="number">9</span><span class="comment">//坑，相当于var a=9;b=9;c=9;b和c直接赋值，没有var声明，当全局变量看</span></span><br><span class="line">  alert(c)</span><br><span class="line">  alert(b)</span><br><span class="line">  alert(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于执行以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  a=b=c=<span class="number">9</span></span><br><span class="line">  alert(a)<span class="comment">//9</span></span><br><span class="line">  alert(b)<span class="comment">//9</span></span><br><span class="line">  alert(c)<span class="comment">//9</span></span><br><span class="line">&#125;</span><br><span class="line">f1()</span><br><span class="line">alert(a)<span class="comment">//9</span></span><br><span class="line">alert(b)<span class="comment">//9</span></span><br><span class="line">alert(c)<span class="comment">//报错</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;断点调试&quot;&gt;&lt;a href=&quot;#断点调试&quot; class=&quot;headerlink&quot; title=&quot;断点调试&quot;&gt;&lt;/a&gt;断点调试&lt;/h2&gt;&lt;p&gt;在网页内按F12进入开发者模式，点击Sources，需要在哪行设置断点，就在那行的行号单击，单击后刷新一下网页，即可进入断点
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="基础语法" scheme="http://yoursite.com/categories/JavaScript/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js基础(1)</title>
    <link href="http://yoursite.com/2021/01/05/js%E5%9F%BA%E7%A1%80-1/"/>
    <id>http://yoursite.com/2021/01/05/js基础-1/</id>
    <published>2021-01-05T10:50:13.000Z</published>
    <updated>2021-01-11T14:04:42.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS的组成"><a href="#JS的组成" class="headerlink" title="JS的组成"></a>JS的组成</h2><p>Javascript由ECMAScript、DOM和BOM组成。</p><p>​    ECMAScript是由ECMA国际进行标准化的一门编程语言，Javascript是他的实现和扩展</p><p>​    DOM的全名为文档对象模型，是w3c组织推荐的处理可扩展标记语言的标准编程接口。通过DOM提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）</p><p>​    BOM的全名为浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等</p><p>JS有三种书写位置：行内、内嵌、外部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 行内式</span></span><br><span class="line"><span class="comment">其实这里的代码并不需要都复制到vs code，只需在vs code上打！即可自动补全，只需要把body标签里的内容补全即可 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"唐伯虎"</span> <span class="attr">onclick</span>=<span class="string">"alert('秋香姐')"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着在vs code上安装插件open in  browser，右键，点击open in default browser，即可打开一个网页查看效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 内嵌式 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'js初学者'</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 向前跑 --&gt;</span>//注释快捷键 ctrl /</span><br><span class="line"><span class="comment">&lt;!-- &lt;input type="button" value="唐伯虎" onclick="alert('秋香姐')"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外部式，得先在同级目录下建立一个 js文件 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"D:\Microsoft VS Code\JavaScript实验\test.js"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script&gt;alert('星星孤单坠落在那片海') &lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 向前跑 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;input type="button" value="唐伯虎" onclick="alert('秋香姐')"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js文件</span></span><br><span class="line">alert(<span class="string">'外部js无法执行'</span>)</span><br></pre></td></tr></table></figure><p>这里我不知道为什么外部无法引用，在网上找到的解决方案：改路径、清缓存。都无法解决，未完。。。。</p><h2 id="输入输出语句"><a href="#输入输出语句" class="headerlink" title="输入输出语句"></a>输入输出语句</h2><p>prompt：输入框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">prompt(<span class="string">'请输入你的年龄'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>alert：弹出警示框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">'请输入你的年龄'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>console.log 控制台输出，提供给程序员测试用的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'请输入你的年龄'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按F12进入开发者模式，在console下即可找到</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210106080212.png" alt=""></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>声明变量：var 变量名</p><p>也可以不声明直接使用，这点和python是一样的</p><h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><p>由字母（A-Z，a-z）、数字（0-9）、下划线、美元符号（$）组成。严格区分大小写、不能以数字开头、不能是关键字、保留字、首字母小写，后面单词的首字母需要大写(驼峰命名法)、尽量不是使用name作为变量名</p><p><strong>保留字</strong>：预留的“关键字”，意思是现在虽然不是关键字，未来可能成为关键字。不能使用他们作为变量名或方法名</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>JS把数据类型分为两类：简单数据类型和复杂数据类型</p><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210106160731.png" alt=""></p><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>数字前面加0表示八进制，输出时默认转化为十进制。数字前面加0x表示十进制</p><p> Infinity代表无穷大，大于任何数值。Infinity代表无穷小，小于任何数值。NaN，Not a number，代表一个非数值</p><p>isNaN(变量名)：这个方法用来判断是否时数字，是数字，返回false，不是数字，返回true</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>length：检测获取字符串的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"what is your name"</span></span><br><span class="line">alert(str.length)</span><br></pre></td></tr></table></figure><p>字符串的拼接</p><p>用+进行拼接，这里和python也是一样的。唯一不同的是js的字符串拼接无论+号两边是否为同一类型，均允许拼接。而python不行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> str=<span class="string">"what is your name"</span></span><br><span class="line"> <span class="keyword">var</span> str1=<span class="string">"my name is andy "</span></span><br><span class="line"> <span class="comment">//str1=12</span></span><br><span class="line">alert(str+str1)</span><br></pre></td></tr></table></figure><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><p>布尔类型只有true和false，用于数据运算时，true表示1，false表示0</p><h4 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h4><p>一个声明后没有被赋值的变量会有一个默认值undefined。可以与字符串进行相连，与数字相加为NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age;</span><br><span class="line">alert(<span class="string">"DENGYI"</span>+age)<span class="comment">//DENGYIundefined</span></span><br><span class="line">alert(age+<span class="number">1</span>)<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h4><p>空值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> space=<span class="literal">null</span></span><br><span class="line">alert(space+<span class="string">"DENGYI"</span>)<span class="comment">//nullDENGYI</span></span><br><span class="line">alert(space+<span class="number">1</span>)<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h3 id="检验数据类型"><a href="#检验数据类型" class="headerlink" title="检验数据类型"></a>检验数据类型</h3><p>使用typeof进行检测</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="string">"213"</span></span><br><span class="line">alert(<span class="keyword">typeof</span> num)<span class="comment">//number</span></span><br><span class="line"><span class="keyword">var</span> time=<span class="literal">null</span></span><br><span class="line">alert(<span class="keyword">typeof</span> time)<span class="comment">//这里注意，输出的不是null，而是object</span></span><br></pre></td></tr></table></figure><p>还有一点值得注意，prompt取回的值为字符串型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num</span><br><span class="line">num=prompt(<span class="string">"请输入一个数字"</span>)</span><br><span class="line">alert(<span class="keyword">typeof</span> num)<span class="comment">//string</span></span><br></pre></td></tr></table></figure><p>除了通过typeof检测数据类型，我们还可以通过控制台的颜色进行判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">12</span>)<span class="comment">//蓝色</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"13"</span>)<span class="comment">//黑色</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span>)<span class="comment">//蓝色</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span>)<span class="comment">//灰色</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span>)<span class="comment">//灰色</span></span><br></pre></td></tr></table></figure><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><h4 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h4><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210106172117.png" alt=""></p><p>其中第三种转化为隐式转换</p><h4 id="转换为数字"><a href="#转换为数字" class="headerlink" title="转换为数字"></a>转换为数字</h4><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210106172554.png" alt=""></p><p>第一种方法和第二种方法可以将数字后的字母去掉，比如parseInt(120px)就会得到120</p><h4 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h4><p>使用Boolean()函数转换为布尔型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>))<span class="comment">//false</span></span><br><span class="line">alert(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>))<span class="comment">//false</span></span><br><span class="line">alert(<span class="built_in">Boolean</span>(<span class="literal">null</span>))<span class="comment">//false</span></span><br><span class="line">alert(<span class="built_in">Boolean</span>(<span class="number">12</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="built_in">Boolean</span>(<span class="string">"易班打卡"</span>))<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>算术运算符包括+ 、- 、* 、/、%</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(0.1+0.2)//0.30000000000000004</span><br></pre></td></tr></table></figure><p>结论：尽量避开浮点数的使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(num++)//1</span><br><span class="line">alert(++num)//3</span><br></pre></td></tr></table></figure><p>自增自减运算符，这和其他语言是一样的，num++先用了再加，++num先加了再用。减减运算符同理。前置运算符和后置运算符单句使用时一样效果</p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>比较运算符也叫关系运算符，&lt;、&gt;、&gt;=、&lt;=、==、!=、===、!==，返回布尔值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(18=="18")//true,默认转换数据类型，会把字符串型的数据转换为数字型</span><br></pre></td></tr></table></figure><p>在这里，我学到新的比较运算符===，这个运算符叫全等。要求两侧的值还有数据类型完全一致才可以true</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(18==="18")//false</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>&amp;&amp;   逻辑与        || 逻辑或         !  逻辑非。这和其它语言是一样的</p><h4 id="短路运算"><a href="#短路运算" class="headerlink" title="短路运算"></a>短路运算</h4><p>短路运算也叫逻辑中断：当有多个表达式（值）时，左边的表达式值可以确定结果时，就不在继续运算右边的表达式的值</p><h5 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h5><p>语法：表达式1&amp;&amp;表达式2</p><p>​    如果第一个表达式1的值为真，则返回表达式2</p><p>​    如果第一个表达式1的值为假，则返回表达式1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(123&amp;&amp;456)//456</span><br><span class="line">alert(0&amp;&amp;456)//0</span><br><span class="line">alert(NaN&amp;&amp;1+2&amp;&amp;5)//NaN,这对于'',null,undefined是一样的</span><br><span class="line">alert(null&amp;&amp;1+2&amp;&amp;5)//null</span><br></pre></td></tr></table></figure><h5 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或"></a>逻辑或</h5><p>语法：表达式1||表达式2</p><p>​    如果第一个表达式1的值为真，则返回表达式1</p><p>​    如果第一个表达式1的值为假，则返回表达式2</p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>=、+=、-=、*=、/=、%=</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20210107192745.png" alt=""></p><p>还有一个注意的点是，一元运算符里面的逻辑非优先级最高</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS的组成&quot;&gt;&lt;a href=&quot;#JS的组成&quot; class=&quot;headerlink&quot; title=&quot;JS的组成&quot;&gt;&lt;/a&gt;JS的组成&lt;/h2&gt;&lt;p&gt;Javascript由ECMAScript、DOM和BOM组成。&lt;/p&gt;
&lt;p&gt;​    ECMAScript是由E
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="基础语法" scheme="http://yoursite.com/categories/JavaScript/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>高效寻找开源项目</title>
    <link href="http://yoursite.com/2020/03/16/%E9%AB%98%E6%95%88%E5%AF%BB%E6%89%BE%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2020/03/16/高效寻找开源项目/</id>
    <published>2020-03-16T03:04:39.000Z</published>
    <updated>2020-03-16T03:51:09.096Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来讲一下如何在github上高效的寻找适合自己的开源项目</p><p>首先，我们来明确一下github的一些因素。随便打开一个项目，如下所示：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200316112254.png" alt=""></p><p>上面的红框都是一些搜索的标准，还有star和fork数表明这个项目是否火热，也是搜索的标准</p><p>比如，我们在自学了python的Djange后，打算在github找小项目练练手，我们就直接在搜索框打Django，如下</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200316113214.png" alt=""></p><p>接着发现项目非常的多。那怎么搜索名字里面包含Django的呢？用in:name Django</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200316113405.png" alt=""></p><p>我们就可以找出名字里面包含Django的项目了。</p><p>然后我们还可以用项目的火热程度对我们寻找的项目划分范围：stars:&gt;3000</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200316113638.png" alt=""></p><p>star数小于3000的项目就被过滤掉了。fork同理</p><p>当然我们还可以在描述里搜也可以在readme里搜。同时我们还可以限制语言(language)和更新时间(pushed)</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200316114547.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我们来讲一下如何在github上高效的寻找适合自己的开源项目&lt;/p&gt;
&lt;p&gt;首先，我们来明确一下github的一些因素。随便打开一个项目，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Brickexpe
      
    
    </summary>
    
      <category term="git和github" scheme="http://yoursite.com/categories/git%E5%92%8Cgithub/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>GAN介绍</title>
    <link href="http://yoursite.com/2020/03/06/GAN%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2020/03/06/GAN介绍/</id>
    <published>2020-03-06T00:49:56.000Z</published>
    <updated>2020-03-06T02:01:43.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>对抗神经网络其实是两个网络的组合，可以理解为一个网络生成模拟数据，另一个网络判断生成的数据是真实的还是模拟的。生成模拟数据的网络要不断优化自己让判别网络判断不出来，判别网络也要优化自己让自己判断得更准确。二者形成对抗，故称为对抗神经网络（GAN）。</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>GAN由generator(生成式模型)和discriminator(判别式模型)两部分组成</p><p> generator：主要是从训练数据中产生相同分布得samples，对于输入x，类别标签y，在生成式模型中估计器联合概率分布</p><p>discriminator：判断输入是真实数据还是generator生成的数据，采用的是监督学习方法</p><p>上面两个模型结合后，经过大量次数的迭代训练会使generator尽可能模拟出以假乱真的样本，而discriminator会有更精确的鉴别真伪数据的能力，最后会达到纳什均衡，也就是discriminator对于generator的数据鉴别结果为正确率和错误率各占50%。</p><p>如下图：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200306092909.png" alt=""></p><p>生成式模型又叫生成器。他先用一个随机编码向量来输出一个模拟样本</p><p>判别式模型又叫判别器，它的输入是一个样本（可以是真实样本，也可以是模拟样本），输出一个判断该样本是样本是真样本还是模拟样本的结果</p><p>监督学习神经网络就属于discriminator，只需要学习generator。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;对抗神经网络其实是两个网络的组合，可以理解为一个网络生成模拟数据，另一个网络判断生成的数据是真实的还是模拟的。生成模拟数据的网络要不断优化自
      
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="对抗神经网络" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%AF%B9%E6%8A%97%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>理解各种熵</title>
    <link href="http://yoursite.com/2020/03/03/%E7%90%86%E8%A7%A3%E5%90%84%E7%A7%8D%E7%86%B5/"/>
    <id>http://yoursite.com/2020/03/03/理解各种熵/</id>
    <published>2020-03-03T03:56:25.000Z</published>
    <updated>2020-04-10T07:02:49.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h2><p>假设随机从口袋取硬币，口袋里有各一个蓝色的、红色的、绿色的、橘色的硬币。我们的目标是：问最少的问题，得到正确的答案。如下：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200303143547.png" alt=""></p><p>每个硬币都有1/4的概率被选中，1/4(概率)*2(问题个数)<em>4(球的数量)=2。平均需要问两道题才能找出不同颜色的球，也就是说期望值是2，也叫做<em>*信息熵</em></em>。</p><p>如果改变一下上个例子，变成袋子中1/8的硬币是绿色的，1/8的是橘色的，1/4是红色的，1/2是蓝色的。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200303144317.png" alt=""></p><p>蓝色硬币概率为1/2，所以只需要一个问题就知道是还是不是蓝色，红色硬币概率为1/4，需要两个问题，以此类推，橘色和绿色硬币需要3个问题。所以，信息熵=期望=1/2x1+1/4x2+1/8x3+1/8x3=1.75</p><p>所以，问题个数的期望是：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200303150107.png" alt=""></p><p> 这个式子就是<strong>信息熵</strong>的表达式。也可以写作：<img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200303162354.png" alt=""></p><p>简单来说, 其意义就是<strong>在最优化策略下, 猜到颜色所需要的问题的个数。熵代表的是随机变量或整个系统的不确定性，信息熵越大，随机变量或系统的不确定性就越大。</strong></p><h2 id="联合熵"><a href="#联合熵" class="headerlink" title="联合熵"></a>联合熵</h2><p>从信息熵公式可得，<strong>随机变量的取值个数越多，状态数也就越多，信息熵就越大，混乱程度就越大</strong>。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200303172821.png" alt=""></p><h2 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h2><p>口袋还是1/8的硬币是绿色的，1/8的是橘色的，1/4是红色的，1/2是蓝色的，但是换一个策略：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200303151023.png" alt=""></p><p>需要问的问题数=1/8x2+1/8x2+1/4x2+1/4x2=2。2就是这个策略的交叉熵，而最优策略的交叉熵是1.75。而1/8概率橘色硬币和1/2概率的蓝色硬币一样，都是需要两个问题得到颜色。也就是说，小球的分布为(1/4,1/4,1/4,1/4)，这个分布就是非真实分布</p><p>给定一个策略，交叉熵就是在该策略下猜中颜色所需要的问题的期望值。<strong>交叉熵用来衡量在给定的真实分布下，使用非真实分布所指定的策略消除系统的不确定性所需要付出成本的大小。</strong>交叉的字面意思在于：真实分布与非真实分布的交叉。给定一个方案，越优的策略，交叉熵越低，具有最低的交叉熵策略就是最优的策略。而在此时，交叉熵=信息熵。因此，我们通常需要最小化交叉熵，也间接证明了我们的算法所算出的非真实分布接近真实分布。交叉熵也叫对数似然</p><p>交叉熵公式：</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200303164523.png" alt=""></p><h2 id="条件熵"><a href="#条件熵" class="headerlink" title="条件熵"></a>条件熵</h2><p>条件熵H(Y|X)表示在已知随机变量X的条件下随机变量Y的不确定性。条件熵H(Y|X)定义为X给定条件下Y的条件概率分布的熵对X的数学期望。条件熵也被称为信息增益，信息增益越大，特征表现越好。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200303171644.png" alt=""></p><p>条件熵(Y|X)等于联合熵H(X,Y)减去单独的熵H(X)，H(Y|X)=H(X,Y)-H(X)。</p><h2 id="相对熵"><a href="#相对熵" class="headerlink" title="相对熵"></a>相对熵</h2><p>相对熵又称为KL散度，它表示2个函数或概率分布的差异性：差异越大则相对熵越大，差异越小则相对熵越小。设p为概率分布，q为另一分布</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200303171137.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信息熵&quot;&gt;&lt;a href=&quot;#信息熵&quot; class=&quot;headerlink&quot; title=&quot;信息熵&quot;&gt;&lt;/a&gt;信息熵&lt;/h2&gt;&lt;p&gt;假设随机从口袋取硬币，口袋里有各一个蓝色的、红色的、绿色的、橘色的硬币。我们的目标是：问最少的问题，得到正确的答案。如下：&lt;/p&gt;

      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>自编码综合实现</title>
    <link href="http://yoursite.com/2020/02/29/%E8%87%AA%E7%BC%96%E7%A0%81%E7%BB%BC%E5%90%88%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2020/02/29/自编码综合实现/</id>
    <published>2020-02-29T11:28:18.000Z</published>
    <updated>2020-03-02T11:57:26.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>自编码常用方法：代替和级联</p><p>栈式自编码会将网络中的中间层作为下一个网络的输入进行训练，我们可以得到网络中每一个中间层的原始值，为了能有更好的效果，还可以使用级联的方式进一步优化网络参数。在已有的模型上接着优化参数的步骤习惯上成为“微调”。但是通常在大量已标注训练数据的情况下使用。在这样的情况下，微调能显著提升分类器性能。但如果有大量未标注数据，”微调“作用有限</p><h2 id="去噪-栈式"><a href="#去噪-栈式" class="headerlink" title="去噪+栈式"></a>去噪+栈式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist=input_data.read_data_sets(<span class="string">"/data/"</span>,one_hot=<span class="literal">True</span>)</span><br><span class="line">train_X=mnist.train.images</span><br><span class="line">train_Y=mnist.train.labels</span><br><span class="line">test_X=mnist.train.images</span><br><span class="line">test_Y=mnist.train.labels</span><br><span class="line"></span><br><span class="line">n_input=<span class="number">784</span></span><br><span class="line">n_hidden_1=<span class="number">256</span></span><br><span class="line">n_hidden_2=<span class="number">128</span></span><br><span class="line">n_classes=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">x=tf.placeholder(<span class="string">"float"</span>,[<span class="literal">None</span>,n_input])</span><br><span class="line">y=tf.placeholder(<span class="string">"float"</span>,[<span class="literal">None</span>,n_input])</span><br><span class="line">dropout_keep_prob=tf.placeholder(<span class="string">"float"</span>)</span><br><span class="line">l2x=tf.placeholder(<span class="string">"float"</span>,[<span class="literal">None</span>,n_hidden_1])</span><br><span class="line">l2y=tf.placeholder(<span class="string">"float"</span>,[<span class="literal">None</span>,n_hidden_1])</span><br><span class="line">l3x=tf.placeholder(<span class="string">"float"</span>,[<span class="literal">None</span>,n_hidden_2])</span><br><span class="line">l3y=tf.placeholder(<span class="string">"float"</span>,[<span class="literal">None</span>,n_classes])</span><br><span class="line"></span><br><span class="line">weights=&#123;</span><br><span class="line">    <span class="string">"h1"</span>:tf.Variable(tf.random_normal([n_input,n_hidden_1])),</span><br><span class="line">    <span class="string">"l1_h2"</span>:tf.Variable(tf.random_normal([n_hidden_1,n_hidden_1])),</span><br><span class="line">    <span class="string">"l1_out"</span>:tf.Variable(tf.random_normal([n_hidden_1,n_input])),</span><br><span class="line">    </span><br><span class="line">    <span class="string">"l2_h1"</span>:tf.Variable(tf.random_normal([n_hidden_1,n_hidden_2])),</span><br><span class="line">    <span class="string">"l2_h2"</span>:tf.Variable(tf.random_normal([n_hidden_2,n_hidden_2])),</span><br><span class="line">    <span class="string">"l2_out"</span>:tf.Variable(tf.random_normal([n_hidden_2,n_hidden_1])),</span><br><span class="line"></span><br><span class="line">    <span class="string">"out"</span>:tf.Variable(tf.random_normal([n_hidden_2,n_classes]))</span><br><span class="line">      &#125;</span><br><span class="line">biases=&#123;</span><br><span class="line">  <span class="string">"b1"</span>:tf.Variable(tf.zeros([n_hidden_1])),</span><br><span class="line">  <span class="string">"l1_b2"</span>:tf.Variable(tf.zeros(n_hidden_1)),</span><br><span class="line">  <span class="string">"l1_out"</span>:tf.Variable(tf.zeros(n_input)),</span><br><span class="line"></span><br><span class="line">  <span class="string">"l2_b1"</span>:tf.Variable(tf.zeros([n_hidden_2])),</span><br><span class="line">  <span class="string">"l2_b2"</span>:tf.Variable(tf.zeros(n_hidden_2)),</span><br><span class="line">  <span class="string">"l2_out"</span>:tf.Variable(tf.zeros(n_hidden_1)),</span><br><span class="line"></span><br><span class="line">  <span class="string">"out"</span>:tf.Variable(tf.zeros(n_classes))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，要建立4个网络：每一层都用一个网格来训练训练，于是我们需要训练3个网格，最后再把训练好的各个层组合到一起，形成第4个网络。所以我们在上面代码中为每一层网络定义了占位符，接着定义了学习参数。</p><h3 id="第一层网络结构"><a href="#第一层网络结构" class="headerlink" title="第一层网络结构"></a>第一层网络结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">l1_out=tf.nn.sigmoid(tf.add(tf.matmul(x,weights[<span class="string">"h1"</span>]),biases[<span class="string">"b1"</span>]))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_l1_autodecoder</span><span class="params">(layer_1,_weights,_biases,_keep_prob)</span>:</span></span><br><span class="line">  layer_1out=tf.nn.dropout(layer_1,_keep_prob)</span><br><span class="line">  layer_2=tf.nn.sigmoid(tf.add(tf.matmul(layer_1out,_weights[<span class="string">"l1_h2"</span>]),_biases[<span class="string">"l1_b2"</span>]))</span><br><span class="line">  layer_2out=tf.nn.dropout(layer_2,_keep_prob)</span><br><span class="line">  <span class="keyword">return</span> tf.nn.sigmoid(tf.add(tf.matmul(layer_2out,_weights[<span class="string">"l1_out"</span>]),_biases[<span class="string">"l1_out"</span>]))</span><br><span class="line"></span><br><span class="line">l1_reconstruction=noise_l1_autodecoder(l1_out,weights,biases,dropout_keep_prob)</span><br><span class="line">l1_cost=tf.reduce_mean(tf.pow(l1_reconstruction-y,<span class="number">2</span>))</span><br><span class="line">l1_optm=tf.train.AdamOptimizer(<span class="number">0.01</span>).minimize(l1_cost)</span><br></pre></td></tr></table></figure><h3 id="第二层网络结构"><a href="#第二层网络结构" class="headerlink" title="第二层网络结构"></a>第二层网络结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l2_autodecoder</span><span class="params">(layer1_2,_weight,_biases)</span>:</span></span><br><span class="line">  layer1_2out=tf.nn.sigmoid(tf.add(tf.matmul(layer1_2,_weight[<span class="string">"l2_h2"</span>]),_biases[<span class="string">"l2_b2"</span>]))</span><br><span class="line">  <span class="keyword">return</span> tf.nn.sigmoid(tf.matmul(layer1_2out,_weight[<span class="string">"l2_out"</span>])+_biases[<span class="string">"l2_out"</span>])</span><br><span class="line">l2_out=tf.nn.sigmoid(tf.add(tf.matmul(l2x,weights[<span class="string">"l2_h1"</span>]),biases[<span class="string">"l2_b1"</span>]))</span><br><span class="line">l2_reconstruction=l2_autodecoder(l2_out,weights,biases)</span><br><span class="line">l2_cost=tf.reduce_mean(tf.pow(l2_reconstruction-l2y,<span class="number">2</span>))</span><br><span class="line">optm2=tf.train.AdamOptimizer(<span class="number">0.01</span>).minimize(l2_cost)</span><br></pre></td></tr></table></figure><h3 id="第三层网络结构"><a href="#第三层网络结构" class="headerlink" title="第三层网络结构"></a>第三层网络结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l3_out = tf.matmul(l3x, weights[<span class="string">'out'</span>]) + biases[<span class="string">'out'</span>]</span><br><span class="line">l3_cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=l3_out, labels=l3y))</span><br><span class="line">l3_optm = tf.train.AdamOptimizer(<span class="number">0.01</span>).minimize(l3_cost)</span><br></pre></td></tr></table></figure><h3 id="定义级联网络结构"><a href="#定义级联网络结构" class="headerlink" title="定义级联网络结构"></a>定义级联网络结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1_l2out = tf.nn.sigmoid(tf.add(tf.matmul(l1_out, weights[<span class="string">'l2_h1'</span>]), biases[<span class="string">'l2_b1'</span>])) </span><br><span class="line">pred = tf.matmul(l1_l2out, weights[<span class="string">'out'</span>]) + biases[<span class="string">'out'</span>]</span><br><span class="line">cost3 = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=l3y))</span><br><span class="line">optm3 = tf.train.AdamOptimizer(<span class="number">0.001</span>).minimize(cost3)</span><br></pre></td></tr></table></figure><h3 id="第一层网络训练"><a href="#第一层网络训练" class="headerlink" title="第一层网络训练"></a>第一层网络训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">epochs     = <span class="number">50</span></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">disp_step  = <span class="number">10</span></span><br><span class="line">load_epoch =<span class="number">49</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"开始训练"</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">        num_batch  = int(mnist.train.num_examples/batch_size)</span><br><span class="line">        total_cost = <span class="number">0.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num_batch):</span><br><span class="line">            batch_xs, batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line">            batch_xs_noisy = batch_xs + <span class="number">0.3</span>*np.random.randn(batch_size, <span class="number">784</span>)</span><br><span class="line">            feeds = &#123;x: batch_xs_noisy, y: batch_xs, dropout_keep_prob: <span class="number">0.5</span>&#125;</span><br><span class="line">            sess.run(l1_optm, feed_dict=feeds)</span><br><span class="line">            total_cost += sess.run(l1_cost, feed_dict=feeds)</span><br><span class="line">        <span class="keyword">if</span> epoch % disp_step == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"Epoch %02d/%02d average cost: %.6f"</span> </span><br><span class="line">                   % (epoch, epochs, total_cost/num_batch))           </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"完成"</span>)    </span><br><span class="line">    <span class="comment">#结果可视化</span></span><br><span class="line">    show_num = <span class="number">10</span></span><br><span class="line">    test_noisy = mnist.test.images[:show_num] + <span class="number">0.3</span>*np.random.randn(show_num, <span class="number">784</span>)</span><br><span class="line">    encode_decode = sess.run(</span><br><span class="line">        l1_reconstruction, feed_dict=&#123;x: test_noisy, dropout_keep_prob: <span class="number">1.</span>&#125;)</span><br><span class="line">    f, a = plt.subplots(<span class="number">3</span>, <span class="number">10</span>, figsize=(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(show_num):</span><br><span class="line">        a[<span class="number">0</span>][i].imshow(np.reshape(test_noisy[i], (<span class="number">28</span>, <span class="number">28</span>)))</span><br><span class="line">        a[<span class="number">1</span>][i].imshow(np.reshape(mnist.test.images[i], (<span class="number">28</span>, <span class="number">28</span>)))</span><br><span class="line">        a[<span class="number">2</span>][i].matshow(np.reshape(encode_decode[i], (<span class="number">28</span>, <span class="number">28</span>)), cmap=plt.get_cmap(<span class="string">'gray'</span>))</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h3 id="第二层网络训练"><a href="#第二层网络训练" class="headerlink" title="第二层网络训练"></a>第二层网络训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"开始训练"</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">        num_batch  = int(mnist.train.num_examples/batch_size)</span><br><span class="line">        total_cost = <span class="number">0.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num_batch):</span><br><span class="line">            batch_xs, batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line"></span><br><span class="line">            l1_h = sess.run(l1_out, feed_dict=&#123;x: batch_xs, y: batch_xs, dropout_keep_prob: <span class="number">1.</span>&#125;)</span><br><span class="line">            _,l2cost = sess.run([optm2,l2_cost], feed_dict=&#123;l2x: l1_h, l2y: l1_h &#125;)</span><br><span class="line">            total_cost += l2cost      </span><br><span class="line">        <span class="keyword">if</span> epoch % disp_step == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"Epoch %02d/%02d average cost: %.6f"</span> </span><br><span class="line">                % (epoch, epochs, total_cost/num_batch))      </span><br><span class="line">    print(sess.run(weights[<span class="string">'h1'</span>])) </span><br><span class="line">    <span class="keyword">print</span> (weights[<span class="string">'h1'</span>].name)  </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"完成  layer_2 训练"</span>)</span><br><span class="line">    <span class="comment">#结果可视化</span></span><br><span class="line">    show_num = <span class="number">10</span></span><br><span class="line">    testvec = mnist.test.images[:show_num]</span><br><span class="line">    out1vec = sess.run(l1_out, feed_dict=&#123;x: testvec,y: testvec, dropout_keep_prob: <span class="number">1.</span>&#125;)</span><br><span class="line">    out2vec = sess.run(l2_reconstruction, feed_dict=&#123;l2x: out1vec&#125;)</span><br><span class="line">    f, a = plt.subplots(<span class="number">3</span>, <span class="number">10</span>, figsize=(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(show_num):</span><br><span class="line">        a[<span class="number">0</span>][i].imshow(np.reshape(testvec[i], (<span class="number">28</span>, <span class="number">28</span>)))</span><br><span class="line">        a[<span class="number">1</span>][i].matshow(np.reshape(out1vec[i], (<span class="number">16</span>, <span class="number">16</span>)), cmap=plt.get_cmap(<span class="string">'gray'</span>))</span><br><span class="line">        a[<span class="number">2</span>][i].matshow(np.reshape(out2vec[i], (<span class="number">16</span>, <span class="number">16</span>)), cmap=plt.get_cmap(<span class="string">'gray'</span>))</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h3 id="第三层网络训练"><a href="#第三层网络训练" class="headerlink" title="第三层网络训练"></a>第三层网络训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"开始训练"</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">        num_batch  = int(mnist.train.num_examples/batch_size)</span><br><span class="line">        total_cost = <span class="number">0.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num_batch):</span><br><span class="line">            batch_xs, batch_ys = mnist.train.next_batch(batch_size)               </span><br><span class="line">            l1_h = sess.run(l1_out, feed_dict=&#123;x: batch_xs, y: batch_xs, dropout_keep_prob: <span class="number">1.</span>&#125;)               </span><br><span class="line">            l2_h = sess.run(l2_out, feed_dict=&#123;l2x: l1_h, l2y: l1_h &#125;)</span><br><span class="line">            _,l3cost = sess.run([l3_optm,l3_cost], feed_dict=&#123;l3x: l2_h, l3y: batch_ys&#125;)</span><br><span class="line">            total_cost += l3cost</span><br><span class="line">        <span class="keyword">if</span> epoch % disp_step == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"Epoch %02d/%02d average cost: %.6f"</span> </span><br><span class="line">                   % (epoch, epochs, total_cost/num_batch))</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"完成  layer_3 训练"</span>)</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 model</span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(pred, <span class="number">1</span>), tf.argmax(l3y, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 计算准确率</span></span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">"float"</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Accuracy:"</span>, accuracy.eval(&#123;x: mnist.test.images, l3y: mnist.test.labels&#125;))</span><br></pre></td></tr></table></figure><p>可以看出，每层的训练参数叠在一起，网络会有比较好的表现</p><h3 id="级联微调"><a href="#级联微调" class="headerlink" title="级联微调"></a>级联微调</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"开始训练"</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">        num_batch  = int(mnist.train.num_examples/batch_size)</span><br><span class="line">        total_cost = <span class="number">0.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num_batch):</span><br><span class="line">            batch_xs, batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line">            </span><br><span class="line">            feeds = &#123;x: batch_xs, l3y: batch_ys&#125;</span><br><span class="line">            sess.run(optm3, feed_dict=feeds)</span><br><span class="line">            total_cost += sess.run(cost3, feed_dict=feeds)</span><br><span class="line">        <span class="keyword">if</span> epoch % disp_step == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"Epoch %02d/%02d average cost: %.6f"</span> </span><br><span class="line">                   % (epoch, epochs, total_cost/num_batch))</span><br><span class="line">           </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"完成  级联 训练"</span>)</span><br><span class="line">    <span class="comment"># 测试 model</span></span><br><span class="line">    correct_prediction = tf.equal(tf.argmax(pred, <span class="number">1</span>), tf.argmax(l3y, <span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 计算准确率</span></span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">"float"</span>))</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Accuracy:"</span>, accuracy.eval(&#123;x: mnist.test.images, l3y: mnist.test.labels&#125;))</span><br></pre></td></tr></table></figure><p>从结果看，由于网络模型中各层的初始值都已经训练好了，所以一开始就是很低的错误率，且每次的迭代后，错误率都有很大幅度的下降。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用方法&quot;&gt;&lt;a href=&quot;#常用方法&quot; class=&quot;headerlink&quot; title=&quot;常用方法&quot;&gt;&lt;/a&gt;常用方法&lt;/h2&gt;&lt;p&gt;自编码常用方法：代替和级联&lt;/p&gt;
&lt;p&gt;栈式自编码会将网络中的中间层作为下一个网络的输入进行训练，我们可以得到网络中每一个
      
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="自编码网络" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%87%AA%E7%BC%96%E7%A0%81%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>栈式自编码网络</title>
    <link href="http://yoursite.com/2020/02/27/%E6%A0%88%E5%BC%8F%E8%87%AA%E7%BC%96%E7%A0%81%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2020/02/27/栈式自编码网络/</id>
    <published>2020-02-27T11:49:12.000Z</published>
    <updated>2020-03-01T04:35:17.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>栈式自编码神经网络（SA）是对自编码网络的一种使用方法，是一个由多层训练好的自编码器组成的神经网络。由于网络中的每一层都是单独训练而来，相当于都初始化一个合理的数值。所以，这样的网络会更容易训练，并且有更快的收敛性及更高的准确度。</p><p>栈式自编码常常被用于预训练深度神经网络之前的权重预训练步骤</p><p>（1）训练一个自编码器，得到原始输入的一阶特征表示h<sup>(1)</sup>，也就是下图的feature I  </p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200227204238.png" alt=""></p><p>（2）将上一步输出的特征h<sup>(1)</sup>作为输入，对其进行再一次自编码，并同时获取特征h<sup>(2)</sup></p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200227204328.png" alt=""></p><p>（3）把上一步的特征h<sup>(2)</sup>连上softmax分类器，得到了一个图片数字标签分类的模型</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200227204531.png" alt=""></p><p>（4）把这三层结合起来，就构成一个包含两个隐藏层加一个softmax的栈式编码网络，它可以对数字图片分类</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200227204752.png" alt=""></p><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>看了上面的步骤，我们不经疑问：为什么要这么麻烦？直接使用多层神经网络训练不是也可以？之所以使用这种方法，主要有以下优点：</p><p>1、每一层都可以单独训练，保证降维特征的可控性</p><p>2、对于高维度的分类问题， 一下拿出一套完整可用的模型相对来讲并不是容易的事， 因为节点太多， 参数太多， 一味地增加深度只会使结果越来越不可控， 成为测底的黑盒， 而使用栈式自编码逐层降维， 可以将复杂问题简单化， 更容易完成任务。</p><p>3、任意深层， 理论上是越深层的神经网络对现实的拟合度越高， 但是传统的多层神经网络，由于使用的是误差反向传播方式， 导致层越深，传播的误差越小。 栈式自编码巧妙地绕过这个问题， 直接使用降维后的特征值进行二次训练， 可以任意层数的加深。  </p><p>栈式自编码网络具有强大的表达能力和深度神经网络的所有优点，它通常能够获取到输入的“层次型分组”或者“部分整体分解”结构，自编码其倾向于学习得到与样本相对应的低维向量，该向量可以更好地表示高位样本的数据特征</p><p>如果网络输入的是图像，第一层会学习边特征，二层会学习组合边、角等，更高层会学习更形象的特征</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;栈式自编码神经网络（SA）是对自编码网络的一种使用方法，是一个由多层训练好的自编码器组成的神经网络。由于网络中的每一层都是单独训练而来，相当
      
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="自编码网络" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%87%AA%E7%BC%96%E7%A0%81%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>去噪自编码网络</title>
    <link href="http://yoursite.com/2020/02/27/%E5%8E%BB%E5%99%AA%E8%87%AA%E7%BC%96%E7%A0%81%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2020/02/27/去噪自编码网络/</id>
    <published>2020-02-27T11:23:10.000Z</published>
    <updated>2020-02-29T02:42:17.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>要想取得好的特征只靠重构输入数据是不够的，实际上，还需要让这些特征具有抗干扰的能力，即当输入数据发生一定程度的扰动时，生成的特征仍然保持不变。这时需要添加噪声为模型增加更大的困难。在这种情况下训练出来的模型才会有更好的鲁棒性，于是就有了去噪自编码网络</p><p>去噪自编码网络（DA）是在自动编码的基础上，训练数据加入噪声，输出的标签仍是原始的样本（没有加入噪声的），这样自动编码器必须学习去除噪声而获得真正的没有被噪声污染过的输入特征。因此，这就迫使编码器去学习输入信号的更加鲁棒的特征表达，即具有更加强悍的泛化能力</p><p>在实际训练中，人为加入噪声有两种途径：</p><p>（1）在选择训练数据集时，额外选择一些样本集以外的数据</p><p>（2）改变已有的样本数据集中的数据</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"/data/"</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">train_X   = mnist.train.images</span><br><span class="line">train_Y = mnist.train.labels</span><br><span class="line">test_X    = mnist.test.images</span><br><span class="line">test_Y  = mnist.test.labels</span><br><span class="line"></span><br><span class="line">tf.reset_default_graph()</span><br><span class="line"></span><br><span class="line">n_input    = <span class="number">784</span> </span><br><span class="line">n_hidden_1 = <span class="number">256</span> </span><br><span class="line"></span><br><span class="line">x = tf.placeholder(<span class="string">"float"</span>, [<span class="literal">None</span>, n_input])</span><br><span class="line">y = tf.placeholder(<span class="string">"float"</span>, [<span class="literal">None</span>, n_input])</span><br><span class="line">dropout_keep_prob = tf.placeholder(<span class="string">"float"</span>)</span><br><span class="line"></span><br><span class="line">weights = &#123;</span><br><span class="line">    <span class="string">'h1'</span>: tf.Variable(tf.random_normal([n_input, n_hidden_1])),</span><br><span class="line">    <span class="string">'h2'</span>: tf.Variable(tf.random_normal([n_hidden_1, n_hidden_1])),</span><br><span class="line">    <span class="string">'out'</span>: tf.Variable(tf.random_normal([n_hidden_1, n_input]))</span><br><span class="line">&#125;</span><br><span class="line">biases = &#123;</span><br><span class="line">    <span class="string">'b1'</span>: tf.Variable(tf.zeros([n_hidden_1])),</span><br><span class="line">    <span class="string">'b2'</span>: tf.Variable(tf.zeros([n_hidden_1])),</span><br><span class="line">    <span class="string">'out'</span>: tf.Variable(tf.zeros([n_input]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denoise_auto_encoder</span><span class="params">(_X, _weights, _biases, _keep_prob)</span>:</span></span><br><span class="line">    layer_1 = tf.nn.sigmoid(tf.add(tf.matmul(_X, _weights[<span class="string">'h1'</span>]), _biases[<span class="string">'b1'</span>])) </span><br><span class="line">    layer_1out = tf.nn.dropout(layer_1, _keep_prob) </span><br><span class="line">    layer_2 = tf.nn.sigmoid(tf.add(tf.matmul(layer_1out, _weights[<span class="string">'h2'</span>]), _biases[<span class="string">'b2'</span>])) </span><br><span class="line">    layer_2out = tf.nn.dropout(layer_2, _keep_prob) </span><br><span class="line">    <span class="keyword">return</span> tf.nn.sigmoid(tf.matmul(layer_2out, _weights[<span class="string">'out'</span>]) + _biases[<span class="string">'out'</span>])</span><br><span class="line"></span><br><span class="line">reconstruction = denoise_auto_encoder(x, weights, biases, dropout_keep_probcost = tf.reduce_mean(tf.pow(reconstruction-y, <span class="number">2</span>))</span><br><span class="line">optm = tf.train.AdamOptimizer(<span class="number">0.01</span>).minimize(cost) </span><br><span class="line"></span><br><span class="line">epochs     = <span class="number">20</span></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">disp_step  = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"开始训练"</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">        num_batch  = int(mnist.train.num_examples/batch_size)</span><br><span class="line">        total_cost = <span class="number">0.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num_batch):</span><br><span class="line">            batch_xs, batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line">            <span class="comment">#制造噪声</span></span><br><span class="line">            batch_xs_noisy = batch_xs + <span class="number">0.3</span>*np.random.randn(batch_size, <span class="number">784</span>)</span><br><span class="line">            feeds = &#123;x: batch_xs_noisy, y: batch_xs, dropout_keep_prob: <span class="number">1.</span>&#125;</span><br><span class="line">            sess.run(optm, feed_dict=feeds)</span><br><span class="line">            total_cost += sess.run(cost, feed_dict=feeds)</span><br><span class="line">        <span class="keyword">if</span> epoch % disp_step == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"Epoch %02d/%02d average cost: %.6f"</span> </span><br><span class="line">                   % (epoch, epochs, total_cost/num_batch))</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"完成"</span>)</span><br><span class="line">    show_num = <span class="number">10</span></span><br><span class="line">    test_noisy = mnist.test.images[:show_num] + <span class="number">0.3</span>*np.random.randn(show_num, <span class="number">784</span>)</span><br><span class="line">    encode_decode = sess.run(</span><br><span class="line">        reconstruction, feed_dict=&#123;x: test_noisy, dropout_keep_prob: <span class="number">1.</span>&#125;)</span><br><span class="line">    f, a = plt.subplots(<span class="number">3</span>, <span class="number">10</span>, figsize=(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(show_num):</span><br><span class="line">        a[<span class="number">0</span>][i].imshow(np.reshape(test_noisy[i], (<span class="number">28</span>, <span class="number">28</span>)))</span><br><span class="line">        a[<span class="number">1</span>][i].imshow(np.reshape(mnist.test.images[i], (<span class="number">28</span>, <span class="number">28</span>)))</span><br><span class="line">        a[<span class="number">2</span>][i].matshow(np.reshape(encode_decode[i], (<span class="number">28</span>, <span class="number">28</span>)), cmap=plt.get_cmap(<span class="string">'gray'</span>))</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;要想取得好的特征只靠重构输入数据是不够的，实际上，还需要让这些特征具有抗干扰的能力，即当输入数据发生一定程度的扰动时，生成的特征仍然保持不变
      
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="自编码网络" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%87%AA%E7%BC%96%E7%A0%81%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>自编码网络介绍</title>
    <link href="http://yoursite.com/2020/02/27/%E8%87%AA%E7%BC%96%E7%A0%81%E7%BD%91%E7%BB%9C%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2020/02/27/自编码网络介绍/</id>
    <published>2020-02-27T03:10:16.000Z</published>
    <updated>2020-02-28T12:49:12.670Z</updated>
    
    <content type="html"><![CDATA[<p>深度学习领域主要有两种训练模式：一种是监督学习，另一种是非监督学习。前者有样本有标签，后者只有样本。此外还有半监督学习，半监督学习属于非监督学习领域</p><p>相对于监督学习来说，非监督学习就显得简单得多。非监督学习能让网络直接使用样本进行训练，不需要准备标签。接下来我们就来学习一个非监督模型的网络——自编码网络</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>人们看一张图时，一般是扫一眼物体，大致会得到图片的诸多特征。而计算机是逐个元素去读，怎么让计算机也具有人类的能力呢？用自编码网络</p><p>自编码网络是非监督学习领域中的一种，可以自动从无标注的数据中学习特征，是一种以重构输入信号为目标的神经网络，它可以给出比原始数据更好的特征描述，具有较强的特征学习能力，在深度学习中常用自编码网络生成的特征来取代原始数据，以得到更好的结果</p><p>自编码（AE）网络是输入等于输出的网络，最基本的模型可以是为三层神经网络，也就是输入层、隐藏层、输出层。其中，输入层的样本也会充当输出层的标签。即：这个神经网络就是一种尽可能复现输入信号的神经网络。</p><p><img src="https://raw.githubusercontent.com/Brickexperts/image-bed3/master/20200227133126.png" alt=""></p><p>在上图中，自编码器要求输出尽可能等于输入，并且其隐藏层必须满足一定的稀疏性，是通过将隐藏层中的后一层个数比前一层神经元个数少的方式来实现稀疏效果的。相当于隐藏层对输入进行了压缩，并在输出层中解压缩。整个过程是一定会丢失信息的，但训练能够使丢失的信息尽量减少，最大化地保留其主要特征。这样的自动编码器可以捕捉代表输入数据的最重要的因素，类似PCA算法。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist=input_data.read_data_sets(<span class="string">"/data/"</span>,one_hot=<span class="literal">True</span>)</span><br><span class="line">learning_rate=<span class="number">0.01</span></span><br><span class="line"><span class="comment">#第一层隐藏层节点</span></span><br><span class="line">n_hidden_1=<span class="number">256</span></span><br><span class="line"><span class="comment">#第二层隐藏层节点</span></span><br><span class="line">n_hidden_2=<span class="number">128</span></span><br><span class="line">n_input=<span class="number">784</span> <span class="comment">#28*28</span></span><br><span class="line">x=tf.placeholder(<span class="string">"float"</span>,[<span class="literal">None</span>,n_input])</span><br><span class="line">y=x</span><br><span class="line">weights = &#123;</span><br><span class="line">    <span class="string">'encoder_h1'</span>: tf.Variable(tf.random_normal([n_input, n_hidden_1])),</span><br><span class="line">    <span class="string">'encoder_h2'</span>: tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),</span><br><span class="line">    <span class="string">'decoder_h1'</span>: tf.Variable(tf.random_normal([n_hidden_2, n_hidden_1])),</span><br><span class="line">    <span class="string">'decoder_h2'</span>: tf.Variable(tf.random_normal([n_hidden_1, n_input])),</span><br><span class="line">&#125;</span><br><span class="line">biases = &#123;</span><br><span class="line">    <span class="string">'encoder_b1'</span>: tf.Variable(tf.zeros([n_hidden_1])),</span><br><span class="line">    <span class="string">'encoder_b2'</span>: tf.Variable(tf.zeros([n_hidden_2])),</span><br><span class="line">    <span class="string">'decoder_b1'</span>: tf.Variable(tf.zeros([n_hidden_1])),</span><br><span class="line">    <span class="string">'decoder_b2'</span>: tf.Variable(tf.zeros([n_input])),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encoder</span><span class="params">(x)</span>:</span></span><br><span class="line">  layer_1=tf.nn.sigmoid(tf.add(tf.matmul(x,weights[<span class="string">"encoder_h1"</span>]),biases[<span class="string">"encoder_b1"</span>]))</span><br><span class="line">  layer_2=tf.nn.sigmoid(tf.add(tf.matmul(layer_1,weights[<span class="string">"encoder_h2"</span>]),biases[<span class="string">"encoder_b2"</span>]))</span><br><span class="line">  <span class="keyword">return</span> layer_2</span><br><span class="line"><span class="comment">#解码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decoder</span><span class="params">(x)</span>:</span></span><br><span class="line">  layer_1=tf.nn.sigmoid(tf.add(tf.matmul(x,weights[<span class="string">"decoder_h1"</span>]),biases[<span class="string">"decoder_b1"</span>]))</span><br><span class="line">  layer_2=tf.nn.sigmoid(tf.add(tf.matmul(layer_1,weights[<span class="string">"decoder_h2"</span>]),biases[<span class="string">"decoder_b2"</span>]))</span><br><span class="line">  <span class="keyword">return</span> layer_2</span><br><span class="line">encoder_out=encoder(x)</span><br><span class="line">pred=decoder(encoder_out)</span><br><span class="line">cost = tf.reduce_mean(tf.pow(y - pred, <span class="number">2</span>))</span><br><span class="line">optimizer = tf.train.RMSPropOptimizer(learning_rate).minimize(cost)</span><br><span class="line"><span class="comment"># 训练参数</span></span><br><span class="line">training_epochs = <span class="number">100</span>  </span><br><span class="line">batch_size = <span class="number">256</span>     </span><br><span class="line">display_step = <span class="number">10</span>     </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    total_batch = int(mnist.train.num_examples/batch_size)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(training_epochs):   </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(total_batch):</span><br><span class="line">            batch_xs, batch_ys = mnist.train.next_batch(batch_size)<span class="comment">#取数据</span></span><br><span class="line">            _, c = sess.run([optimizer, cost], feed_dict=&#123;x: batch_xs&#125;)<span class="comment"># 训练模型</span></span><br><span class="line">        <span class="keyword">if</span> epoch % display_step == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"Epoch:"</span>, <span class="string">'%04d'</span> % (epoch+<span class="number">1</span>),<span class="string">"cost="</span>, <span class="string">"&#123;:.9f&#125;"</span>.format(c))</span><br><span class="line">    print(<span class="string">"完成!"</span>)  </span><br><span class="line">    <span class="comment"># 测试</span></span><br><span class="line">    correct_prediction = tf.equal(tf.argmax(pred, <span class="number">1</span>), tf.argmax(y, <span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 计算错误率</span></span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">"float"</span>))</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Accuracy:"</span>, <span class="number">1</span>-accuracy.eval(&#123;x: mnist.test.images, y: mnist.test.images&#125;))</span><br><span class="line"></span><br><span class="line">    show_num = <span class="number">10</span></span><br><span class="line">    reconstruction = sess.run(</span><br><span class="line">        pred, feed_dict=&#123;x: mnist.test.images[:show_num]&#125;)</span><br><span class="line">    f, a = plt.subplots(<span class="number">2</span>, <span class="number">10</span>, figsize=(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(show_num):</span><br><span class="line">        a[<span class="number">0</span>][i].imshow(np.reshape(mnist.test.images[i], (<span class="number">28</span>, <span class="number">28</span>)))</span><br><span class="line">        a[<span class="number">1</span>][i].imshow(np.reshape(reconstruction[i], (<span class="number">28</span>, <span class="number">28</span>)))</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="线性解码器"><a href="#线性解码器" class="headerlink" title="线性解码器"></a>线性解码器</h2><p>在上面的代码中，使用的激活函数是sigmoid，这是一个S型激活函数，输出范围是[0,1]。当我们对最终提取的特征节点采用该激活函数时，就相当于对输入限制或缩放，使其位于[0,1]范围中。有一些数据集，比如MNIST，能方便地将输出缩放到[0,1]中，但是很难满足对输入值的要求。利用一个恒等式来作为激活函数，就可以解决这个问题，f(z)=z，即：没有激活函数。</p><p><strong>注意：这个只是对最后的输出层而言，隐藏层要使用激活函数</strong></p><p>由多个带有S型激活函数的隐藏层及一个线性输出层构成的自编码器，成为线性解码器</p><h2 id="自编码的卷积网络"><a href="#自编码的卷积网络" class="headerlink" title="自编码的卷积网络"></a>自编码的卷积网络</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"/data/"</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line">learning_rate = <span class="number">0.01</span>    </span><br><span class="line">n_hidden_1 = <span class="number">256</span></span><br><span class="line">n_hidden_2 = <span class="number">64</span></span><br><span class="line">n_hidden_3 = <span class="number">16</span></span><br><span class="line">n_hidden_4 = <span class="number">2</span></span><br><span class="line">n_input = <span class="number">784</span> </span><br><span class="line"></span><br><span class="line">x = tf.placeholder(<span class="string">"float"</span>, [<span class="literal">None</span>,n_input])</span><br><span class="line">y=x</span><br><span class="line">weights = &#123;</span><br><span class="line">    <span class="string">'encoder_h1'</span>: tf.Variable(tf.random_normal([n_input, n_hidden_1],)),</span><br><span class="line">    <span class="string">'encoder_h2'</span>: tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2],)),</span><br><span class="line">    <span class="string">'encoder_h3'</span>: tf.Variable(tf.random_normal([n_hidden_2, n_hidden_3],)),</span><br><span class="line">    <span class="string">'encoder_h4'</span>: tf.Variable(tf.random_normal([n_hidden_3, n_hidden_4],)),</span><br><span class="line"></span><br><span class="line">    <span class="string">'decoder_h1'</span>: tf.Variable(tf.random_normal([n_hidden_4, n_hidden_3],)),</span><br><span class="line">    <span class="string">'decoder_h2'</span>: tf.Variable(tf.random_normal([n_hidden_3, n_hidden_2],)),</span><br><span class="line">    <span class="string">'decoder_h3'</span>: tf.Variable(tf.random_normal([n_hidden_2, n_hidden_1],)),</span><br><span class="line">    <span class="string">'decoder_h4'</span>: tf.Variable(tf.random_normal([n_hidden_1, n_input],)),</span><br><span class="line">&#125; </span><br><span class="line">biases = &#123;</span><br><span class="line">    <span class="string">'encoder_b1'</span>: tf.Variable(tf.zeros([n_hidden_1])),</span><br><span class="line">    <span class="string">'encoder_b2'</span>: tf.Variable(tf.zeros([n_hidden_2])),</span><br><span class="line">    <span class="string">'encoder_b3'</span>: tf.Variable(tf.zeros([n_hidden_3])),</span><br><span class="line">    <span class="string">'encoder_b4'</span>: tf.Variable(tf.zeros([n_hidden_4])),</span><br><span class="line"></span><br><span class="line">    <span class="string">'decoder_b1'</span>: tf.Variable(tf.zeros([n_hidden_3])),</span><br><span class="line">    <span class="string">'decoder_b2'</span>: tf.Variable(tf.zeros([n_hidden_2])),</span><br><span class="line">    <span class="string">'decoder_b3'</span>: tf.Variable(tf.zeros([n_hidden_1])),</span><br><span class="line">    <span class="string">'decoder_b4'</span>: tf.Variable(tf.zeros([n_input])),</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encoder</span><span class="params">(x)</span>:</span></span><br><span class="line">    layer_1 = tf.nn.sigmoid(tf.add(tf.matmul(x, weights[<span class="string">'encoder_h1'</span>]),biases[<span class="string">'encoder_b1'</span>]))</span><br><span class="line">    layer_2 = tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights[<span class="string">'encoder_h2'</span>]),biases[<span class="string">'encoder_b2'</span>]))</span><br><span class="line">    layer_3 = tf.nn.sigmoid(tf.add(tf.matmul(layer_2, weights[<span class="string">'encoder_h3'</span>]),biases[<span class="string">'encoder_b3'</span>]))</span><br><span class="line">    layer_4 = tf.add(tf.matmul(layer_3, weights[<span class="string">'encoder_h4'</span>]),biases[<span class="string">'encoder_b4'</span>])</span><br><span class="line">    <span class="keyword">return</span> layer_4</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decoder</span><span class="params">(x)</span>:</span></span><br><span class="line">    layer_1 = tf.nn.sigmoid(tf.add(tf.matmul(x, weights[<span class="string">'decoder_h1'</span>]),biases[<span class="string">'decoder_b1'</span>]))</span><br><span class="line">    layer_2 = tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights[<span class="string">'decoder_h2'</span>]), biases[<span class="string">'decoder_b2'</span>]))</span><br><span class="line">    layer_3 = tf.nn.sigmoid(tf.add(tf.matmul(layer_2, weights[<span class="string">'decoder_h3'</span>]),biases[<span class="string">'decoder_b3'</span>]))</span><br><span class="line">    layer_4 = tf.nn.sigmoid(tf.add(tf.matmul(layer_3, weights[<span class="string">'decoder_h4'</span>]),biases[<span class="string">'decoder_b4'</span>]))</span><br><span class="line">    <span class="keyword">return</span> layer_4</span><br><span class="line"></span><br><span class="line">encoder_op = encoder(x) </span><br><span class="line">y_pred = decoder(encoder_op)</span><br><span class="line">cost = tf.reduce_mean(tf.pow(y - y_pred, <span class="number">2</span>))</span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate).minimize(cost)</span><br><span class="line">training_epochs = <span class="number">100</span> </span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">display_step = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    total_batch = int(mnist.train.num_examples/batch_size)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(training_epochs):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(total_batch):</span><br><span class="line">            batch_xs, batch_ys = mnist.train.next_batch(batch_size)  </span><br><span class="line">        <span class="keyword">if</span> epoch % display_step == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"Epoch:"</span>, <span class="string">'%04d'</span> % (epoch+<span class="number">1</span>),<span class="string">"cost="</span>, <span class="string">"&#123;:.9f&#125;"</span>.format(c))</span><br><span class="line">    print(<span class="string">"完成!"</span>)</span><br><span class="line">    show_num = <span class="number">10</span></span><br><span class="line">    encode_decode = sess.run(</span><br><span class="line">        y_pred, feed_dict=&#123;x: mnist.test.images[:show_num]&#125;)</span><br><span class="line">    f, a = plt.subplots(<span class="number">2</span>, <span class="number">10</span>, figsize=(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(show_num):</span><br><span class="line">        a[<span class="number">0</span>][i].imshow(np.reshape(mnist.test.images[i], (<span class="number">28</span>, <span class="number">28</span>)))</span><br><span class="line">        a[<span class="number">1</span>][i].imshow(np.reshape(encode_decode[i], (<span class="number">28</span>, <span class="number">28</span>)))</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>如果读者得到更好的特征提取效果，可以将压缩的层数变得更多，但是由于sigmoid函数的缺陷，无法使用更深的层，所以只能做成4层压缩。这有一个解决办法——使用栈式自编码器</p><h2 id="使用自编码的卷积网络"><a href="#使用自编码的卷积网络" class="headerlink" title="使用自编码的卷积网络"></a>使用自编码的卷积网络</h2><p>自编码结构不仅只用在全连接网络上，还可用在卷积网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"/data/"</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#最大池化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_with_argmax</span><span class="params">(net, stride)</span>:</span></span><br><span class="line">    _, mask = tf.nn.max_pool_with_argmax( net,ksize=[<span class="number">1</span>, stride, stride, <span class="number">1</span>], strides=[<span class="number">1</span>, stride, stride, <span class="number">1</span>],padding=<span class="string">'SAME'</span>)</span><br><span class="line">    mask = tf.stop_gradient(mask)</span><br><span class="line">    net = tf.nn.max_pool(net, ksize=[<span class="number">1</span>, stride, stride, <span class="number">1</span>],strides=[<span class="number">1</span>, stride, stride, <span class="number">1</span>], padding=<span class="string">'SAME'</span>) </span><br><span class="line">    <span class="keyword">return</span> net, mask</span><br><span class="line"><span class="comment">#4*4----2*2--=2*2 【6，8，12，16】    </span></span><br><span class="line"><span class="comment">#反池化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpool</span><span class="params">(net, mask, stride)</span>:</span></span><br><span class="line">    ksize = [<span class="number">1</span>, stride, stride, <span class="number">1</span>]</span><br><span class="line">    input_shape = net.get_shape().as_list()</span><br><span class="line">    output_shape = (input_shape[<span class="number">0</span>], input_shape[<span class="number">1</span>] * ksize[<span class="number">1</span>], input_shape[<span class="number">2</span>] * ksize[<span class="number">2</span>], input_shape[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    one_like_mask = tf.ones_like(mask)</span><br><span class="line">    batch_range = tf.reshape(tf.range(output_shape[<span class="number">0</span>], dtype=tf.int64), shape=[input_shape[<span class="number">0</span>], <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">    b = one_like_mask * batch_range</span><br><span class="line">    y = mask // (output_shape[<span class="number">2</span>] * output_shape[<span class="number">3</span>])</span><br><span class="line">    x = mask % (output_shape[<span class="number">2</span>] * output_shape[<span class="number">3</span>]) // output_shape[<span class="number">3</span>]</span><br><span class="line">    feature_range = tf.range(output_shape[<span class="number">3</span>], dtype=tf.int64)</span><br><span class="line">    f = one_like_mask * feature_range</span><br><span class="line"></span><br><span class="line">    updates_size = tf.size(net)</span><br><span class="line">    indices = tf.transpose(tf.reshape(tf.stack([b, y, x, f]), [<span class="number">4</span>, updates_size]))</span><br><span class="line">    values = tf.reshape(net, [updates_size])</span><br><span class="line">    ret = tf.scatter_nd(indices, values, output_shape)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span><span class="params">(x)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">                        strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)  </span><br><span class="line">                        </span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">n_conv_1 = <span class="number">16</span> </span><br><span class="line">n_conv_2 = <span class="number">32</span> </span><br><span class="line">n_input = <span class="number">784</span></span><br><span class="line">batchsize = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">x = tf.placeholder(<span class="string">"float"</span>, [batchsize, n_input])</span><br><span class="line"></span><br><span class="line">x_image = tf.reshape(x, [<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encoder</span><span class="params">(x)</span>:</span></span><br><span class="line">    h_conv1 = tf.nn.relu(conv2d(x, weights[<span class="string">'encoder_conv1'</span>]) + biases[<span class="string">'encoder_conv1'</span>])</span><br><span class="line">    h_conv2 = tf.nn.relu(conv2d(h_conv1, weights[<span class="string">'encoder_conv2'</span>]) + biases[<span class="string">'encoder_conv2'</span>])  </span><br><span class="line">    <span class="keyword">return</span> h_conv2,h_conv1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decoder</span><span class="params">(x,conv1)</span>:</span></span><br><span class="line">    t_conv1 = tf.nn.conv2d_transpose(x-biases[<span class="string">'decoder_conv2'</span>], weights[<span class="string">'decoder_conv2'</span>], conv1.shape,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">    t_x_image = tf.nn.conv2d_transpose(t_conv1-biases[<span class="string">'decoder_conv1'</span>], weights[<span class="string">'decoder_conv1'</span>], x_image.shape,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> t_x_image</span><br><span class="line"></span><br><span class="line">weights = &#123;</span><br><span class="line">    <span class="string">'encoder_conv1'</span>: tf.Variable(tf.truncated_normal([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, n_conv_1],stddev=<span class="number">0.1</span>)),</span><br><span class="line">    <span class="string">'encoder_conv2'</span>: tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">3</span>, n_conv_1, n_conv_2],stddev=<span class="number">0.1</span>)),</span><br><span class="line">    <span class="string">'decoder_conv1'</span>: tf.Variable(tf.random_normal([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, n_conv_1],stddev=<span class="number">0.1</span>)),</span><br><span class="line">    <span class="string">'decoder_conv2'</span>: tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">3</span>, n_conv_1, n_conv_2],stddev=<span class="number">0.1</span>))</span><br><span class="line">&#125;</span><br><span class="line">biases = &#123;</span><br><span class="line">    <span class="string">'encoder_conv1'</span>: tf.Variable(tf.zeros([n_conv_1])),</span><br><span class="line">    <span class="string">'encoder_conv2'</span>: tf.Variable(tf.zeros([n_conv_2])),</span><br><span class="line">    <span class="string">'decoder_conv1'</span>: tf.Variable(tf.zeros([n_conv_1])),</span><br><span class="line">    <span class="string">'decoder_conv2'</span>: tf.Variable(tf.zeros([n_conv_2])),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">encoder_out,conv1 = encoder(x_image)</span><br><span class="line">h_pool2, mask = max_pool_with_argmax(encoder_out, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">h_upool = unpool(h_pool2, mask, <span class="number">2</span>)</span><br><span class="line">pred = decoder(h_upool,conv1)</span><br><span class="line"></span><br><span class="line">cost = tf.reduce_mean(tf.pow(x_image - pred, <span class="number">2</span>))</span><br><span class="line">optimizer = tf.train.RMSPropOptimizer(learning_rate).minimize(cost)</span><br><span class="line"></span><br><span class="line">training_epochs = <span class="number">20</span>  </span><br><span class="line"></span><br><span class="line">display_step = <span class="number">5</span>   </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())   </span><br><span class="line">    total_batch = int(mnist.train.num_examples/batchsize)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(training_epochs):       </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(total_batch):</span><br><span class="line">            batch_xs, batch_ys = mnist.train.next_batch(batchsize)</span><br><span class="line">            _, c = sess.run([optimizer, cost], feed_dict=&#123;x: batch_xs&#125;)</span><br><span class="line">        <span class="keyword">if</span> epoch % display_step == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"Epoch:"</span>, <span class="string">'%04d'</span> % (epoch+<span class="number">1</span>),<span class="string">"cost="</span>, <span class="string">"&#123;:.9f&#125;"</span>.format(c))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"完成!"</span>)   </span><br><span class="line">    batch_xs, batch_ys = mnist.train.next_batch(batchsize)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Error:"</span>, cost.eval(&#123;x: batch_xs&#125;))</span><br><span class="line">    show_num = <span class="number">10</span></span><br><span class="line">    reconstruction = sess.run(</span><br><span class="line">        pred, feed_dict=&#123;x: batch_xs&#125;)</span><br><span class="line">    f, a = plt.subplots(<span class="number">2</span>, <span class="number">10</span>, figsize=(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(show_num):</span><br><span class="line">        a[<span class="number">0</span>][i].imshow(np.reshape(batch_xs[i], (<span class="number">28</span>, <span class="number">28</span>)))</span><br><span class="line">        a[<span class="number">1</span>][i].imshow(np.reshape(reconstruction[i], (<span class="number">28</span>, <span class="number">28</span>)))</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;深度学习领域主要有两种训练模式：一种是监督学习，另一种是非监督学习。前者有样本有标签，后者只有样本。此外还有半监督学习，半监督学习属于非监督学习领域&lt;/p&gt;
&lt;p&gt;相对于监督学习来说，非监督学习就显得简单得多。非监督学习能让网络直接使用样本进行训练，不需要准备标签。接下来我
      
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="自编码网络" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%87%AA%E7%BC%96%E7%A0%81%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
